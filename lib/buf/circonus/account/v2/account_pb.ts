// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file circonus/account/v2/account.proto (package circonus.account.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Int64Value, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum circonus.account.v2.AccountLifecycleState
 */
export enum AccountLifecycleState {
  /**
   * @generated from enum value: ACCOUNT_LIFECYCLE_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACCOUNT_LIFECYCLE_STATE_PROVISIONING = 1;
   */
  PROVISIONING = 1,

  /**
   * @generated from enum value: ACCOUNT_LIFECYCLE_STATE_HEALTHY = 2;
   */
  HEALTHY = 2,

  /**
   * @generated from enum value: ACCOUNT_LIFECYCLE_STATE_DISABLING = 3;
   */
  DISABLING = 3,

  /**
   * @generated from enum value: ACCOUNT_LIFECYCLE_STATE_DISABLED = 4;
   */
  DISABLED = 4,

  /**
   * @generated from enum value: ACCOUNT_LIFECYCLE_STATE_DELETING = 5;
   */
  DELETING = 5,

  /**
   * @generated from enum value: ACCOUNT_LIFECYCLE_STATE_DELETED = 6;
   */
  DELETED = 6,

  /**
   * @generated from enum value: ACCOUNT_LIFECYCLE_STATE_UNHEALTHY = 999;
   */
  UNHEALTHY = 999,
}
// Retrieve enum metadata with: proto3.getEnumType(AccountLifecycleState)
proto3.util.setEnumType(AccountLifecycleState, "circonus.account.v2.AccountLifecycleState", [
  { no: 0, name: "ACCOUNT_LIFECYCLE_STATE_UNSPECIFIED" },
  { no: 1, name: "ACCOUNT_LIFECYCLE_STATE_PROVISIONING" },
  { no: 2, name: "ACCOUNT_LIFECYCLE_STATE_HEALTHY" },
  { no: 3, name: "ACCOUNT_LIFECYCLE_STATE_DISABLING" },
  { no: 4, name: "ACCOUNT_LIFECYCLE_STATE_DISABLED" },
  { no: 5, name: "ACCOUNT_LIFECYCLE_STATE_DELETING" },
  { no: 6, name: "ACCOUNT_LIFECYCLE_STATE_DELETED" },
  { no: 999, name: "ACCOUNT_LIFECYCLE_STATE_UNHEALTHY" },
]);

/**
 * @generated from message circonus.account.v2.Account
 */
export class Account extends Message<Account> {
  /**
   * @generated from field: int64 revision_id = 1;
   */
  revisionId = protoInt64.zero;

  /**
   * @generated from field: string account_id = 2;
   */
  accountId = "";

  /**
   * @generated from field: string account_slug = 3;
   */
  accountSlug = "";

  /**
   * @generated from field: string email_domain = 4;
   */
  emailDomain = "";

  /**
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * @generated from field: string description = 6;
   */
  description = "";

  /**
   * @generated from field: string email = 7;
   */
  email = "";

  /**
   * @generated from field: string status = 8;
   */
  status = "";

  /**
   * @generated from field: circonus.account.v2.AccountLifecycleState lifecycle_state = 9;
   */
  lifecycleState = AccountLifecycleState.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp state_changed_at = 10;
   */
  stateChangedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 11;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 12;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp deleted_at = 13;
   */
  deletedAt?: Timestamp;

  /**
   * @generated from field: string admin_first_name = 14;
   */
  adminFirstName = "";

  /**
   * @generated from field: string admin_last_name = 15;
   */
  adminLastName = "";

  /**
   * @generated from field: string admin_email = 16;
   */
  adminEmail = "";

  constructor(data?: PartialMessage<Account>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "circonus.account.v2.Account";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "revision_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account_slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "email_domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "lifecycle_state", kind: "enum", T: proto3.getEnumType(AccountLifecycleState) },
    { no: 10, name: "state_changed_at", kind: "message", T: Timestamp },
    { no: 11, name: "created_at", kind: "message", T: Timestamp },
    { no: 12, name: "updated_at", kind: "message", T: Timestamp },
    { no: 13, name: "deleted_at", kind: "message", T: Timestamp },
    { no: 14, name: "admin_first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "admin_last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "admin_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Account {
    return new Account().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJsonString(jsonString, options);
  }

  static equals(a: Account | PlainMessage<Account> | undefined, b: Account | PlainMessage<Account> | undefined): boolean {
    return proto3.util.equals(Account, a, b);
  }
}

/**
 * @generated from message circonus.account.v2.AccountList
 */
export class AccountList extends Message<AccountList> {
  /**
   * @generated from field: repeated circonus.account.v2.Account accounts = 1;
   */
  accounts: Account[] = [];

  constructor(data?: PartialMessage<AccountList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "circonus.account.v2.AccountList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: Account, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountList {
    return new AccountList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountList {
    return new AccountList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountList {
    return new AccountList().fromJsonString(jsonString, options);
  }

  static equals(a: AccountList | PlainMessage<AccountList> | undefined, b: AccountList | PlainMessage<AccountList> | undefined): boolean {
    return proto3.util.equals(AccountList, a, b);
  }
}

/**
 * @generated from message circonus.account.v2.GetAccountResult
 */
export class GetAccountResult extends Message<GetAccountResult> {
  /**
   * @generated from field: circonus.account.v2.Account account = 1;
   */
  account?: Account;

  constructor(data?: PartialMessage<GetAccountResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "circonus.account.v2.GetAccountResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountResult {
    return new GetAccountResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountResult {
    return new GetAccountResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountResult {
    return new GetAccountResult().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountResult | PlainMessage<GetAccountResult> | undefined, b: GetAccountResult | PlainMessage<GetAccountResult> | undefined): boolean {
    return proto3.util.equals(GetAccountResult, a, b);
  }
}

/**
 * @generated from message circonus.account.v2.AccountAddress
 */
export class AccountAddress extends Message<AccountAddress> {
  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 9;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 10;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp deleted_at = 12;
   */
  deletedAt?: Timestamp;

  constructor(data?: PartialMessage<AccountAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "circonus.account.v2.AccountAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "created_at", kind: "message", T: Timestamp },
    { no: 10, name: "updated_at", kind: "message", T: Timestamp },
    { no: 12, name: "deleted_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountAddress {
    return new AccountAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountAddress {
    return new AccountAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountAddress {
    return new AccountAddress().fromJsonString(jsonString, options);
  }

  static equals(a: AccountAddress | PlainMessage<AccountAddress> | undefined, b: AccountAddress | PlainMessage<AccountAddress> | undefined): boolean {
    return proto3.util.equals(AccountAddress, a, b);
  }
}

/**
 * @generated from message circonus.account.v2.AccountAddressList
 */
export class AccountAddressList extends Message<AccountAddressList> {
  /**
   * @generated from field: repeated circonus.account.v2.AccountAddress account_address = 1;
   */
  accountAddress: AccountAddress[] = [];

  constructor(data?: PartialMessage<AccountAddressList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "circonus.account.v2.AccountAddressList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_address", kind: "message", T: AccountAddress, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountAddressList {
    return new AccountAddressList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountAddressList {
    return new AccountAddressList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountAddressList {
    return new AccountAddressList().fromJsonString(jsonString, options);
  }

  static equals(a: AccountAddressList | PlainMessage<AccountAddressList> | undefined, b: AccountAddressList | PlainMessage<AccountAddressList> | undefined): boolean {
    return proto3.util.equals(AccountAddressList, a, b);
  }
}

/**
 * @generated from message circonus.account.v2.AccountLifecycleChange
 */
export class AccountLifecycleChange extends Message<AccountLifecycleChange> {
  /**
   * @generated from field: string change_id = 1;
   */
  changeId = "";

  /**
   * @generated from field: string account_id = 2;
   */
  accountId = "";

  /**
   * @generated from field: circonus.account.v2.Account before_account = 3;
   */
  beforeAccount?: Account;

  /**
   * @generated from field: circonus.account.v2.Account after_account = 4;
   */
  afterAccount?: Account;

  /**
   * @generated from field: circonus.account.v2.AccountLifecycleState before_state = 5;
   */
  beforeState = AccountLifecycleState.UNSPECIFIED;

  /**
   * @generated from field: circonus.account.v2.AccountLifecycleState after_state = 6;
   */
  afterState = AccountLifecycleState.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Int64Value before_revision_id = 7;
   */
  beforeRevisionId?: bigint;

  /**
   * @generated from field: google.protobuf.Int64Value after_revision_id = 8;
   */
  afterRevisionId?: bigint;

  /**
   * @generated from field: google.protobuf.Timestamp before_changed_at = 9;
   */
  beforeChangedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp after_changed_at = 10;
   */
  afterChangedAt?: Timestamp;

  constructor(data?: PartialMessage<AccountLifecycleChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "circonus.account.v2.AccountLifecycleChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "change_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "before_account", kind: "message", T: Account },
    { no: 4, name: "after_account", kind: "message", T: Account },
    { no: 5, name: "before_state", kind: "enum", T: proto3.getEnumType(AccountLifecycleState) },
    { no: 6, name: "after_state", kind: "enum", T: proto3.getEnumType(AccountLifecycleState) },
    { no: 7, name: "before_revision_id", kind: "message", T: Int64Value },
    { no: 8, name: "after_revision_id", kind: "message", T: Int64Value },
    { no: 9, name: "before_changed_at", kind: "message", T: Timestamp },
    { no: 10, name: "after_changed_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLifecycleChange {
    return new AccountLifecycleChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLifecycleChange {
    return new AccountLifecycleChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLifecycleChange {
    return new AccountLifecycleChange().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLifecycleChange | PlainMessage<AccountLifecycleChange> | undefined, b: AccountLifecycleChange | PlainMessage<AccountLifecycleChange> | undefined): boolean {
    return proto3.util.equals(AccountLifecycleChange, a, b);
  }
}

/**
 * @generated from message circonus.account.v2.AccountCreateError
 */
export class AccountCreateError extends Message<AccountCreateError> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: google.protobuf.Int64Value revision_id = 3;
   */
  revisionId?: bigint;

  /**
   * @generated from field: circonus.account.v2.Account account = 2;
   */
  account?: Account;

  /**
   * @generated from field: string error = 4;
   */
  error = "";

  /**
   * @generated from field: google.protobuf.Timestamp occured_at = 5;
   */
  occuredAt?: Timestamp;

  constructor(data?: PartialMessage<AccountCreateError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "circonus.account.v2.AccountCreateError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "revision_id", kind: "message", T: Int64Value },
    { no: 2, name: "account", kind: "message", T: Account },
    { no: 4, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "occured_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountCreateError {
    return new AccountCreateError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountCreateError {
    return new AccountCreateError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountCreateError {
    return new AccountCreateError().fromJsonString(jsonString, options);
  }

  static equals(a: AccountCreateError | PlainMessage<AccountCreateError> | undefined, b: AccountCreateError | PlainMessage<AccountCreateError> | undefined): boolean {
    return proto3.util.equals(AccountCreateError, a, b);
  }
}

