// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file circonus/account/v2/service.proto (package circonus.account.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Account, AccountLifecycleChange } from "./account_pb";

/**
 * @generated from message circonus.account.v2.AddAccountRequest
 */
export class AddAccountRequest extends Message<AddAccountRequest> {
  /**
   * @generated from field: circonus.account.v2.Account account = 1;
   */
  account?: Account;

  constructor(data?: PartialMessage<AddAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "circonus.account.v2.AddAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddAccountRequest {
    return new AddAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddAccountRequest {
    return new AddAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddAccountRequest {
    return new AddAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddAccountRequest | PlainMessage<AddAccountRequest> | undefined, b: AddAccountRequest | PlainMessage<AddAccountRequest> | undefined): boolean {
    return proto3.util.equals(AddAccountRequest, a, b);
  }
}

/**
 * @generated from message circonus.account.v2.AddAccountResponse
 */
export class AddAccountResponse extends Message<AddAccountResponse> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<AddAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "circonus.account.v2.AddAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddAccountResponse {
    return new AddAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddAccountResponse {
    return new AddAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddAccountResponse {
    return new AddAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddAccountResponse | PlainMessage<AddAccountResponse> | undefined, b: AddAccountResponse | PlainMessage<AddAccountResponse> | undefined): boolean {
    return proto3.util.equals(AddAccountResponse, a, b);
  }
}

/**
 * @generated from message circonus.account.v2.GetAccountByIDRequest
 */
export class GetAccountByIDRequest extends Message<GetAccountByIDRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<GetAccountByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "circonus.account.v2.GetAccountByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountByIDRequest {
    return new GetAccountByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountByIDRequest {
    return new GetAccountByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountByIDRequest {
    return new GetAccountByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountByIDRequest | PlainMessage<GetAccountByIDRequest> | undefined, b: GetAccountByIDRequest | PlainMessage<GetAccountByIDRequest> | undefined): boolean {
    return proto3.util.equals(GetAccountByIDRequest, a, b);
  }
}

/**
 * @generated from message circonus.account.v2.GetAccountByIDResponse
 */
export class GetAccountByIDResponse extends Message<GetAccountByIDResponse> {
  /**
   * @generated from field: circonus.account.v2.Account account = 1;
   */
  account?: Account;

  constructor(data?: PartialMessage<GetAccountByIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "circonus.account.v2.GetAccountByIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountByIDResponse {
    return new GetAccountByIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountByIDResponse {
    return new GetAccountByIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountByIDResponse {
    return new GetAccountByIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountByIDResponse | PlainMessage<GetAccountByIDResponse> | undefined, b: GetAccountByIDResponse | PlainMessage<GetAccountByIDResponse> | undefined): boolean {
    return proto3.util.equals(GetAccountByIDResponse, a, b);
  }
}

/**
 * @generated from message circonus.account.v2.AccountLifecycleChangeRequest
 */
export class AccountLifecycleChangeRequest extends Message<AccountLifecycleChangeRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: circonus.account.v2.AccountLifecycleChange change = 2;
   */
  change?: AccountLifecycleChange;

  constructor(data?: PartialMessage<AccountLifecycleChangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "circonus.account.v2.AccountLifecycleChangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "change", kind: "message", T: AccountLifecycleChange },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountLifecycleChangeRequest {
    return new AccountLifecycleChangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountLifecycleChangeRequest {
    return new AccountLifecycleChangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountLifecycleChangeRequest {
    return new AccountLifecycleChangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AccountLifecycleChangeRequest | PlainMessage<AccountLifecycleChangeRequest> | undefined, b: AccountLifecycleChangeRequest | PlainMessage<AccountLifecycleChangeRequest> | undefined): boolean {
    return proto3.util.equals(AccountLifecycleChangeRequest, a, b);
  }
}

