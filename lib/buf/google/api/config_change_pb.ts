// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/api/config_change.proto (package google.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Classifies set of possible modifications to an object in the service
 * configuration.
 *
 * @generated from enum google.api.ChangeType
 */
export enum ChangeType {
  /**
   * No value was provided.
   *
   * @generated from enum value: CHANGE_TYPE_UNSPECIFIED = 0;
   */
  CHANGE_TYPE_UNSPECIFIED = 0,

  /**
   * The changed object exists in the 'new' service configuration, but not
   * in the 'old' service configuration.
   *
   * @generated from enum value: ADDED = 1;
   */
  ADDED = 1,

  /**
   * The changed object exists in the 'old' service configuration, but not
   * in the 'new' service configuration.
   *
   * @generated from enum value: REMOVED = 2;
   */
  REMOVED = 2,

  /**
   * The changed object exists in both service configurations, but its value
   * is different.
   *
   * @generated from enum value: MODIFIED = 3;
   */
  MODIFIED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ChangeType)
proto3.util.setEnumType(ChangeType, "google.api.ChangeType", [
  { no: 0, name: "CHANGE_TYPE_UNSPECIFIED" },
  { no: 1, name: "ADDED" },
  { no: 2, name: "REMOVED" },
  { no: 3, name: "MODIFIED" },
]);

/**
 * Output generated from semantically comparing two versions of a service
 * configuration.
 *
 * Includes detailed information about a field that have changed with
 * applicable advice about potential consequences for the change, such as
 * backwards-incompatibility.
 *
 * @generated from message google.api.ConfigChange
 */
export class ConfigChange extends Message<ConfigChange> {
  /**
   * Object hierarchy path to the change, with levels separated by a '.'
   * character. For repeated fields, an applicable unique identifier field is
   * used for the index (usually selector, name, or id). For maps, the term
   * 'key' is used. If the field has no unique identifier, the numeric index
   * is used.
   * Examples:
   * - visibility.rules[selector=="google.LibraryService.CreateBook"].restriction
   * - quota.metric_rules[selector=="google"].metric_costs[key=="reads"].value
   * - logging.producer_destinations[0]
   *
   * @generated from field: string element = 1;
   */
  element = "";

  /**
   * Value of the changed object in the old Service configuration,
   * in JSON format. This field will not be populated if ChangeType == ADDED.
   *
   * @generated from field: string old_value = 2;
   */
  oldValue = "";

  /**
   * Value of the changed object in the new Service configuration,
   * in JSON format. This field will not be populated if ChangeType == REMOVED.
   *
   * @generated from field: string new_value = 3;
   */
  newValue = "";

  /**
   * The type for this change, either ADDED, REMOVED, or MODIFIED.
   *
   * @generated from field: google.api.ChangeType change_type = 4;
   */
  changeType = ChangeType.CHANGE_TYPE_UNSPECIFIED;

  /**
   * Collection of advice provided for this change, useful for determining the
   * possible impact of this change.
   *
   * @generated from field: repeated google.api.Advice advices = 5;
   */
  advices: Advice[] = [];

  constructor(data?: PartialMessage<ConfigChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.ConfigChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "element", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "old_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "change_type", kind: "enum", T: proto3.getEnumType(ChangeType) },
    { no: 5, name: "advices", kind: "message", T: Advice, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigChange {
    return new ConfigChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigChange {
    return new ConfigChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigChange {
    return new ConfigChange().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigChange | PlainMessage<ConfigChange> | undefined, b: ConfigChange | PlainMessage<ConfigChange> | undefined): boolean {
    return proto3.util.equals(ConfigChange, a, b);
  }
}

/**
 * Generated advice about this change, used for providing more
 * information about how a change will affect the existing service.
 *
 * @generated from message google.api.Advice
 */
export class Advice extends Message<Advice> {
  /**
   * Useful description for why this advice was applied and what actions should
   * be taken to mitigate any implied risks.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  constructor(data?: PartialMessage<Advice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.Advice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Advice {
    return new Advice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Advice {
    return new Advice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Advice {
    return new Advice().fromJsonString(jsonString, options);
  }

  static equals(a: Advice | PlainMessage<Advice> | undefined, b: Advice | PlainMessage<Advice> | undefined): boolean {
    return proto3.util.equals(Advice, a, b);
  }
}

