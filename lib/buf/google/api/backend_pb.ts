// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/api/backend.proto (package google.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * `Backend` defines the backend configuration for a service.
 *
 * @generated from message google.api.Backend
 */
export class Backend extends Message<Backend> {
  /**
   * A list of API backend rules that apply to individual API methods.
   *
   * **NOTE:** All service configuration rules follow "last one wins" order.
   *
   * @generated from field: repeated google.api.BackendRule rules = 1;
   */
  rules: BackendRule[] = [];

  constructor(data?: PartialMessage<Backend>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.Backend";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rules", kind: "message", T: BackendRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Backend {
    return new Backend().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Backend {
    return new Backend().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Backend {
    return new Backend().fromJsonString(jsonString, options);
  }

  static equals(a: Backend | PlainMessage<Backend> | undefined, b: Backend | PlainMessage<Backend> | undefined): boolean {
    return proto3.util.equals(Backend, a, b);
  }
}

/**
 * A backend rule provides configuration for an individual API element.
 *
 * @generated from message google.api.BackendRule
 */
export class BackendRule extends Message<BackendRule> {
  /**
   * Selects the methods to which this rule applies.
   *
   * Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
   *
   * @generated from field: string selector = 1;
   */
  selector = "";

  /**
   * The address of the API backend.
   *
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * The number of seconds to wait for a response from a request.  The
   * default depends on the deployment context.
   *
   * @generated from field: double deadline = 3;
   */
  deadline = 0;

  constructor(data?: PartialMessage<BackendRule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.BackendRule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "selector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deadline", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BackendRule {
    return new BackendRule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BackendRule {
    return new BackendRule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BackendRule {
    return new BackendRule().fromJsonString(jsonString, options);
  }

  static equals(a: BackendRule | PlainMessage<BackendRule> | undefined, b: BackendRule | PlainMessage<BackendRule> | undefined): boolean {
    return proto3.util.equals(BackendRule, a, b);
  }
}

