// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/api/consumer.proto (package google.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * A descriptor for defining project properties for a service. One service may
 * have many consumer projects, and the service may want to behave differently
 * depending on some properties on the project. For example, a project may be
 * associated with a school, or a business, or a government agency, a business
 * type property on the project may affect how a service responds to the client.
 * This descriptor defines which properties are allowed to be set on a project.
 *
 * Example:
 *
 *    project_properties:
 *      properties:
 *      - name: NO_WATERMARK
 *        type: BOOL
 *        description: Allows usage of the API without watermarks.
 *      - name: EXTENDED_TILE_CACHE_PERIOD
 *        type: INT64
 *
 * @generated from message google.api.ProjectProperties
 */
export class ProjectProperties extends Message<ProjectProperties> {
  /**
   * List of per consumer project-specific properties.
   *
   * @generated from field: repeated google.api.Property properties = 1;
   */
  properties: Property[] = [];

  constructor(data?: PartialMessage<ProjectProperties>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.ProjectProperties";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "properties", kind: "message", T: Property, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectProperties {
    return new ProjectProperties().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectProperties {
    return new ProjectProperties().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectProperties {
    return new ProjectProperties().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectProperties | PlainMessage<ProjectProperties> | undefined, b: ProjectProperties | PlainMessage<ProjectProperties> | undefined): boolean {
    return proto3.util.equals(ProjectProperties, a, b);
  }
}

/**
 * Defines project properties.
 *
 * API services can define properties that can be assigned to consumer projects
 * so that backends can perform response customization without having to make
 * additional calls or maintain additional storage. For example, Maps API
 * defines properties that controls map tile cache period, or whether to embed a
 * watermark in a result.
 *
 * These values can be set via API producer console. Only API providers can
 * define and set these properties.
 *
 * @generated from message google.api.Property
 */
export class Property extends Message<Property> {
  /**
   * The name of the property (a.k.a key).
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The type of this property.
   *
   * @generated from field: google.api.Property.PropertyType type = 2;
   */
  type = Property_PropertyType.UNSPECIFIED;

  /**
   * The description of the property
   *
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<Property>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.Property";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(Property_PropertyType) },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Property {
    return new Property().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Property {
    return new Property().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Property {
    return new Property().fromJsonString(jsonString, options);
  }

  static equals(a: Property | PlainMessage<Property> | undefined, b: Property | PlainMessage<Property> | undefined): boolean {
    return proto3.util.equals(Property, a, b);
  }
}

/**
 * Supported data type of the property values
 *
 * @generated from enum google.api.Property.PropertyType
 */
export enum Property_PropertyType {
  /**
   * The type is unspecified, and will result in an error.
   *
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The type is `int64`.
   *
   * @generated from enum value: INT64 = 1;
   */
  INT64 = 1,

  /**
   * The type is `bool`.
   *
   * @generated from enum value: BOOL = 2;
   */
  BOOL = 2,

  /**
   * The type is `string`.
   *
   * @generated from enum value: STRING = 3;
   */
  STRING = 3,

  /**
   * The type is 'double'.
   *
   * @generated from enum value: DOUBLE = 4;
   */
  DOUBLE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Property_PropertyType)
proto3.util.setEnumType(Property_PropertyType, "google.api.Property.PropertyType", [
  { no: 0, name: "UNSPECIFIED" },
  { no: 1, name: "INT64" },
  { no: 2, name: "BOOL" },
  { no: 3, name: "STRING" },
  { no: 4, name: "DOUBLE" },
]);

