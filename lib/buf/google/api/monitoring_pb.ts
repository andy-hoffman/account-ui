// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/api/monitoring.proto (package google.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Monitoring configuration of the service.
 *
 * The example below shows how to configure monitored resources and metrics
 * for monitoring. In the example, a monitored resource and two metrics are
 * defined. The `library.googleapis.com/book/returned_count` metric is sent
 * to both producer and consumer projects, whereas the
 * `library.googleapis.com/book/overdue_count` metric is only sent to the
 * consumer project.
 *
 *     monitored_resources:
 *     - type: library.googleapis.com/branch
 *       labels:
 *       - key: /city
 *         description: The city where the library branch is located in.
 *       - key: /name
 *         description: The name of the branch.
 *     metrics:
 *     - name: library.googleapis.com/book/returned_count
 *       metric_kind: DELTA
 *       value_type: INT64
 *       labels:
 *       - key: /customer_id
 *     - name: library.googleapis.com/book/overdue_count
 *       metric_kind: GAUGE
 *       value_type: INT64
 *       labels:
 *       - key: /customer_id
 *     monitoring:
 *       producer_destinations:
 *       - monitored_resource: library.googleapis.com/branch
 *         metrics:
 *         - library.googleapis.com/book/returned_count
 *       consumer_destinations:
 *       - monitored_resource: library.googleapis.com/branch
 *         metrics:
 *         - library.googleapis.com/book/returned_count
 *         - library.googleapis.com/book/overdue_count
 *
 * @generated from message google.api.Monitoring
 */
export class Monitoring extends Message<Monitoring> {
  /**
   * Monitoring configurations for sending metrics to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one producer destination.
   *
   * @generated from field: repeated google.api.Monitoring.MonitoringDestination producer_destinations = 1;
   */
  producerDestinations: Monitoring_MonitoringDestination[] = [];

  /**
   * Monitoring configurations for sending metrics to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one consumer destination.
   *
   * @generated from field: repeated google.api.Monitoring.MonitoringDestination consumer_destinations = 2;
   */
  consumerDestinations: Monitoring_MonitoringDestination[] = [];

  constructor(data?: PartialMessage<Monitoring>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.Monitoring";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "producer_destinations", kind: "message", T: Monitoring_MonitoringDestination, repeated: true },
    { no: 2, name: "consumer_destinations", kind: "message", T: Monitoring_MonitoringDestination, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Monitoring {
    return new Monitoring().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Monitoring {
    return new Monitoring().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Monitoring {
    return new Monitoring().fromJsonString(jsonString, options);
  }

  static equals(a: Monitoring | PlainMessage<Monitoring> | undefined, b: Monitoring | PlainMessage<Monitoring> | undefined): boolean {
    return proto3.util.equals(Monitoring, a, b);
  }
}

/**
 * Configuration of a specific monitoring destination (the producer project
 * or the consumer project).
 *
 * @generated from message google.api.Monitoring.MonitoringDestination
 */
export class Monitoring_MonitoringDestination extends Message<Monitoring_MonitoringDestination> {
  /**
   * The monitored resource type. The type must be defined in
   * [Service.monitored_resources][google.api.Service.monitored_resources] section.
   *
   * @generated from field: string monitored_resource = 1;
   */
  monitoredResource = "";

  /**
   * Names of the metrics to report to this monitoring destination.
   * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
   *
   * @generated from field: repeated string metrics = 2;
   */
  metrics: string[] = [];

  constructor(data?: PartialMessage<Monitoring_MonitoringDestination>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.Monitoring.MonitoringDestination";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "monitored_resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Monitoring_MonitoringDestination {
    return new Monitoring_MonitoringDestination().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Monitoring_MonitoringDestination {
    return new Monitoring_MonitoringDestination().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Monitoring_MonitoringDestination {
    return new Monitoring_MonitoringDestination().fromJsonString(jsonString, options);
  }

  static equals(a: Monitoring_MonitoringDestination | PlainMessage<Monitoring_MonitoringDestination> | undefined, b: Monitoring_MonitoringDestination | PlainMessage<Monitoring_MonitoringDestination> | undefined): boolean {
    return proto3.util.equals(Monitoring_MonitoringDestination, a, b);
  }
}

