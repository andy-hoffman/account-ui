// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/api/servicemanagement/v1/resources.proto (package google.api.servicemanagement.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { ConfigChange } from "../../config_change_pb.js";

/**
 * The full representation of a Service that is managed by
 * Google Service Management.
 *
 * @generated from message google.api.servicemanagement.v1.ManagedService
 */
export class ManagedService extends Message<ManagedService> {
  /**
   * The name of the service. See the [overview](/service-management/overview)
   * for naming requirements.
   *
   * @generated from field: string service_name = 2;
   */
  serviceName = "";

  /**
   * ID of the project that produces and owns this service.
   *
   * @generated from field: string producer_project_id = 3;
   */
  producerProjectId = "";

  constructor(data?: PartialMessage<ManagedService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.ManagedService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "producer_project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ManagedService {
    return new ManagedService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ManagedService {
    return new ManagedService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ManagedService {
    return new ManagedService().fromJsonString(jsonString, options);
  }

  static equals(a: ManagedService | PlainMessage<ManagedService> | undefined, b: ManagedService | PlainMessage<ManagedService> | undefined): boolean {
    return proto3.util.equals(ManagedService, a, b);
  }
}

/**
 * The metadata associated with a long running operation resource.
 *
 * @generated from message google.api.servicemanagement.v1.OperationMetadata
 */
export class OperationMetadata extends Message<OperationMetadata> {
  /**
   * The full name of the resources that this operation is directly
   * associated with.
   *
   * @generated from field: repeated string resource_names = 1;
   */
  resourceNames: string[] = [];

  /**
   * Detailed status information for each step. The order is undetermined.
   *
   * @generated from field: repeated google.api.servicemanagement.v1.OperationMetadata.Step steps = 2;
   */
  steps: OperationMetadata_Step[] = [];

  /**
   * Percentage of completion of this operation, ranging from 0 to 100.
   *
   * @generated from field: int32 progress_percentage = 3;
   */
  progressPercentage = 0;

  /**
   * The start time of the operation.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp;

  constructor(data?: PartialMessage<OperationMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.OperationMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "steps", kind: "message", T: OperationMetadata_Step, repeated: true },
    { no: 3, name: "progress_percentage", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "start_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperationMetadata {
    return new OperationMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperationMetadata {
    return new OperationMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperationMetadata {
    return new OperationMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: OperationMetadata | PlainMessage<OperationMetadata> | undefined, b: OperationMetadata | PlainMessage<OperationMetadata> | undefined): boolean {
    return proto3.util.equals(OperationMetadata, a, b);
  }
}

/**
 * Code describes the status of one operation step.
 *
 * @generated from enum google.api.servicemanagement.v1.OperationMetadata.Status
 */
export enum OperationMetadata_Status {
  /**
   * Unspecifed code.
   *
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  STATUS_UNSPECIFIED = 0,

  /**
   * The step has completed without errors.
   *
   * @generated from enum value: DONE = 1;
   */
  DONE = 1,

  /**
   * The step has not started yet.
   *
   * @generated from enum value: NOT_STARTED = 2;
   */
  NOT_STARTED = 2,

  /**
   * The step is in progress.
   *
   * @generated from enum value: IN_PROGRESS = 3;
   */
  IN_PROGRESS = 3,

  /**
   * The step has completed with errors.
   *
   * @generated from enum value: FAILED = 4;
   */
  FAILED = 4,

  /**
   * The step has completed with cancellation.
   *
   * @generated from enum value: CANCELLED = 5;
   */
  CANCELLED = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(OperationMetadata_Status)
proto3.util.setEnumType(OperationMetadata_Status, "google.api.servicemanagement.v1.OperationMetadata.Status", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "DONE" },
  { no: 2, name: "NOT_STARTED" },
  { no: 3, name: "IN_PROGRESS" },
  { no: 4, name: "FAILED" },
  { no: 5, name: "CANCELLED" },
]);

/**
 * Represents the status of one operation step.
 *
 * @generated from message google.api.servicemanagement.v1.OperationMetadata.Step
 */
export class OperationMetadata_Step extends Message<OperationMetadata_Step> {
  /**
   * The short description of the step.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * The status code.
   *
   * @generated from field: google.api.servicemanagement.v1.OperationMetadata.Status status = 4;
   */
  status = OperationMetadata_Status.STATUS_UNSPECIFIED;

  constructor(data?: PartialMessage<OperationMetadata_Step>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.OperationMetadata.Step";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(OperationMetadata_Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperationMetadata_Step {
    return new OperationMetadata_Step().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperationMetadata_Step {
    return new OperationMetadata_Step().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperationMetadata_Step {
    return new OperationMetadata_Step().fromJsonString(jsonString, options);
  }

  static equals(a: OperationMetadata_Step | PlainMessage<OperationMetadata_Step> | undefined, b: OperationMetadata_Step | PlainMessage<OperationMetadata_Step> | undefined): boolean {
    return proto3.util.equals(OperationMetadata_Step, a, b);
  }
}

/**
 * Represents a diagnostic message (error or warning)
 *
 * @generated from message google.api.servicemanagement.v1.Diagnostic
 */
export class Diagnostic extends Message<Diagnostic> {
  /**
   * File name and line number of the error or warning.
   *
   * @generated from field: string location = 1;
   */
  location = "";

  /**
   * The kind of diagnostic information provided.
   *
   * @generated from field: google.api.servicemanagement.v1.Diagnostic.Kind kind = 2;
   */
  kind = Diagnostic_Kind.WARNING;

  /**
   * Message describing the error or warning.
   *
   * @generated from field: string message = 3;
   */
  message = "";

  constructor(data?: PartialMessage<Diagnostic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.Diagnostic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "enum", T: proto3.getEnumType(Diagnostic_Kind) },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Diagnostic {
    return new Diagnostic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Diagnostic {
    return new Diagnostic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Diagnostic {
    return new Diagnostic().fromJsonString(jsonString, options);
  }

  static equals(a: Diagnostic | PlainMessage<Diagnostic> | undefined, b: Diagnostic | PlainMessage<Diagnostic> | undefined): boolean {
    return proto3.util.equals(Diagnostic, a, b);
  }
}

/**
 * The kind of diagnostic information possible.
 *
 * @generated from enum google.api.servicemanagement.v1.Diagnostic.Kind
 */
export enum Diagnostic_Kind {
  /**
   * Warnings and errors
   *
   * @generated from enum value: WARNING = 0;
   */
  WARNING = 0,

  /**
   * Only errors
   *
   * @generated from enum value: ERROR = 1;
   */
  ERROR = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Diagnostic_Kind)
proto3.util.setEnumType(Diagnostic_Kind, "google.api.servicemanagement.v1.Diagnostic.Kind", [
  { no: 0, name: "WARNING" },
  { no: 1, name: "ERROR" },
]);

/**
 * Represents a source file which is used to generate the service configuration
 * defined by `google.api.Service`.
 *
 * @generated from message google.api.servicemanagement.v1.ConfigSource
 */
export class ConfigSource extends Message<ConfigSource> {
  /**
   * A unique ID for a specific instance of this message, typically assigned
   * by the client for tracking purpose. If empty, the server may choose to
   * generate one instead.
   *
   * @generated from field: string id = 5;
   */
  id = "";

  /**
   * Set of source configuration files that are used to generate a service
   * configuration (`google.api.Service`).
   *
   * @generated from field: repeated google.api.servicemanagement.v1.ConfigFile files = 2;
   */
  files: ConfigFile[] = [];

  constructor(data?: PartialMessage<ConfigSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.ConfigSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "files", kind: "message", T: ConfigFile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigSource {
    return new ConfigSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigSource {
    return new ConfigSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigSource {
    return new ConfigSource().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigSource | PlainMessage<ConfigSource> | undefined, b: ConfigSource | PlainMessage<ConfigSource> | undefined): boolean {
    return proto3.util.equals(ConfigSource, a, b);
  }
}

/**
 * Generic specification of a source configuration file
 *
 * @generated from message google.api.servicemanagement.v1.ConfigFile
 */
export class ConfigFile extends Message<ConfigFile> {
  /**
   * The file name of the configuration file (full or relative path).
   *
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  /**
   * The bytes that constitute the file.
   *
   * @generated from field: bytes file_contents = 3;
   */
  fileContents = new Uint8Array(0);

  /**
   * The type of configuration file this represents.
   *
   * @generated from field: google.api.servicemanagement.v1.ConfigFile.FileType file_type = 4;
   */
  fileType = ConfigFile_FileType.FILE_TYPE_UNSPECIFIED;

  constructor(data?: PartialMessage<ConfigFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.ConfigFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "file_contents", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "file_type", kind: "enum", T: proto3.getEnumType(ConfigFile_FileType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigFile {
    return new ConfigFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigFile {
    return new ConfigFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigFile {
    return new ConfigFile().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigFile | PlainMessage<ConfigFile> | undefined, b: ConfigFile | PlainMessage<ConfigFile> | undefined): boolean {
    return proto3.util.equals(ConfigFile, a, b);
  }
}

/**
 * @generated from enum google.api.servicemanagement.v1.ConfigFile.FileType
 */
export enum ConfigFile_FileType {
  /**
   * Unknown file type.
   *
   * @generated from enum value: FILE_TYPE_UNSPECIFIED = 0;
   */
  FILE_TYPE_UNSPECIFIED = 0,

  /**
   * YAML-specification of service.
   *
   * @generated from enum value: SERVICE_CONFIG_YAML = 1;
   */
  SERVICE_CONFIG_YAML = 1,

  /**
   * OpenAPI specification, serialized in JSON.
   *
   * @generated from enum value: OPEN_API_JSON = 2;
   */
  OPEN_API_JSON = 2,

  /**
   * OpenAPI specification, serialized in YAML.
   *
   * @generated from enum value: OPEN_API_YAML = 3;
   */
  OPEN_API_YAML = 3,

  /**
   * FileDescriptorSet, generated by protoc.
   *
   * To generate, use protoc with imports and source info included.
   * For an example test.proto file, the following command would put the value
   * in a new file named out.pb.
   *
   * $protoc --include_imports --include_source_info test.proto -o out.pb
   *
   * @generated from enum value: FILE_DESCRIPTOR_SET_PROTO = 4;
   */
  FILE_DESCRIPTOR_SET_PROTO = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(ConfigFile_FileType)
proto3.util.setEnumType(ConfigFile_FileType, "google.api.servicemanagement.v1.ConfigFile.FileType", [
  { no: 0, name: "FILE_TYPE_UNSPECIFIED" },
  { no: 1, name: "SERVICE_CONFIG_YAML" },
  { no: 2, name: "OPEN_API_JSON" },
  { no: 3, name: "OPEN_API_YAML" },
  { no: 4, name: "FILE_DESCRIPTOR_SET_PROTO" },
]);

/**
 * Represents a service configuration with its name and id.
 *
 * @generated from message google.api.servicemanagement.v1.ConfigRef
 */
export class ConfigRef extends Message<ConfigRef> {
  /**
   * Resource name of a service config. It must have the following
   * format: "services/{service name}/configs/{config id}".
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<ConfigRef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.ConfigRef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigRef {
    return new ConfigRef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigRef {
    return new ConfigRef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigRef {
    return new ConfigRef().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigRef | PlainMessage<ConfigRef> | undefined, b: ConfigRef | PlainMessage<ConfigRef> | undefined): boolean {
    return proto3.util.equals(ConfigRef, a, b);
  }
}

/**
 * Change report associated with a particular service configuration.
 *
 * It contains a list of ConfigChanges based on the comparison between
 * two service configurations.
 *
 * @generated from message google.api.servicemanagement.v1.ChangeReport
 */
export class ChangeReport extends Message<ChangeReport> {
  /**
   * List of changes between two service configurations.
   * The changes will be alphabetically sorted based on the identifier
   * of each change.
   * A ConfigChange identifier is a dot separated path to the configuration.
   * Example: visibility.rules[selector='LibraryService.CreateBook'].restriction
   *
   * @generated from field: repeated google.api.ConfigChange config_changes = 1;
   */
  configChanges: ConfigChange[] = [];

  constructor(data?: PartialMessage<ChangeReport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.ChangeReport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config_changes", kind: "message", T: ConfigChange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeReport {
    return new ChangeReport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeReport {
    return new ChangeReport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeReport {
    return new ChangeReport().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeReport | PlainMessage<ChangeReport> | undefined, b: ChangeReport | PlainMessage<ChangeReport> | undefined): boolean {
    return proto3.util.equals(ChangeReport, a, b);
  }
}

/**
 * A rollout resource that defines how service configuration versions are pushed
 * to control plane systems. Typically, you create a new version of the
 * service config, and then create a Rollout to push the service config.
 *
 * @generated from message google.api.servicemanagement.v1.Rollout
 */
export class Rollout extends Message<Rollout> {
  /**
   * Optional unique identifier of this Rollout. Only lower case letters, digits
   *  and '-' are allowed.
   *
   * If not specified by client, the server will generate one. The generated id
   * will have the form of <date><revision number>, where "date" is the create
   * date in ISO 8601 format.  "revision number" is a monotonically increasing
   * positive number that is reset every day for each service.
   * An example of the generated rollout_id is '2016-02-16r1'
   *
   * @generated from field: string rollout_id = 1;
   */
  rolloutId = "";

  /**
   * Creation time of the rollout. Readonly.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * The user who created the Rollout. Readonly.
   *
   * @generated from field: string created_by = 3;
   */
  createdBy = "";

  /**
   * The status of this rollout. Readonly. In case of a failed rollout,
   * the system will automatically rollback to the current Rollout
   * version. Readonly.
   *
   * @generated from field: google.api.servicemanagement.v1.Rollout.RolloutStatus status = 4;
   */
  status = Rollout_RolloutStatus.ROLLOUT_STATUS_UNSPECIFIED;

  /**
   * Strategy that defines which versions of service configurations should be
   * pushed
   * and how they should be used at runtime.
   *
   * @generated from oneof google.api.servicemanagement.v1.Rollout.strategy
   */
  strategy: {
    /**
     * Google Service Control selects service configurations based on
     * traffic percentage.
     *
     * @generated from field: google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy traffic_percent_strategy = 5;
     */
    value: Rollout_TrafficPercentStrategy;
    case: "trafficPercentStrategy";
  } | {
    /**
     * The strategy associated with a rollout to delete a `ManagedService`.
     * Readonly.
     *
     * @generated from field: google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy delete_service_strategy = 200;
     */
    value: Rollout_DeleteServiceStrategy;
    case: "deleteServiceStrategy";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * The name of the service associated with this Rollout.
   *
   * @generated from field: string service_name = 8;
   */
  serviceName = "";

  constructor(data?: PartialMessage<Rollout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.Rollout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rollout_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "create_time", kind: "message", T: Timestamp },
    { no: 3, name: "created_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(Rollout_RolloutStatus) },
    { no: 5, name: "traffic_percent_strategy", kind: "message", T: Rollout_TrafficPercentStrategy, oneof: "strategy" },
    { no: 200, name: "delete_service_strategy", kind: "message", T: Rollout_DeleteServiceStrategy, oneof: "strategy" },
    { no: 8, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Rollout {
    return new Rollout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Rollout {
    return new Rollout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Rollout {
    return new Rollout().fromJsonString(jsonString, options);
  }

  static equals(a: Rollout | PlainMessage<Rollout> | undefined, b: Rollout | PlainMessage<Rollout> | undefined): boolean {
    return proto3.util.equals(Rollout, a, b);
  }
}

/**
 * Status of a Rollout.
 *
 * @generated from enum google.api.servicemanagement.v1.Rollout.RolloutStatus
 */
export enum Rollout_RolloutStatus {
  /**
   * No status specified.
   *
   * @generated from enum value: ROLLOUT_STATUS_UNSPECIFIED = 0;
   */
  ROLLOUT_STATUS_UNSPECIFIED = 0,

  /**
   * The Rollout is in progress.
   *
   * @generated from enum value: IN_PROGRESS = 1;
   */
  IN_PROGRESS = 1,

  /**
   * The Rollout has completed successfully.
   *
   * @generated from enum value: SUCCESS = 2;
   */
  SUCCESS = 2,

  /**
   * The Rollout has been cancelled. This can happen if you have overlapping
   * Rollout pushes, and the previous ones will be cancelled.
   *
   * @generated from enum value: CANCELLED = 3;
   */
  CANCELLED = 3,

  /**
   * The Rollout has failed. It is typically caused by configuration errors.
   *
   * @generated from enum value: FAILED = 4;
   */
  FAILED = 4,

  /**
   * The Rollout has not started yet and is pending for execution.
   *
   * @generated from enum value: PENDING = 5;
   */
  PENDING = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(Rollout_RolloutStatus)
proto3.util.setEnumType(Rollout_RolloutStatus, "google.api.servicemanagement.v1.Rollout.RolloutStatus", [
  { no: 0, name: "ROLLOUT_STATUS_UNSPECIFIED" },
  { no: 1, name: "IN_PROGRESS" },
  { no: 2, name: "SUCCESS" },
  { no: 3, name: "CANCELLED" },
  { no: 4, name: "FAILED" },
  { no: 5, name: "PENDING" },
]);

/**
 * Strategy that specifies how Google Service Control should select
 * different
 * versions of service configurations based on traffic percentage.
 *
 * One example of how to gradually rollout a new service configuration using
 * this
 * strategy:
 * Day 1
 *
 *     Rollout {
 *       id: "example.googleapis.com/rollout_20160206"
 *       traffic_percent_strategy {
 *         percentages: {
 *           "example.googleapis.com/20160201": 70.00
 *           "example.googleapis.com/20160206": 30.00
 *         }
 *       }
 *     }
 *
 * Day 2
 *
 *     Rollout {
 *       id: "example.googleapis.com/rollout_20160207"
 *       traffic_percent_strategy: {
 *         percentages: {
 *           "example.googleapis.com/20160206": 100.00
 *         }
 *       }
 *     }
 *
 * @generated from message google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy
 */
export class Rollout_TrafficPercentStrategy extends Message<Rollout_TrafficPercentStrategy> {
  /**
   * Maps service configuration IDs to their corresponding traffic percentage.
   * Key is the service configuration ID, Value is the traffic percentage
   * which must be greater than 0.0 and the sum must equal to 100.0.
   *
   * @generated from field: map<string, double> percentages = 1;
   */
  percentages: { [key: string]: number } = {};

  constructor(data?: PartialMessage<Rollout_TrafficPercentStrategy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.Rollout.TrafficPercentStrategy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "percentages", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 1 /* ScalarType.DOUBLE */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Rollout_TrafficPercentStrategy {
    return new Rollout_TrafficPercentStrategy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Rollout_TrafficPercentStrategy {
    return new Rollout_TrafficPercentStrategy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Rollout_TrafficPercentStrategy {
    return new Rollout_TrafficPercentStrategy().fromJsonString(jsonString, options);
  }

  static equals(a: Rollout_TrafficPercentStrategy | PlainMessage<Rollout_TrafficPercentStrategy> | undefined, b: Rollout_TrafficPercentStrategy | PlainMessage<Rollout_TrafficPercentStrategy> | undefined): boolean {
    return proto3.util.equals(Rollout_TrafficPercentStrategy, a, b);
  }
}

/**
 * Strategy used to delete a service. This strategy is a placeholder only
 * used by the system generated rollout to delete a service.
 *
 * @generated from message google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy
 */
export class Rollout_DeleteServiceStrategy extends Message<Rollout_DeleteServiceStrategy> {
  constructor(data?: PartialMessage<Rollout_DeleteServiceStrategy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.Rollout.DeleteServiceStrategy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Rollout_DeleteServiceStrategy {
    return new Rollout_DeleteServiceStrategy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Rollout_DeleteServiceStrategy {
    return new Rollout_DeleteServiceStrategy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Rollout_DeleteServiceStrategy {
    return new Rollout_DeleteServiceStrategy().fromJsonString(jsonString, options);
  }

  static equals(a: Rollout_DeleteServiceStrategy | PlainMessage<Rollout_DeleteServiceStrategy> | undefined, b: Rollout_DeleteServiceStrategy | PlainMessage<Rollout_DeleteServiceStrategy> | undefined): boolean {
    return proto3.util.equals(Rollout_DeleteServiceStrategy, a, b);
  }
}

