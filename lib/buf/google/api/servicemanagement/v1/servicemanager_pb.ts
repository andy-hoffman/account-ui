// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/api/servicemanagement/v1/servicemanager.proto (package google.api.servicemanagement.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { ChangeReport, ConfigSource, Diagnostic, ManagedService, Rollout } from "./resources_pb.js";
import { Service } from "../../service_pb.js";

/**
 * Request message for `ListServices` method.
 *
 * @generated from message google.api.servicemanagement.v1.ListServicesRequest
 */
export class ListServicesRequest extends Message<ListServicesRequest> {
  /**
   * Include services produced by the specified project.
   *
   * @generated from field: string producer_project_id = 1;
   */
  producerProjectId = "";

  /**
   * Requested size of the next page of data.
   *
   * @generated from field: int32 page_size = 5;
   */
  pageSize = 0;

  /**
   * Token identifying which result to start with; returned by a previous list
   * call.
   *
   * @generated from field: string page_token = 6;
   */
  pageToken = "";

  /**
   * Include services consumed by the specified consumer.
   *
   * The Google Service Management implementation accepts the following
   * forms:
   * - project:<project_id>
   *
   * @generated from field: string consumer_id = 7;
   */
  consumerId = "";

  constructor(data?: PartialMessage<ListServicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.ListServicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "producer_project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "consumer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServicesRequest {
    return new ListServicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServicesRequest {
    return new ListServicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServicesRequest {
    return new ListServicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListServicesRequest | PlainMessage<ListServicesRequest> | undefined, b: ListServicesRequest | PlainMessage<ListServicesRequest> | undefined): boolean {
    return proto3.util.equals(ListServicesRequest, a, b);
  }
}

/**
 * Response message for `ListServices` method.
 *
 * @generated from message google.api.servicemanagement.v1.ListServicesResponse
 */
export class ListServicesResponse extends Message<ListServicesResponse> {
  /**
   * The returned services will only have the name field set.
   *
   * @generated from field: repeated google.api.servicemanagement.v1.ManagedService services = 1;
   */
  services: ManagedService[] = [];

  /**
   * Token that can be passed to `ListServices` to resume a paginated query.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListServicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.ListServicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: ManagedService, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServicesResponse {
    return new ListServicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServicesResponse {
    return new ListServicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServicesResponse {
    return new ListServicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListServicesResponse | PlainMessage<ListServicesResponse> | undefined, b: ListServicesResponse | PlainMessage<ListServicesResponse> | undefined): boolean {
    return proto3.util.equals(ListServicesResponse, a, b);
  }
}

/**
 * Request message for `GetService` method.
 *
 * @generated from message google.api.servicemanagement.v1.GetServiceRequest
 */
export class GetServiceRequest extends Message<GetServiceRequest> {
  /**
   * The name of the service.  See the `ServiceManager` overview for naming
   * requirements.  For example: `example.googleapis.com`.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  constructor(data?: PartialMessage<GetServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.GetServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetServiceRequest {
    return new GetServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetServiceRequest {
    return new GetServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetServiceRequest {
    return new GetServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetServiceRequest | PlainMessage<GetServiceRequest> | undefined, b: GetServiceRequest | PlainMessage<GetServiceRequest> | undefined): boolean {
    return proto3.util.equals(GetServiceRequest, a, b);
  }
}

/**
 * Request message for CreateService method.
 *
 * @generated from message google.api.servicemanagement.v1.CreateServiceRequest
 */
export class CreateServiceRequest extends Message<CreateServiceRequest> {
  /**
   * Initial values for the service resource.
   *
   * @generated from field: google.api.servicemanagement.v1.ManagedService service = 1;
   */
  service?: ManagedService;

  constructor(data?: PartialMessage<CreateServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.CreateServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "message", T: ManagedService },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateServiceRequest {
    return new CreateServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateServiceRequest {
    return new CreateServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateServiceRequest {
    return new CreateServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateServiceRequest | PlainMessage<CreateServiceRequest> | undefined, b: CreateServiceRequest | PlainMessage<CreateServiceRequest> | undefined): boolean {
    return proto3.util.equals(CreateServiceRequest, a, b);
  }
}

/**
 * Request message for DeleteService method.
 *
 * @generated from message google.api.servicemanagement.v1.DeleteServiceRequest
 */
export class DeleteServiceRequest extends Message<DeleteServiceRequest> {
  /**
   * The name of the service.  See the [overview](/service-management/overview)
   * for naming requirements.  For example: `example.googleapis.com`.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  constructor(data?: PartialMessage<DeleteServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.DeleteServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteServiceRequest {
    return new DeleteServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteServiceRequest {
    return new DeleteServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteServiceRequest {
    return new DeleteServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteServiceRequest | PlainMessage<DeleteServiceRequest> | undefined, b: DeleteServiceRequest | PlainMessage<DeleteServiceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteServiceRequest, a, b);
  }
}

/**
 * Request message for UndeleteService method.
 *
 * @generated from message google.api.servicemanagement.v1.UndeleteServiceRequest
 */
export class UndeleteServiceRequest extends Message<UndeleteServiceRequest> {
  /**
   * The name of the service. See the [overview](/service-management/overview)
   * for naming requirements. For example: `example.googleapis.com`.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  constructor(data?: PartialMessage<UndeleteServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.UndeleteServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndeleteServiceRequest {
    return new UndeleteServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndeleteServiceRequest {
    return new UndeleteServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndeleteServiceRequest {
    return new UndeleteServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UndeleteServiceRequest | PlainMessage<UndeleteServiceRequest> | undefined, b: UndeleteServiceRequest | PlainMessage<UndeleteServiceRequest> | undefined): boolean {
    return proto3.util.equals(UndeleteServiceRequest, a, b);
  }
}

/**
 * Response message for UndeleteService method.
 *
 * @generated from message google.api.servicemanagement.v1.UndeleteServiceResponse
 */
export class UndeleteServiceResponse extends Message<UndeleteServiceResponse> {
  /**
   * Revived service resource.
   *
   * @generated from field: google.api.servicemanagement.v1.ManagedService service = 1;
   */
  service?: ManagedService;

  constructor(data?: PartialMessage<UndeleteServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.UndeleteServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "message", T: ManagedService },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndeleteServiceResponse {
    return new UndeleteServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndeleteServiceResponse {
    return new UndeleteServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndeleteServiceResponse {
    return new UndeleteServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UndeleteServiceResponse | PlainMessage<UndeleteServiceResponse> | undefined, b: UndeleteServiceResponse | PlainMessage<UndeleteServiceResponse> | undefined): boolean {
    return proto3.util.equals(UndeleteServiceResponse, a, b);
  }
}

/**
 * Request message for GetServiceConfig method.
 *
 * @generated from message google.api.servicemanagement.v1.GetServiceConfigRequest
 */
export class GetServiceConfigRequest extends Message<GetServiceConfigRequest> {
  /**
   * The name of the service.  See the [overview](/service-management/overview)
   * for naming requirements.  For example: `example.googleapis.com`.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * The id of the service configuration resource.
   *
   * @generated from field: string config_id = 2;
   */
  configId = "";

  /**
   * Specifies which parts of the Service Config should be returned in the
   * response.
   *
   * @generated from field: google.api.servicemanagement.v1.GetServiceConfigRequest.ConfigView view = 3;
   */
  view = GetServiceConfigRequest_ConfigView.BASIC;

  constructor(data?: PartialMessage<GetServiceConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.GetServiceConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "view", kind: "enum", T: proto3.getEnumType(GetServiceConfigRequest_ConfigView) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetServiceConfigRequest {
    return new GetServiceConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetServiceConfigRequest {
    return new GetServiceConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetServiceConfigRequest {
    return new GetServiceConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetServiceConfigRequest | PlainMessage<GetServiceConfigRequest> | undefined, b: GetServiceConfigRequest | PlainMessage<GetServiceConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetServiceConfigRequest, a, b);
  }
}

/**
 * @generated from enum google.api.servicemanagement.v1.GetServiceConfigRequest.ConfigView
 */
export enum GetServiceConfigRequest_ConfigView {
  /**
   * Server response includes all fields except SourceInfo.
   *
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * Server response includes all fields including SourceInfo.
   * SourceFiles are of type 'google.api.servicemanagement.v1.ConfigFile'
   * and are only available for configs created using the
   * SubmitConfigSource method.
   *
   * @generated from enum value: FULL = 1;
   */
  FULL = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(GetServiceConfigRequest_ConfigView)
proto3.util.setEnumType(GetServiceConfigRequest_ConfigView, "google.api.servicemanagement.v1.GetServiceConfigRequest.ConfigView", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "FULL" },
]);

/**
 * Request message for ListServiceConfigs method.
 *
 * @generated from message google.api.servicemanagement.v1.ListServiceConfigsRequest
 */
export class ListServiceConfigsRequest extends Message<ListServiceConfigsRequest> {
  /**
   * The name of the service.  See the [overview](/service-management/overview)
   * for naming requirements.  For example: `example.googleapis.com`.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * The token of the page to retrieve.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * The max number of items to include in the response list.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<ListServiceConfigsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.ListServiceConfigsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServiceConfigsRequest {
    return new ListServiceConfigsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServiceConfigsRequest {
    return new ListServiceConfigsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServiceConfigsRequest {
    return new ListServiceConfigsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListServiceConfigsRequest | PlainMessage<ListServiceConfigsRequest> | undefined, b: ListServiceConfigsRequest | PlainMessage<ListServiceConfigsRequest> | undefined): boolean {
    return proto3.util.equals(ListServiceConfigsRequest, a, b);
  }
}

/**
 * Response message for ListServiceConfigs method.
 *
 * @generated from message google.api.servicemanagement.v1.ListServiceConfigsResponse
 */
export class ListServiceConfigsResponse extends Message<ListServiceConfigsResponse> {
  /**
   * The list of service configuration resources.
   *
   * @generated from field: repeated google.api.Service service_configs = 1;
   */
  serviceConfigs: Service[] = [];

  /**
   * The token of the next page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListServiceConfigsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.ListServiceConfigsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_configs", kind: "message", T: Service, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServiceConfigsResponse {
    return new ListServiceConfigsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServiceConfigsResponse {
    return new ListServiceConfigsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServiceConfigsResponse {
    return new ListServiceConfigsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListServiceConfigsResponse | PlainMessage<ListServiceConfigsResponse> | undefined, b: ListServiceConfigsResponse | PlainMessage<ListServiceConfigsResponse> | undefined): boolean {
    return proto3.util.equals(ListServiceConfigsResponse, a, b);
  }
}

/**
 * Request message for CreateServiceConfig method.
 *
 * @generated from message google.api.servicemanagement.v1.CreateServiceConfigRequest
 */
export class CreateServiceConfigRequest extends Message<CreateServiceConfigRequest> {
  /**
   * The name of the service.  See the [overview](/service-management/overview)
   * for naming requirements.  For example: `example.googleapis.com`.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * The service configuration resource.
   *
   * @generated from field: google.api.Service service_config = 2;
   */
  serviceConfig?: Service;

  constructor(data?: PartialMessage<CreateServiceConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.CreateServiceConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_config", kind: "message", T: Service },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateServiceConfigRequest {
    return new CreateServiceConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateServiceConfigRequest {
    return new CreateServiceConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateServiceConfigRequest {
    return new CreateServiceConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateServiceConfigRequest | PlainMessage<CreateServiceConfigRequest> | undefined, b: CreateServiceConfigRequest | PlainMessage<CreateServiceConfigRequest> | undefined): boolean {
    return proto3.util.equals(CreateServiceConfigRequest, a, b);
  }
}

/**
 * Request message for SubmitConfigSource method.
 *
 * @generated from message google.api.servicemanagement.v1.SubmitConfigSourceRequest
 */
export class SubmitConfigSourceRequest extends Message<SubmitConfigSourceRequest> {
  /**
   * The name of the service.  See the [overview](/service-management/overview)
   * for naming requirements.  For example: `example.googleapis.com`.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * The source configuration for the service.
   *
   * @generated from field: google.api.servicemanagement.v1.ConfigSource config_source = 2;
   */
  configSource?: ConfigSource;

  /**
   * Optional. If set, this will result in the generation of a
   * `google.api.Service` configuration based on the `ConfigSource` provided,
   * but the generated config and the sources will NOT be persisted.
   *
   * @generated from field: bool validate_only = 3;
   */
  validateOnly = false;

  constructor(data?: PartialMessage<SubmitConfigSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.SubmitConfigSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config_source", kind: "message", T: ConfigSource },
    { no: 3, name: "validate_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitConfigSourceRequest {
    return new SubmitConfigSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitConfigSourceRequest {
    return new SubmitConfigSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitConfigSourceRequest {
    return new SubmitConfigSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitConfigSourceRequest | PlainMessage<SubmitConfigSourceRequest> | undefined, b: SubmitConfigSourceRequest | PlainMessage<SubmitConfigSourceRequest> | undefined): boolean {
    return proto3.util.equals(SubmitConfigSourceRequest, a, b);
  }
}

/**
 * Response message for SubmitConfigSource method.
 *
 * @generated from message google.api.servicemanagement.v1.SubmitConfigSourceResponse
 */
export class SubmitConfigSourceResponse extends Message<SubmitConfigSourceResponse> {
  /**
   * The generated service configuration.
   *
   * @generated from field: google.api.Service service_config = 1;
   */
  serviceConfig?: Service;

  constructor(data?: PartialMessage<SubmitConfigSourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.SubmitConfigSourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_config", kind: "message", T: Service },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitConfigSourceResponse {
    return new SubmitConfigSourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitConfigSourceResponse {
    return new SubmitConfigSourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitConfigSourceResponse {
    return new SubmitConfigSourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitConfigSourceResponse | PlainMessage<SubmitConfigSourceResponse> | undefined, b: SubmitConfigSourceResponse | PlainMessage<SubmitConfigSourceResponse> | undefined): boolean {
    return proto3.util.equals(SubmitConfigSourceResponse, a, b);
  }
}

/**
 * Request message for 'CreateServiceRollout'
 *
 * @generated from message google.api.servicemanagement.v1.CreateServiceRolloutRequest
 */
export class CreateServiceRolloutRequest extends Message<CreateServiceRolloutRequest> {
  /**
   * The name of the service.  See the [overview](/service-management/overview)
   * for naming requirements.  For example: `example.googleapis.com`.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * The rollout resource. The `service_name` field is output only.
   *
   * @generated from field: google.api.servicemanagement.v1.Rollout rollout = 2;
   */
  rollout?: Rollout;

  constructor(data?: PartialMessage<CreateServiceRolloutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.CreateServiceRolloutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout", kind: "message", T: Rollout },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateServiceRolloutRequest {
    return new CreateServiceRolloutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateServiceRolloutRequest {
    return new CreateServiceRolloutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateServiceRolloutRequest {
    return new CreateServiceRolloutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateServiceRolloutRequest | PlainMessage<CreateServiceRolloutRequest> | undefined, b: CreateServiceRolloutRequest | PlainMessage<CreateServiceRolloutRequest> | undefined): boolean {
    return proto3.util.equals(CreateServiceRolloutRequest, a, b);
  }
}

/**
 * Request message for 'ListServiceRollouts'
 *
 * @generated from message google.api.servicemanagement.v1.ListServiceRolloutsRequest
 */
export class ListServiceRolloutsRequest extends Message<ListServiceRolloutsRequest> {
  /**
   * The name of the service.  See the [overview](/service-management/overview)
   * for naming requirements.  For example: `example.googleapis.com`.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * The token of the page to retrieve.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * The max number of items to include in the response list.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  /**
   * Use `filter` to return subset of rollouts.
   * The following filters are supported:
   *   -- To limit the results to only those in
   *      [status](google.api.servicemanagement.v1.RolloutStatus) 'SUCCESS',
   *      use filter='status=SUCCESS'
   *   -- To limit the results to those in
   *      [status](google.api.servicemanagement.v1.RolloutStatus) 'CANCELLED'
   *      or 'FAILED', use filter='status=CANCELLED OR status=FAILED'
   *
   * @generated from field: string filter = 4;
   */
  filter = "";

  constructor(data?: PartialMessage<ListServiceRolloutsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.ListServiceRolloutsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServiceRolloutsRequest {
    return new ListServiceRolloutsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServiceRolloutsRequest {
    return new ListServiceRolloutsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServiceRolloutsRequest {
    return new ListServiceRolloutsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListServiceRolloutsRequest | PlainMessage<ListServiceRolloutsRequest> | undefined, b: ListServiceRolloutsRequest | PlainMessage<ListServiceRolloutsRequest> | undefined): boolean {
    return proto3.util.equals(ListServiceRolloutsRequest, a, b);
  }
}

/**
 * Response message for ListServiceRollouts method.
 *
 * @generated from message google.api.servicemanagement.v1.ListServiceRolloutsResponse
 */
export class ListServiceRolloutsResponse extends Message<ListServiceRolloutsResponse> {
  /**
   * The list of rollout resources.
   *
   * @generated from field: repeated google.api.servicemanagement.v1.Rollout rollouts = 1;
   */
  rollouts: Rollout[] = [];

  /**
   * The token of the next page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListServiceRolloutsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.ListServiceRolloutsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rollouts", kind: "message", T: Rollout, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServiceRolloutsResponse {
    return new ListServiceRolloutsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServiceRolloutsResponse {
    return new ListServiceRolloutsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServiceRolloutsResponse {
    return new ListServiceRolloutsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListServiceRolloutsResponse | PlainMessage<ListServiceRolloutsResponse> | undefined, b: ListServiceRolloutsResponse | PlainMessage<ListServiceRolloutsResponse> | undefined): boolean {
    return proto3.util.equals(ListServiceRolloutsResponse, a, b);
  }
}

/**
 * Request message for GetServiceRollout method.
 *
 * @generated from message google.api.servicemanagement.v1.GetServiceRolloutRequest
 */
export class GetServiceRolloutRequest extends Message<GetServiceRolloutRequest> {
  /**
   * The name of the service.  See the [overview](/service-management/overview)
   * for naming requirements.  For example: `example.googleapis.com`.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * The id of the rollout resource.
   *
   * @generated from field: string rollout_id = 2;
   */
  rolloutId = "";

  constructor(data?: PartialMessage<GetServiceRolloutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.GetServiceRolloutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rollout_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetServiceRolloutRequest {
    return new GetServiceRolloutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetServiceRolloutRequest {
    return new GetServiceRolloutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetServiceRolloutRequest {
    return new GetServiceRolloutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetServiceRolloutRequest | PlainMessage<GetServiceRolloutRequest> | undefined, b: GetServiceRolloutRequest | PlainMessage<GetServiceRolloutRequest> | undefined): boolean {
    return proto3.util.equals(GetServiceRolloutRequest, a, b);
  }
}

/**
 * Request message for EnableService method.
 *
 * @generated from message google.api.servicemanagement.v1.EnableServiceRequest
 */
export class EnableServiceRequest extends Message<EnableServiceRequest> {
  /**
   * Name of the service to enable. Specifying an unknown service name will
   * cause the request to fail.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * The identity of consumer resource which service enablement will be
   * applied to.
   *
   * The Google Service Management implementation accepts the following
   * forms:
   * - "project:<project_id>"
   *
   * Note: this is made compatible with
   * google.api.servicecontrol.v1.Operation.consumer_id.
   *
   * @generated from field: string consumer_id = 2;
   */
  consumerId = "";

  constructor(data?: PartialMessage<EnableServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.EnableServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "consumer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnableServiceRequest {
    return new EnableServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnableServiceRequest {
    return new EnableServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnableServiceRequest {
    return new EnableServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EnableServiceRequest | PlainMessage<EnableServiceRequest> | undefined, b: EnableServiceRequest | PlainMessage<EnableServiceRequest> | undefined): boolean {
    return proto3.util.equals(EnableServiceRequest, a, b);
  }
}

/**
 * Request message for DisableService method.
 *
 * @generated from message google.api.servicemanagement.v1.DisableServiceRequest
 */
export class DisableServiceRequest extends Message<DisableServiceRequest> {
  /**
   * Name of the service to disable. Specifying an unknown service name
   * will cause the request to fail.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * The identity of consumer resource which service disablement will be
   * applied to.
   *
   * The Google Service Management implementation accepts the following
   * forms:
   * - "project:<project_id>"
   *
   * Note: this is made compatible with
   * google.api.servicecontrol.v1.Operation.consumer_id.
   *
   * @generated from field: string consumer_id = 2;
   */
  consumerId = "";

  constructor(data?: PartialMessage<DisableServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.DisableServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "consumer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisableServiceRequest {
    return new DisableServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisableServiceRequest {
    return new DisableServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisableServiceRequest {
    return new DisableServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DisableServiceRequest | PlainMessage<DisableServiceRequest> | undefined, b: DisableServiceRequest | PlainMessage<DisableServiceRequest> | undefined): boolean {
    return proto3.util.equals(DisableServiceRequest, a, b);
  }
}

/**
 * Request message for GenerateConfigReport method.
 *
 * @generated from message google.api.servicemanagement.v1.GenerateConfigReportRequest
 */
export class GenerateConfigReportRequest extends Message<GenerateConfigReportRequest> {
  /**
   * Service configuration for which we want to generate the report.
   * For this version of API, the supported types are
   * [google.api.servicemanagement.v1.ConfigRef][google.api.servicemanagement.v1.ConfigRef],
   * [google.api.servicemanagement.v1.ConfigSource][google.api.servicemanagement.v1.ConfigSource],
   * and [google.api.Service][google.api.Service]
   *
   * @generated from field: google.protobuf.Any new_config = 1;
   */
  newConfig?: Any;

  /**
   * Service configuration against which the comparison will be done.
   * For this version of API, the supported types are
   * [google.api.servicemanagement.v1.ConfigRef][google.api.servicemanagement.v1.ConfigRef],
   * [google.api.servicemanagement.v1.ConfigSource][google.api.servicemanagement.v1.ConfigSource],
   * and [google.api.Service][google.api.Service]
   *
   * @generated from field: google.protobuf.Any old_config = 2;
   */
  oldConfig?: Any;

  constructor(data?: PartialMessage<GenerateConfigReportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.GenerateConfigReportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_config", kind: "message", T: Any },
    { no: 2, name: "old_config", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateConfigReportRequest {
    return new GenerateConfigReportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateConfigReportRequest {
    return new GenerateConfigReportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateConfigReportRequest {
    return new GenerateConfigReportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateConfigReportRequest | PlainMessage<GenerateConfigReportRequest> | undefined, b: GenerateConfigReportRequest | PlainMessage<GenerateConfigReportRequest> | undefined): boolean {
    return proto3.util.equals(GenerateConfigReportRequest, a, b);
  }
}

/**
 * Response message for GenerateConfigReport method.
 *
 * @generated from message google.api.servicemanagement.v1.GenerateConfigReportResponse
 */
export class GenerateConfigReportResponse extends Message<GenerateConfigReportResponse> {
  /**
   * Name of the service this report belongs to.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * ID of the service configuration this report belongs to.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * list of ChangeReport, each corresponding to comparison between two
   * service configurations.
   *
   * @generated from field: repeated google.api.servicemanagement.v1.ChangeReport change_reports = 3;
   */
  changeReports: ChangeReport[] = [];

  /**
   * Errors / Linter warnings associated with the service definition this
   * report
   * belongs to.
   *
   * @generated from field: repeated google.api.servicemanagement.v1.Diagnostic diagnostics = 4;
   */
  diagnostics: Diagnostic[] = [];

  constructor(data?: PartialMessage<GenerateConfigReportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicemanagement.v1.GenerateConfigReportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "change_reports", kind: "message", T: ChangeReport, repeated: true },
    { no: 4, name: "diagnostics", kind: "message", T: Diagnostic, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateConfigReportResponse {
    return new GenerateConfigReportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateConfigReportResponse {
    return new GenerateConfigReportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateConfigReportResponse {
    return new GenerateConfigReportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateConfigReportResponse | PlainMessage<GenerateConfigReportResponse> | undefined, b: GenerateConfigReportResponse | PlainMessage<GenerateConfigReportResponse> | undefined): boolean {
    return proto3.util.equals(GenerateConfigReportResponse, a, b);
  }
}

