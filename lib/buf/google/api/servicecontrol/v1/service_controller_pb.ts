// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/api/servicecontrol/v1/service_controller.proto (package google.api.servicecontrol.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Operation } from "./operation_pb.js";
import { CheckError } from "./check_error_pb.js";
import { Status } from "../../../rpc/status_pb.js";

/**
 * Request message for the Check method.
 *
 * @generated from message google.api.servicecontrol.v1.CheckRequest
 */
export class CheckRequest extends Message<CheckRequest> {
  /**
   * The service name as specified in its service configuration. For example,
   * `"pubsub.googleapis.com"`.
   *
   * See
   * [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
   * for the definition of a service name.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * The operation to be checked.
   *
   * @generated from field: google.api.servicecontrol.v1.Operation operation = 2;
   */
  operation?: Operation;

  /**
   * Specifies which version of service configuration should be used to process
   * the request.
   *
   * If unspecified or no matching version can be found, the
   * latest one will be used.
   *
   * @generated from field: string service_config_id = 4;
   */
  serviceConfigId = "";

  constructor(data?: PartialMessage<CheckRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicecontrol.v1.CheckRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operation", kind: "message", T: Operation },
    { no: 4, name: "service_config_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckRequest {
    return new CheckRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckRequest {
    return new CheckRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckRequest {
    return new CheckRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckRequest | PlainMessage<CheckRequest> | undefined, b: CheckRequest | PlainMessage<CheckRequest> | undefined): boolean {
    return proto3.util.equals(CheckRequest, a, b);
  }
}

/**
 * Response message for the Check method.
 *
 * @generated from message google.api.servicecontrol.v1.CheckResponse
 */
export class CheckResponse extends Message<CheckResponse> {
  /**
   * The same operation_id value used in the [CheckRequest][google.api.servicecontrol.v1.CheckRequest].
   * Used for logging and diagnostics purposes.
   *
   * @generated from field: string operation_id = 1;
   */
  operationId = "";

  /**
   * Indicate the decision of the check.
   *
   * If no check errors are present, the service should process the operation.
   * Otherwise the service should use the list of errors to determine the
   * appropriate action.
   *
   * @generated from field: repeated google.api.servicecontrol.v1.CheckError check_errors = 2;
   */
  checkErrors: CheckError[] = [];

  /**
   * The actual config id used to process the request.
   *
   * @generated from field: string service_config_id = 5;
   */
  serviceConfigId = "";

  /**
   * Feedback data returned from the server during processing a Check request.
   *
   * @generated from field: google.api.servicecontrol.v1.CheckResponse.CheckInfo check_info = 6;
   */
  checkInfo?: CheckResponse_CheckInfo;

  constructor(data?: PartialMessage<CheckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicecontrol.v1.CheckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "check_errors", kind: "message", T: CheckError, repeated: true },
    { no: 5, name: "service_config_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "check_info", kind: "message", T: CheckResponse_CheckInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckResponse {
    return new CheckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckResponse {
    return new CheckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckResponse {
    return new CheckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckResponse | PlainMessage<CheckResponse> | undefined, b: CheckResponse | PlainMessage<CheckResponse> | undefined): boolean {
    return proto3.util.equals(CheckResponse, a, b);
  }
}

/**
 * @generated from message google.api.servicecontrol.v1.CheckResponse.CheckInfo
 */
export class CheckResponse_CheckInfo extends Message<CheckResponse_CheckInfo> {
  /**
   * Consumer info of this check.
   *
   * @generated from field: google.api.servicecontrol.v1.CheckResponse.ConsumerInfo consumer_info = 2;
   */
  consumerInfo?: CheckResponse_ConsumerInfo;

  constructor(data?: PartialMessage<CheckResponse_CheckInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicecontrol.v1.CheckResponse.CheckInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "consumer_info", kind: "message", T: CheckResponse_ConsumerInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckResponse_CheckInfo {
    return new CheckResponse_CheckInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckResponse_CheckInfo {
    return new CheckResponse_CheckInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckResponse_CheckInfo {
    return new CheckResponse_CheckInfo().fromJsonString(jsonString, options);
  }

  static equals(a: CheckResponse_CheckInfo | PlainMessage<CheckResponse_CheckInfo> | undefined, b: CheckResponse_CheckInfo | PlainMessage<CheckResponse_CheckInfo> | undefined): boolean {
    return proto3.util.equals(CheckResponse_CheckInfo, a, b);
  }
}

/**
 * `ConsumerInfo` provides information about the consumer project.
 *
 * @generated from message google.api.servicecontrol.v1.CheckResponse.ConsumerInfo
 */
export class CheckResponse_ConsumerInfo extends Message<CheckResponse_ConsumerInfo> {
  /**
   * The Google cloud project number, e.g. 1234567890. A value of 0 indicates
   * no project number is found.
   *
   * @generated from field: int64 project_number = 1;
   */
  projectNumber = protoInt64.zero;

  constructor(data?: PartialMessage<CheckResponse_ConsumerInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicecontrol.v1.CheckResponse.ConsumerInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckResponse_ConsumerInfo {
    return new CheckResponse_ConsumerInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckResponse_ConsumerInfo {
    return new CheckResponse_ConsumerInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckResponse_ConsumerInfo {
    return new CheckResponse_ConsumerInfo().fromJsonString(jsonString, options);
  }

  static equals(a: CheckResponse_ConsumerInfo | PlainMessage<CheckResponse_ConsumerInfo> | undefined, b: CheckResponse_ConsumerInfo | PlainMessage<CheckResponse_ConsumerInfo> | undefined): boolean {
    return proto3.util.equals(CheckResponse_ConsumerInfo, a, b);
  }
}

/**
 * Request message for the Report method.
 *
 * @generated from message google.api.servicecontrol.v1.ReportRequest
 */
export class ReportRequest extends Message<ReportRequest> {
  /**
   * The service name as specified in its service configuration. For example,
   * `"pubsub.googleapis.com"`.
   *
   * See
   * [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
   * for the definition of a service name.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * Operations to be reported.
   *
   * Typically the service should report one operation per request.
   * Putting multiple operations into a single request is allowed, but should
   * be used only when multiple operations are natually available at the time
   * of the report.
   *
   * If multiple operations are in a single request, the total request size
   * should be no larger than 1MB. See [ReportResponse.report_errors][google.api.servicecontrol.v1.ReportResponse.report_errors] for
   * partial failure behavior.
   *
   * @generated from field: repeated google.api.servicecontrol.v1.Operation operations = 2;
   */
  operations: Operation[] = [];

  /**
   * Specifies which version of service config should be used to process the
   * request.
   *
   * If unspecified or no matching version can be found, the
   * latest one will be used.
   *
   * @generated from field: string service_config_id = 3;
   */
  serviceConfigId = "";

  constructor(data?: PartialMessage<ReportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicecontrol.v1.ReportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operations", kind: "message", T: Operation, repeated: true },
    { no: 3, name: "service_config_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportRequest {
    return new ReportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportRequest {
    return new ReportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportRequest {
    return new ReportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReportRequest | PlainMessage<ReportRequest> | undefined, b: ReportRequest | PlainMessage<ReportRequest> | undefined): boolean {
    return proto3.util.equals(ReportRequest, a, b);
  }
}

/**
 * Response message for the Report method.
 *
 * @generated from message google.api.servicecontrol.v1.ReportResponse
 */
export class ReportResponse extends Message<ReportResponse> {
  /**
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   *
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a general non-deterministic failure.
   *    When this happens, it's impossible to know which of the
   *    'Operations' in the request succeeded or failed.
   *
   * @generated from field: repeated google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;
   */
  reportErrors: ReportResponse_ReportError[] = [];

  /**
   * The actual config id used to process the request.
   *
   * @generated from field: string service_config_id = 2;
   */
  serviceConfigId = "";

  constructor(data?: PartialMessage<ReportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicecontrol.v1.ReportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "report_errors", kind: "message", T: ReportResponse_ReportError, repeated: true },
    { no: 2, name: "service_config_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportResponse {
    return new ReportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportResponse {
    return new ReportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportResponse {
    return new ReportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReportResponse | PlainMessage<ReportResponse> | undefined, b: ReportResponse | PlainMessage<ReportResponse> | undefined): boolean {
    return proto3.util.equals(ReportResponse, a, b);
  }
}

/**
 * Represents the processing error of one [Operation][google.api.servicecontrol.v1.Operation] in the request.
 *
 * @generated from message google.api.servicecontrol.v1.ReportResponse.ReportError
 */
export class ReportResponse_ReportError extends Message<ReportResponse_ReportError> {
  /**
   * The [Operation.operation_id][google.api.servicecontrol.v1.Operation.operation_id] value from the request.
   *
   * @generated from field: string operation_id = 1;
   */
  operationId = "";

  /**
   * Details of the error when processing the [Operation][google.api.servicecontrol.v1.Operation].
   *
   * @generated from field: google.rpc.Status status = 2;
   */
  status?: Status;

  constructor(data?: PartialMessage<ReportResponse_ReportError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicecontrol.v1.ReportResponse.ReportError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportResponse_ReportError {
    return new ReportResponse_ReportError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportResponse_ReportError {
    return new ReportResponse_ReportError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportResponse_ReportError {
    return new ReportResponse_ReportError().fromJsonString(jsonString, options);
  }

  static equals(a: ReportResponse_ReportError | PlainMessage<ReportResponse_ReportError> | undefined, b: ReportResponse_ReportError | PlainMessage<ReportResponse_ReportError> | undefined): boolean {
    return proto3.util.equals(ReportResponse_ReportError, a, b);
  }
}

