// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/genomics/v1/operations.proto (package google.genomics.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Metadata describing an [Operation][google.longrunning.Operation].
 *
 * @generated from message google.genomics.v1.OperationMetadata
 */
export class OperationMetadata extends Message<OperationMetadata> {
  /**
   * The Google Cloud Project in which the job is scoped.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * The time at which the job was submitted to the Genomics service.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * The time at which the job began to run.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 3;
   */
  startTime?: Timestamp;

  /**
   * The time at which the job stopped running.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 4;
   */
  endTime?: Timestamp;

  /**
   * The original request that started the operation. Note that this will be in
   * current version of the API. If the operation was started with v1beta2 API
   * and a GetOperation is performed on v1 API, a v1 request will be returned.
   *
   * @generated from field: google.protobuf.Any request = 5;
   */
  request?: Any;

  /**
   * Optional event messages that were generated during the job's execution.
   * This also contains any warnings that were generated during import
   * or export.
   *
   * @generated from field: repeated google.genomics.v1.OperationEvent events = 6;
   */
  events: OperationEvent[] = [];

  /**
   * This field is deprecated. Use `labels` instead. Optionally provided by the
   * caller when submitting the request that creates the operation.
   *
   * @generated from field: string client_id = 7;
   */
  clientId = "";

  /**
   * Runtime metadata on this Operation.
   *
   * @generated from field: google.protobuf.Any runtime_metadata = 8;
   */
  runtimeMetadata?: Any;

  /**
   * Optionally provided by the caller when submitting the request that creates
   * the operation.
   *
   * @generated from field: map<string, string> labels = 9;
   */
  labels: { [key: string]: string } = {};

  constructor(data?: PartialMessage<OperationMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.OperationMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "create_time", kind: "message", T: Timestamp },
    { no: 3, name: "start_time", kind: "message", T: Timestamp },
    { no: 4, name: "end_time", kind: "message", T: Timestamp },
    { no: 5, name: "request", kind: "message", T: Any },
    { no: 6, name: "events", kind: "message", T: OperationEvent, repeated: true },
    { no: 7, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "runtime_metadata", kind: "message", T: Any },
    { no: 9, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperationMetadata {
    return new OperationMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperationMetadata {
    return new OperationMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperationMetadata {
    return new OperationMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: OperationMetadata | PlainMessage<OperationMetadata> | undefined, b: OperationMetadata | PlainMessage<OperationMetadata> | undefined): boolean {
    return proto3.util.equals(OperationMetadata, a, b);
  }
}

/**
 * An event that occurred during an [Operation][google.longrunning.Operation].
 *
 * @generated from message google.genomics.v1.OperationEvent
 */
export class OperationEvent extends Message<OperationEvent> {
  /**
   * Optional time of when event started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * Optional time of when event finished. An event can have a start time and no
   * finish time. If an event has a finish time, there must be a start time.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * Required description of event.
   *
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<OperationEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.OperationEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_time", kind: "message", T: Timestamp },
    { no: 2, name: "end_time", kind: "message", T: Timestamp },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperationEvent {
    return new OperationEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperationEvent {
    return new OperationEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperationEvent {
    return new OperationEvent().fromJsonString(jsonString, options);
  }

  static equals(a: OperationEvent | PlainMessage<OperationEvent> | undefined, b: OperationEvent | PlainMessage<OperationEvent> | undefined): boolean {
    return proto3.util.equals(OperationEvent, a, b);
  }
}

