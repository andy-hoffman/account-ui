// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/genomics/v1/readgroup.proto (package google.genomics.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { ListValue, Message, proto3 } from "@bufbuild/protobuf";

/**
 * A read group is all the data that's processed the same way by the sequencer.
 *
 * @generated from message google.genomics.v1.ReadGroup
 */
export class ReadGroup extends Message<ReadGroup> {
  /**
   * The server-generated read group ID, unique for all read groups.
   * Note: This is different than the @RG ID field in the SAM spec. For that
   * value, see [name][google.genomics.v1.ReadGroup.name].
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The dataset to which this read group belongs.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * The read group name. This corresponds to the @RG ID field in the SAM spec.
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * A free-form text description of this read group.
   *
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * A client-supplied sample identifier for the reads in this read group.
   *
   * @generated from field: string sample_id = 5;
   */
  sampleId = "";

  /**
   * The experiment used to generate this read group.
   *
   * @generated from field: google.genomics.v1.ReadGroup.Experiment experiment = 6;
   */
  experiment?: ReadGroup_Experiment;

  /**
   * The predicted insert size of this read group. The insert size is the length
   * the sequenced DNA fragment from end-to-end, not including the adapters.
   *
   * @generated from field: int32 predicted_insert_size = 7;
   */
  predictedInsertSize = 0;

  /**
   * The programs used to generate this read group. Programs are always
   * identical for all read groups within a read group set. For this reason,
   * only the first read group in a returned set will have this field
   * populated.
   *
   * @generated from field: repeated google.genomics.v1.ReadGroup.Program programs = 10;
   */
  programs: ReadGroup_Program[] = [];

  /**
   * The reference set the reads in this read group are aligned to.
   *
   * @generated from field: string reference_set_id = 11;
   */
  referenceSetId = "";

  /**
   * A map of additional read group information. This must be of the form
   * map<string, string[]> (string key mapping to a list of string values).
   *
   * @generated from field: map<string, google.protobuf.ListValue> info = 12;
   */
  info: { [key: string]: ListValue } = {};

  constructor(data?: PartialMessage<ReadGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.ReadGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "sample_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "experiment", kind: "message", T: ReadGroup_Experiment },
    { no: 7, name: "predicted_insert_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "programs", kind: "message", T: ReadGroup_Program, repeated: true },
    { no: 11, name: "reference_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "info", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ListValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadGroup {
    return new ReadGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadGroup {
    return new ReadGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadGroup {
    return new ReadGroup().fromJsonString(jsonString, options);
  }

  static equals(a: ReadGroup | PlainMessage<ReadGroup> | undefined, b: ReadGroup | PlainMessage<ReadGroup> | undefined): boolean {
    return proto3.util.equals(ReadGroup, a, b);
  }
}

/**
 * @generated from message google.genomics.v1.ReadGroup.Experiment
 */
export class ReadGroup_Experiment extends Message<ReadGroup_Experiment> {
  /**
   * A client-supplied library identifier; a library is a collection of DNA
   * fragments which have been prepared for sequencing from a sample. This
   * field is important for quality control as error or bias can be introduced
   * during sample preparation.
   *
   * @generated from field: string library_id = 1;
   */
  libraryId = "";

  /**
   * The platform unit used as part of this experiment, for example
   * flowcell-barcode.lane for Illumina or slide for SOLiD. Corresponds to the
   * @RG PU field in the SAM spec.
   *
   * @generated from field: string platform_unit = 2;
   */
  platformUnit = "";

  /**
   * The sequencing center used as part of this experiment.
   *
   * @generated from field: string sequencing_center = 3;
   */
  sequencingCenter = "";

  /**
   * The instrument model used as part of this experiment. This maps to
   * sequencing technology in the SAM spec.
   *
   * @generated from field: string instrument_model = 4;
   */
  instrumentModel = "";

  constructor(data?: PartialMessage<ReadGroup_Experiment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.ReadGroup.Experiment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "library_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "platform_unit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequencing_center", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "instrument_model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadGroup_Experiment {
    return new ReadGroup_Experiment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadGroup_Experiment {
    return new ReadGroup_Experiment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadGroup_Experiment {
    return new ReadGroup_Experiment().fromJsonString(jsonString, options);
  }

  static equals(a: ReadGroup_Experiment | PlainMessage<ReadGroup_Experiment> | undefined, b: ReadGroup_Experiment | PlainMessage<ReadGroup_Experiment> | undefined): boolean {
    return proto3.util.equals(ReadGroup_Experiment, a, b);
  }
}

/**
 * @generated from message google.genomics.v1.ReadGroup.Program
 */
export class ReadGroup_Program extends Message<ReadGroup_Program> {
  /**
   * The command line used to run this program.
   *
   * @generated from field: string command_line = 1;
   */
  commandLine = "";

  /**
   * The user specified locally unique ID of the program. Used along with
   * `prevProgramId` to define an ordering between programs.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * The display name of the program. This is typically the colloquial name of
   * the tool used, for example 'bwa' or 'picard'.
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * The ID of the program run before this one.
   *
   * @generated from field: string prev_program_id = 4;
   */
  prevProgramId = "";

  /**
   * The version of the program run.
   *
   * @generated from field: string version = 5;
   */
  version = "";

  constructor(data?: PartialMessage<ReadGroup_Program>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.ReadGroup.Program";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "command_line", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "prev_program_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadGroup_Program {
    return new ReadGroup_Program().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadGroup_Program {
    return new ReadGroup_Program().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadGroup_Program {
    return new ReadGroup_Program().fromJsonString(jsonString, options);
  }

  static equals(a: ReadGroup_Program | PlainMessage<ReadGroup_Program> | undefined, b: ReadGroup_Program | PlainMessage<ReadGroup_Program> | undefined): boolean {
    return proto3.util.equals(ReadGroup_Program, a, b);
  }
}

