// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/genomics/v1/cigar.proto (package google.genomics.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * A single CIGAR operation.
 *
 * @generated from message google.genomics.v1.CigarUnit
 */
export class CigarUnit extends Message<CigarUnit> {
  /**
   * @generated from field: google.genomics.v1.CigarUnit.Operation operation = 1;
   */
  operation = CigarUnit_Operation.OPERATION_UNSPECIFIED;

  /**
   * The number of genomic bases that the operation runs for. Required.
   *
   * @generated from field: int64 operation_length = 2;
   */
  operationLength = protoInt64.zero;

  /**
   * `referenceSequence` is only used at mismatches
   * (`SEQUENCE_MISMATCH`) and deletions (`DELETE`).
   * Filling this field replaces SAM's MD tag. If the relevant information is
   * not available, this field is unset.
   *
   * @generated from field: string reference_sequence = 3;
   */
  referenceSequence = "";

  constructor(data?: PartialMessage<CigarUnit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.CigarUnit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operation", kind: "enum", T: proto3.getEnumType(CigarUnit_Operation) },
    { no: 2, name: "operation_length", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "reference_sequence", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CigarUnit {
    return new CigarUnit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CigarUnit {
    return new CigarUnit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CigarUnit {
    return new CigarUnit().fromJsonString(jsonString, options);
  }

  static equals(a: CigarUnit | PlainMessage<CigarUnit> | undefined, b: CigarUnit | PlainMessage<CigarUnit> | undefined): boolean {
    return proto3.util.equals(CigarUnit, a, b);
  }
}

/**
 * Describes the different types of CIGAR alignment operations that exist.
 * Used wherever CIGAR alignments are used.
 *
 * @generated from enum google.genomics.v1.CigarUnit.Operation
 */
export enum CigarUnit_Operation {
  /**
   * @generated from enum value: OPERATION_UNSPECIFIED = 0;
   */
  OPERATION_UNSPECIFIED = 0,

  /**
   * An alignment match indicates that a sequence can be aligned to the
   * reference without evidence of an INDEL. Unlike the
   * `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators,
   * the `ALIGNMENT_MATCH` operator does not indicate whether the
   * reference and read sequences are an exact match. This operator is
   * equivalent to SAM's `M`.
   *
   * @generated from enum value: ALIGNMENT_MATCH = 1;
   */
  ALIGNMENT_MATCH = 1,

  /**
   * The insert operator indicates that the read contains evidence of bases
   * being inserted into the reference. This operator is equivalent to SAM's
   * `I`.
   *
   * @generated from enum value: INSERT = 2;
   */
  INSERT = 2,

  /**
   * The delete operator indicates that the read contains evidence of bases
   * being deleted from the reference. This operator is equivalent to SAM's
   * `D`.
   *
   * @generated from enum value: DELETE = 3;
   */
  DELETE = 3,

  /**
   * The skip operator indicates that this read skips a long segment of the
   * reference, but the bases have not been deleted. This operator is commonly
   * used when working with RNA-seq data, where reads may skip long segments
   * of the reference between exons. This operator is equivalent to SAM's
   * `N`.
   *
   * @generated from enum value: SKIP = 4;
   */
  SKIP = 4,

  /**
   * The soft clip operator indicates that bases at the start/end of a read
   * have not been considered during alignment. This may occur if the majority
   * of a read maps, except for low quality bases at the start/end of a read.
   * This operator is equivalent to SAM's `S`. Bases that are soft
   * clipped will still be stored in the read.
   *
   * @generated from enum value: CLIP_SOFT = 5;
   */
  CLIP_SOFT = 5,

  /**
   * The hard clip operator indicates that bases at the start/end of a read
   * have been omitted from this alignment. This may occur if this linear
   * alignment is part of a chimeric alignment, or if the read has been
   * trimmed (for example, during error correction or to trim poly-A tails for
   * RNA-seq). This operator is equivalent to SAM's `H`.
   *
   * @generated from enum value: CLIP_HARD = 6;
   */
  CLIP_HARD = 6,

  /**
   * The pad operator indicates that there is padding in an alignment. This
   * operator is equivalent to SAM's `P`.
   *
   * @generated from enum value: PAD = 7;
   */
  PAD = 7,

  /**
   * This operator indicates that this portion of the aligned sequence exactly
   * matches the reference. This operator is equivalent to SAM's `=`.
   *
   * @generated from enum value: SEQUENCE_MATCH = 8;
   */
  SEQUENCE_MATCH = 8,

  /**
   * This operator indicates that this portion of the aligned sequence is an
   * alignment match to the reference, but a sequence mismatch. This can
   * indicate a SNP or a read error. This operator is equivalent to SAM's
   * `X`.
   *
   * @generated from enum value: SEQUENCE_MISMATCH = 9;
   */
  SEQUENCE_MISMATCH = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(CigarUnit_Operation)
proto3.util.setEnumType(CigarUnit_Operation, "google.genomics.v1.CigarUnit.Operation", [
  { no: 0, name: "OPERATION_UNSPECIFIED" },
  { no: 1, name: "ALIGNMENT_MATCH" },
  { no: 2, name: "INSERT" },
  { no: 3, name: "DELETE" },
  { no: 4, name: "SKIP" },
  { no: 5, name: "CLIP_SOFT" },
  { no: 6, name: "CLIP_HARD" },
  { no: 7, name: "PAD" },
  { no: 8, name: "SEQUENCE_MATCH" },
  { no: 9, name: "SEQUENCE_MISMATCH" },
]);

