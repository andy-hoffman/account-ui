// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/genomics/v1/readgroupset.proto (package google.genomics.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { ListValue, Message, proto3 } from "@bufbuild/protobuf";
import { ReadGroup } from "./readgroup_pb.js";

/**
 * A read group set is a logical collection of read groups, which are
 * collections of reads produced by a sequencer. A read group set typically
 * models reads corresponding to one sample, sequenced one way, and aligned one
 * way.
 *
 * * A read group set belongs to one dataset.
 * * A read group belongs to one read group set.
 * * A read belongs to one read group.
 *
 * For more genomics resource definitions, see [Fundamentals of Google
 * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
 *
 * @generated from message google.genomics.v1.ReadGroupSet
 */
export class ReadGroupSet extends Message<ReadGroupSet> {
  /**
   * The server-generated read group set ID, unique for all read group sets.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The dataset to which this read group set belongs.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * The reference set to which the reads in this read group set are aligned.
   *
   * @generated from field: string reference_set_id = 3;
   */
  referenceSetId = "";

  /**
   * The read group set name. By default this will be initialized to the sample
   * name of the sequenced data contained in this set.
   *
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * The filename of the original source file for this read group set, if any.
   *
   * @generated from field: string filename = 5;
   */
  filename = "";

  /**
   * The read groups in this set. There are typically 1-10 read groups in a read
   * group set.
   *
   * @generated from field: repeated google.genomics.v1.ReadGroup read_groups = 6;
   */
  readGroups: ReadGroup[] = [];

  /**
   * A map of additional read group set information.
   *
   * @generated from field: map<string, google.protobuf.ListValue> info = 7;
   */
  info: { [key: string]: ListValue } = {};

  constructor(data?: PartialMessage<ReadGroupSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.ReadGroupSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reference_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "read_groups", kind: "message", T: ReadGroup, repeated: true },
    { no: 7, name: "info", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ListValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadGroupSet {
    return new ReadGroupSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadGroupSet {
    return new ReadGroupSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadGroupSet {
    return new ReadGroupSet().fromJsonString(jsonString, options);
  }

  static equals(a: ReadGroupSet | PlainMessage<ReadGroupSet> | undefined, b: ReadGroupSet | PlainMessage<ReadGroupSet> | undefined): boolean {
    return proto3.util.equals(ReadGroupSet, a, b);
  }
}

