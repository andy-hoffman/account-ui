// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/genomics/v1/variants.proto (package google.genomics.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, ListValue, Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Operations to be performed during import on Variant info fields.
 * These operations are set for each info field in the info_merge_config
 * map of ImportVariantsRequest, which is plumbed down to the
 * MergeVariantRequests generated by the import job.
 *
 * @generated from enum google.genomics.v1.InfoMergeOperation
 */
export enum InfoMergeOperation {
  /**
   * @generated from enum value: INFO_MERGE_OPERATION_UNSPECIFIED = 0;
   */
  INFO_MERGE_OPERATION_UNSPECIFIED = 0,

  /**
   * By default, Variant info fields are persisted if the Variant doesn't
   * already exist in the variantset.  If the Variant is equivalent to a
   * Variant already in the variantset, the incoming Variant's info field
   * is ignored in favor of that of the already persisted Variant.
   *
   * @generated from enum value: IGNORE_NEW = 1;
   */
  IGNORE_NEW = 1,

  /**
   * This operation removes an info field from the incoming Variant
   * and persists this info field in each of the incoming Variant's Calls.
   *
   * @generated from enum value: MOVE_TO_CALLS = 2;
   */
  MOVE_TO_CALLS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(InfoMergeOperation)
proto3.util.setEnumType(InfoMergeOperation, "google.genomics.v1.InfoMergeOperation", [
  { no: 0, name: "INFO_MERGE_OPERATION_UNSPECIFIED" },
  { no: 1, name: "IGNORE_NEW" },
  { no: 2, name: "MOVE_TO_CALLS" },
]);

/**
 * Metadata describes a single piece of variant call metadata.
 * These data include a top level key and either a single value string (value)
 * or a list of key-value pairs (info.)
 * Value and info are mutually exclusive.
 *
 * @generated from message google.genomics.v1.VariantSetMetadata
 */
export class VariantSetMetadata extends Message<VariantSetMetadata> {
  /**
   * The top-level key.
   *
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * The value field for simple metadata
   *
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * User-provided ID field, not enforced by this API.
   * Two or more pieces of structured metadata with identical
   * id and key fields are considered equivalent.
   *
   * @generated from field: string id = 4;
   */
  id = "";

  /**
   * The type of data. Possible types include: Integer, Float,
   * Flag, Character, and String.
   *
   * @generated from field: google.genomics.v1.VariantSetMetadata.Type type = 5;
   */
  type = VariantSetMetadata_Type.TYPE_UNSPECIFIED;

  /**
   * The number of values that can be included in a field described by this
   * metadata.
   *
   * @generated from field: string number = 8;
   */
  number = "";

  /**
   * A textual description of this metadata.
   *
   * @generated from field: string description = 7;
   */
  description = "";

  /**
   * Remaining structured metadata key-value pairs. This must be of the form
   * map<string, string[]> (string key mapping to a list of string values).
   *
   * @generated from field: map<string, google.protobuf.ListValue> info = 3;
   */
  info: { [key: string]: ListValue } = {};

  constructor(data?: PartialMessage<VariantSetMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.VariantSetMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "type", kind: "enum", T: proto3.getEnumType(VariantSetMetadata_Type) },
    { no: 8, name: "number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "info", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ListValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VariantSetMetadata {
    return new VariantSetMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VariantSetMetadata {
    return new VariantSetMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VariantSetMetadata {
    return new VariantSetMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: VariantSetMetadata | PlainMessage<VariantSetMetadata> | undefined, b: VariantSetMetadata | PlainMessage<VariantSetMetadata> | undefined): boolean {
    return proto3.util.equals(VariantSetMetadata, a, b);
  }
}

/**
 * @generated from enum google.genomics.v1.VariantSetMetadata.Type
 */
export enum VariantSetMetadata_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: INTEGER = 1;
   */
  INTEGER = 1,

  /**
   * @generated from enum value: FLOAT = 2;
   */
  FLOAT = 2,

  /**
   * @generated from enum value: FLAG = 3;
   */
  FLAG = 3,

  /**
   * @generated from enum value: CHARACTER = 4;
   */
  CHARACTER = 4,

  /**
   * @generated from enum value: STRING = 5;
   */
  STRING = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(VariantSetMetadata_Type)
proto3.util.setEnumType(VariantSetMetadata_Type, "google.genomics.v1.VariantSetMetadata.Type", [
  { no: 0, name: "TYPE_UNSPECIFIED" },
  { no: 1, name: "INTEGER" },
  { no: 2, name: "FLOAT" },
  { no: 3, name: "FLAG" },
  { no: 4, name: "CHARACTER" },
  { no: 5, name: "STRING" },
]);

/**
 * A variant set is a collection of call sets and variants. It contains summary
 * statistics of those contents. A variant set belongs to a dataset.
 *
 * For more genomics resource definitions, see [Fundamentals of Google
 * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
 *
 * @generated from message google.genomics.v1.VariantSet
 */
export class VariantSet extends Message<VariantSet> {
  /**
   * The dataset to which this variant set belongs.
   *
   * @generated from field: string dataset_id = 1;
   */
  datasetId = "";

  /**
   * The server-generated variant set ID, unique across all variant sets.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * The reference set to which the variant set is mapped. The reference set
   * describes the alignment provenance of the variant set, while the
   * `referenceBounds` describe the shape of the actual variant data. The
   * reference set's reference names are a superset of those found in the
   * `referenceBounds`.
   *
   * For example, given a variant set that is mapped to the GRCh38 reference set
   * and contains a single variant on reference 'X', `referenceBounds` would
   * contain only an entry for 'X', while the associated reference set
   * enumerates all possible references: '1', '2', 'X', 'Y', 'MT', etc.
   *
   * @generated from field: string reference_set_id = 6;
   */
  referenceSetId = "";

  /**
   * A list of all references used by the variants in a variant set
   * with associated coordinate upper bounds for each one.
   *
   * @generated from field: repeated google.genomics.v1.ReferenceBound reference_bounds = 5;
   */
  referenceBounds: ReferenceBound[] = [];

  /**
   * The metadata associated with this variant set.
   *
   * @generated from field: repeated google.genomics.v1.VariantSetMetadata metadata = 4;
   */
  metadata: VariantSetMetadata[] = [];

  /**
   * User-specified, mutable name.
   *
   * @generated from field: string name = 7;
   */
  name = "";

  /**
   * A textual description of this variant set.
   *
   * @generated from field: string description = 8;
   */
  description = "";

  constructor(data?: PartialMessage<VariantSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.VariantSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "reference_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "reference_bounds", kind: "message", T: ReferenceBound, repeated: true },
    { no: 4, name: "metadata", kind: "message", T: VariantSetMetadata, repeated: true },
    { no: 7, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VariantSet {
    return new VariantSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VariantSet {
    return new VariantSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VariantSet {
    return new VariantSet().fromJsonString(jsonString, options);
  }

  static equals(a: VariantSet | PlainMessage<VariantSet> | undefined, b: VariantSet | PlainMessage<VariantSet> | undefined): boolean {
    return proto3.util.equals(VariantSet, a, b);
  }
}

/**
 * A variant represents a change in DNA sequence relative to a reference
 * sequence. For example, a variant could represent a SNP or an insertion.
 * Variants belong to a variant set.
 *
 * For more genomics resource definitions, see [Fundamentals of Google
 * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
 *
 * Each of the calls on a variant represent a determination of genotype with
 * respect to that variant. For example, a call might assign probability of 0.32
 * to the occurrence of a SNP named rs1234 in a sample named NA12345. A call
 * belongs to a call set, which contains related calls typically from one
 * sample.
 *
 * @generated from message google.genomics.v1.Variant
 */
export class Variant extends Message<Variant> {
  /**
   * The ID of the variant set this variant belongs to.
   *
   * @generated from field: string variant_set_id = 15;
   */
  variantSetId = "";

  /**
   * The server-generated variant ID, unique across all variants.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * Names for the variant, for example a RefSNP ID.
   *
   * @generated from field: repeated string names = 3;
   */
  names: string[] = [];

  /**
   * The date this variant was created, in milliseconds from the epoch.
   *
   * @generated from field: int64 created = 12;
   */
  created = protoInt64.zero;

  /**
   * The reference on which this variant occurs.
   * (such as `chr20` or `X`)
   *
   * @generated from field: string reference_name = 14;
   */
  referenceName = "";

  /**
   * The position at which this variant occurs (0-based).
   * This corresponds to the first base of the string of reference bases.
   *
   * @generated from field: int64 start = 16;
   */
  start = protoInt64.zero;

  /**
   * The end position (0-based) of this variant. This corresponds to the first
   * base after the last base in the reference allele. So, the length of
   * the reference allele is (end - start). This is useful for variants
   * that don't explicitly give alternate bases, for example large deletions.
   *
   * @generated from field: int64 end = 13;
   */
  end = protoInt64.zero;

  /**
   * The reference bases for this variant. They start at the given
   * position.
   *
   * @generated from field: string reference_bases = 6;
   */
  referenceBases = "";

  /**
   * The bases that appear instead of the reference bases.
   *
   * @generated from field: repeated string alternate_bases = 7;
   */
  alternateBases: string[] = [];

  /**
   * A measure of how likely this variant is to be real.
   * A higher value is better.
   *
   * @generated from field: double quality = 8;
   */
  quality = 0;

  /**
   * A list of filters (normally quality filters) this variant has failed.
   * `PASS` indicates this variant has passed all filters.
   *
   * @generated from field: repeated string filter = 9;
   */
  filter: string[] = [];

  /**
   * A map of additional variant information. This must be of the form
   * map<string, string[]> (string key mapping to a list of string values).
   *
   * @generated from field: map<string, google.protobuf.ListValue> info = 10;
   */
  info: { [key: string]: ListValue } = {};

  /**
   * The variant calls for this particular variant. Each one represents the
   * determination of genotype with respect to this variant.
   *
   * @generated from field: repeated google.genomics.v1.VariantCall calls = 11;
   */
  calls: VariantCall[] = [];

  constructor(data?: PartialMessage<Variant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.Variant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 15, name: "variant_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "created", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "reference_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "reference_bases", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "alternate_bases", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "quality", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 9, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "info", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ListValue} },
    { no: 11, name: "calls", kind: "message", T: VariantCall, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Variant {
    return new Variant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Variant {
    return new Variant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Variant {
    return new Variant().fromJsonString(jsonString, options);
  }

  static equals(a: Variant | PlainMessage<Variant> | undefined, b: Variant | PlainMessage<Variant> | undefined): boolean {
    return proto3.util.equals(Variant, a, b);
  }
}

/**
 * A call represents the determination of genotype with respect to a particular
 * variant. It may include associated information such as quality and phasing.
 * For example, a call might assign a probability of 0.32 to the occurrence of
 * a SNP named rs1234 in a call set with the name NA12345.
 *
 * @generated from message google.genomics.v1.VariantCall
 */
export class VariantCall extends Message<VariantCall> {
  /**
   * The ID of the call set this variant call belongs to.
   *
   * @generated from field: string call_set_id = 8;
   */
  callSetId = "";

  /**
   * The name of the call set this variant call belongs to.
   *
   * @generated from field: string call_set_name = 9;
   */
  callSetName = "";

  /**
   * The genotype of this variant call. Each value represents either the value
   * of the `referenceBases` field or a 1-based index into
   * `alternateBases`. If a variant had a `referenceBases`
   * value of `T` and an `alternateBases`
   * value of `["A", "C"]`, and the `genotype` was
   * `[2, 1]`, that would mean the call
   * represented the heterozygous value `CA` for this variant.
   * If the `genotype` was instead `[0, 1]`, the
   * represented value would be `TA`. Ordering of the
   * genotype values is important if the `phaseset` is present.
   * If a genotype is not called (that is, a `.` is present in the
   * GT string) -1 is returned.
   *
   * @generated from field: repeated int32 genotype = 7;
   */
  genotype: number[] = [];

  /**
   * If this field is present, this variant call's genotype ordering implies
   * the phase of the bases and is consistent with any other variant calls in
   * the same reference sequence which have the same phaseset value.
   * When importing data from VCF, if the genotype data was phased but no
   * phase set was specified this field will be set to `*`.
   *
   * @generated from field: string phaseset = 5;
   */
  phaseset = "";

  /**
   * The genotype likelihoods for this variant call. Each array entry
   * represents how likely a specific genotype is for this call. The value
   * ordering is defined by the GL tag in the VCF spec.
   * If Phred-scaled genotype likelihood scores (PL) are available and
   * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
   * to GL scores.  If both are available, PL scores are stored in `info`.
   *
   * @generated from field: repeated double genotype_likelihood = 6;
   */
  genotypeLikelihood: number[] = [];

  /**
   * A map of additional variant call information. This must be of the form
   * map<string, string[]> (string key mapping to a list of string values).
   *
   * @generated from field: map<string, google.protobuf.ListValue> info = 2;
   */
  info: { [key: string]: ListValue } = {};

  constructor(data?: PartialMessage<VariantCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.VariantCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 8, name: "call_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "call_set_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "genotype", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 5, name: "phaseset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "genotype_likelihood", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 2, name: "info", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ListValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VariantCall {
    return new VariantCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VariantCall {
    return new VariantCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VariantCall {
    return new VariantCall().fromJsonString(jsonString, options);
  }

  static equals(a: VariantCall | PlainMessage<VariantCall> | undefined, b: VariantCall | PlainMessage<VariantCall> | undefined): boolean {
    return proto3.util.equals(VariantCall, a, b);
  }
}

/**
 * A call set is a collection of variant calls, typically for one sample. It
 * belongs to a variant set.
 *
 * For more genomics resource definitions, see [Fundamentals of Google
 * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
 *
 * @generated from message google.genomics.v1.CallSet
 */
export class CallSet extends Message<CallSet> {
  /**
   * The server-generated call set ID, unique across all call sets.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The call set name.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The sample ID this call set corresponds to.
   *
   * @generated from field: string sample_id = 7;
   */
  sampleId = "";

  /**
   * The IDs of the variant sets this call set belongs to. This field must
   * have exactly length one, as a call set belongs to a single variant set.
   * This field is repeated for compatibility with the
   * [GA4GH 0.5.1
   * API](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variants.avdl#L76).
   *
   * @generated from field: repeated string variant_set_ids = 6;
   */
  variantSetIds: string[] = [];

  /**
   * The date this call set was created in milliseconds from the epoch.
   *
   * @generated from field: int64 created = 5;
   */
  created = protoInt64.zero;

  /**
   * A map of additional call set information. This must be of the form
   * map<string, string[]> (string key mapping to a list of string values).
   *
   * @generated from field: map<string, google.protobuf.ListValue> info = 4;
   */
  info: { [key: string]: ListValue } = {};

  constructor(data?: PartialMessage<CallSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.CallSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "sample_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "variant_set_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "created", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "info", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ListValue} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallSet {
    return new CallSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallSet {
    return new CallSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallSet {
    return new CallSet().fromJsonString(jsonString, options);
  }

  static equals(a: CallSet | PlainMessage<CallSet> | undefined, b: CallSet | PlainMessage<CallSet> | undefined): boolean {
    return proto3.util.equals(CallSet, a, b);
  }
}

/**
 * ReferenceBound records an upper bound for the starting coordinate of
 * variants in a particular reference.
 *
 * @generated from message google.genomics.v1.ReferenceBound
 */
export class ReferenceBound extends Message<ReferenceBound> {
  /**
   * The name of the reference associated with this reference bound.
   *
   * @generated from field: string reference_name = 1;
   */
  referenceName = "";

  /**
   * An upper bound (inclusive) on the starting coordinate of any
   * variant in the reference sequence.
   *
   * @generated from field: int64 upper_bound = 2;
   */
  upperBound = protoInt64.zero;

  constructor(data?: PartialMessage<ReferenceBound>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.ReferenceBound";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "upper_bound", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReferenceBound {
    return new ReferenceBound().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReferenceBound {
    return new ReferenceBound().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReferenceBound {
    return new ReferenceBound().fromJsonString(jsonString, options);
  }

  static equals(a: ReferenceBound | PlainMessage<ReferenceBound> | undefined, b: ReferenceBound | PlainMessage<ReferenceBound> | undefined): boolean {
    return proto3.util.equals(ReferenceBound, a, b);
  }
}

/**
 * The variant data import request.
 *
 * @generated from message google.genomics.v1.ImportVariantsRequest
 */
export class ImportVariantsRequest extends Message<ImportVariantsRequest> {
  /**
   * Required. The variant set to which variant data should be imported.
   *
   * @generated from field: string variant_set_id = 1;
   */
  variantSetId = "";

  /**
   * A list of URIs referencing variant files in Google Cloud Storage. URIs can
   * include wildcards [as described
   * here](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames).
   * Note that recursive wildcards ('**') are not supported.
   *
   * @generated from field: repeated string source_uris = 2;
   */
  sourceUris: string[] = [];

  /**
   * The format of the variant data being imported. If unspecified, defaults to
   * to `VCF`.
   *
   * @generated from field: google.genomics.v1.ImportVariantsRequest.Format format = 3;
   */
  format = ImportVariantsRequest_Format.UNSPECIFIED;

  /**
   * Convert reference names to the canonical representation.
   * hg19 haploytypes (those reference names containing "_hap")
   * are not modified in any way.
   * All other reference names are modified according to the following rules:
   * The reference name is capitalized.
   * The "chr" prefix is dropped for all autosomes and sex chromsomes.
   * For example "chr17" becomes "17" and "chrX" becomes "X".
   * All mitochondrial chromosomes ("chrM", "chrMT", etc) become "MT".
   *
   * @generated from field: bool normalize_reference_names = 5;
   */
  normalizeReferenceNames = false;

  /**
   * A mapping between info field keys and the InfoMergeOperations to
   * be performed on them. This is plumbed down to the MergeVariantRequests
   * generated by the resulting import job.
   *
   * @generated from field: map<string, google.genomics.v1.InfoMergeOperation> info_merge_config = 6;
   */
  infoMergeConfig: { [key: string]: InfoMergeOperation } = {};

  constructor(data?: PartialMessage<ImportVariantsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.ImportVariantsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variant_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "format", kind: "enum", T: proto3.getEnumType(ImportVariantsRequest_Format) },
    { no: 5, name: "normalize_reference_names", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "info_merge_config", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "enum", T: proto3.getEnumType(InfoMergeOperation)} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImportVariantsRequest {
    return new ImportVariantsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportVariantsRequest {
    return new ImportVariantsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImportVariantsRequest {
    return new ImportVariantsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ImportVariantsRequest | PlainMessage<ImportVariantsRequest> | undefined, b: ImportVariantsRequest | PlainMessage<ImportVariantsRequest> | undefined): boolean {
    return proto3.util.equals(ImportVariantsRequest, a, b);
  }
}

/**
 * @generated from enum google.genomics.v1.ImportVariantsRequest.Format
 */
export enum ImportVariantsRequest_Format {
  /**
   * @generated from enum value: FORMAT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * VCF (Variant Call Format). The VCF files may be gzip compressed. gVCF is
   * also supported.
   *
   * @generated from enum value: FORMAT_VCF = 1;
   */
  VCF = 1,

  /**
   * Complete Genomics masterVarBeta format. The masterVarBeta files may
   * be bzip2 compressed.
   *
   * @generated from enum value: FORMAT_COMPLETE_GENOMICS = 2;
   */
  COMPLETE_GENOMICS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ImportVariantsRequest_Format)
proto3.util.setEnumType(ImportVariantsRequest_Format, "google.genomics.v1.ImportVariantsRequest.Format", [
  { no: 0, name: "FORMAT_UNSPECIFIED" },
  { no: 1, name: "FORMAT_VCF" },
  { no: 2, name: "FORMAT_COMPLETE_GENOMICS" },
]);

/**
 * The variant data import response.
 *
 * @generated from message google.genomics.v1.ImportVariantsResponse
 */
export class ImportVariantsResponse extends Message<ImportVariantsResponse> {
  /**
   * IDs of the call sets created during the import.
   *
   * @generated from field: repeated string call_set_ids = 1;
   */
  callSetIds: string[] = [];

  constructor(data?: PartialMessage<ImportVariantsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.ImportVariantsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "call_set_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImportVariantsResponse {
    return new ImportVariantsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportVariantsResponse {
    return new ImportVariantsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImportVariantsResponse {
    return new ImportVariantsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ImportVariantsResponse | PlainMessage<ImportVariantsResponse> | undefined, b: ImportVariantsResponse | PlainMessage<ImportVariantsResponse> | undefined): boolean {
    return proto3.util.equals(ImportVariantsResponse, a, b);
  }
}

/**
 * The CreateVariantSet request
 *
 * @generated from message google.genomics.v1.CreateVariantSetRequest
 */
export class CreateVariantSetRequest extends Message<CreateVariantSetRequest> {
  /**
   * Required. The variant set to be created. Must have a valid `datasetId`.
   *
   * @generated from field: google.genomics.v1.VariantSet variant_set = 1;
   */
  variantSet?: VariantSet;

  constructor(data?: PartialMessage<CreateVariantSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.CreateVariantSetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variant_set", kind: "message", T: VariantSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateVariantSetRequest {
    return new CreateVariantSetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateVariantSetRequest {
    return new CreateVariantSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateVariantSetRequest {
    return new CreateVariantSetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateVariantSetRequest | PlainMessage<CreateVariantSetRequest> | undefined, b: CreateVariantSetRequest | PlainMessage<CreateVariantSetRequest> | undefined): boolean {
    return proto3.util.equals(CreateVariantSetRequest, a, b);
  }
}

/**
 * The variant data export request.
 *
 * @generated from message google.genomics.v1.ExportVariantSetRequest
 */
export class ExportVariantSetRequest extends Message<ExportVariantSetRequest> {
  /**
   * Required. The ID of the variant set that contains variant data which
   * should be exported. The caller must have READ access to this variant set.
   *
   * @generated from field: string variant_set_id = 1;
   */
  variantSetId = "";

  /**
   * If provided, only variant call information from the specified call sets
   * will be exported. By default all variant calls are exported.
   *
   * @generated from field: repeated string call_set_ids = 2;
   */
  callSetIds: string[] = [];

  /**
   * Required. The Google Cloud project ID that owns the destination
   * BigQuery dataset. The caller must have WRITE access to this project.  This
   * project will also own the resulting export job.
   *
   * @generated from field: string project_id = 3;
   */
  projectId = "";

  /**
   * The format for the exported data.
   *
   * @generated from field: google.genomics.v1.ExportVariantSetRequest.Format format = 4;
   */
  format = ExportVariantSetRequest_Format.UNSPECIFIED;

  /**
   * Required. The BigQuery dataset to export data to. This dataset must already
   * exist. Note that this is distinct from the Genomics concept of "dataset".
   *
   * @generated from field: string bigquery_dataset = 5;
   */
  bigqueryDataset = "";

  /**
   * Required. The BigQuery table to export data to.
   * If the table doesn't exist, it will be created. If it already exists, it
   * will be overwritten.
   *
   * @generated from field: string bigquery_table = 6;
   */
  bigqueryTable = "";

  constructor(data?: PartialMessage<ExportVariantSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.ExportVariantSetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variant_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "call_set_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "format", kind: "enum", T: proto3.getEnumType(ExportVariantSetRequest_Format) },
    { no: 5, name: "bigquery_dataset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "bigquery_table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportVariantSetRequest {
    return new ExportVariantSetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportVariantSetRequest {
    return new ExportVariantSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportVariantSetRequest {
    return new ExportVariantSetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExportVariantSetRequest | PlainMessage<ExportVariantSetRequest> | undefined, b: ExportVariantSetRequest | PlainMessage<ExportVariantSetRequest> | undefined): boolean {
    return proto3.util.equals(ExportVariantSetRequest, a, b);
  }
}

/**
 * @generated from enum google.genomics.v1.ExportVariantSetRequest.Format
 */
export enum ExportVariantSetRequest_Format {
  /**
   * @generated from enum value: FORMAT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Export the data to Google BigQuery.
   *
   * @generated from enum value: FORMAT_BIGQUERY = 1;
   */
  BIGQUERY = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ExportVariantSetRequest_Format)
proto3.util.setEnumType(ExportVariantSetRequest_Format, "google.genomics.v1.ExportVariantSetRequest.Format", [
  { no: 0, name: "FORMAT_UNSPECIFIED" },
  { no: 1, name: "FORMAT_BIGQUERY" },
]);

/**
 * The variant set request.
 *
 * @generated from message google.genomics.v1.GetVariantSetRequest
 */
export class GetVariantSetRequest extends Message<GetVariantSetRequest> {
  /**
   * Required. The ID of the variant set.
   *
   * @generated from field: string variant_set_id = 1;
   */
  variantSetId = "";

  constructor(data?: PartialMessage<GetVariantSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.GetVariantSetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variant_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVariantSetRequest {
    return new GetVariantSetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVariantSetRequest {
    return new GetVariantSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVariantSetRequest {
    return new GetVariantSetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVariantSetRequest | PlainMessage<GetVariantSetRequest> | undefined, b: GetVariantSetRequest | PlainMessage<GetVariantSetRequest> | undefined): boolean {
    return proto3.util.equals(GetVariantSetRequest, a, b);
  }
}

/**
 * The search variant sets request.
 *
 * @generated from message google.genomics.v1.SearchVariantSetsRequest
 */
export class SearchVariantSetsRequest extends Message<SearchVariantSetsRequest> {
  /**
   * Exactly one dataset ID must be provided here. Only variant sets which
   * belong to this dataset will be returned.
   *
   * @generated from field: repeated string dataset_ids = 1;
   */
  datasetIds: string[] = [];

  /**
   * The continuation token, which is used to page through large result sets.
   * To get the next page of results, set this parameter to the value of
   * `nextPageToken` from the previous response.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * The maximum number of results to return in a single page. If unspecified,
   * defaults to 1024.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<SearchVariantSetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.SearchVariantSetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dataset_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchVariantSetsRequest {
    return new SearchVariantSetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchVariantSetsRequest {
    return new SearchVariantSetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchVariantSetsRequest {
    return new SearchVariantSetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchVariantSetsRequest | PlainMessage<SearchVariantSetsRequest> | undefined, b: SearchVariantSetsRequest | PlainMessage<SearchVariantSetsRequest> | undefined): boolean {
    return proto3.util.equals(SearchVariantSetsRequest, a, b);
  }
}

/**
 * The search variant sets response.
 *
 * @generated from message google.genomics.v1.SearchVariantSetsResponse
 */
export class SearchVariantSetsResponse extends Message<SearchVariantSetsResponse> {
  /**
   * The variant sets belonging to the requested dataset.
   *
   * @generated from field: repeated google.genomics.v1.VariantSet variant_sets = 1;
   */
  variantSets: VariantSet[] = [];

  /**
   * The continuation token, which is used to page through large result sets.
   * Provide this value in a subsequent request to return the next page of
   * results. This field will be empty if there aren't any additional results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<SearchVariantSetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.SearchVariantSetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variant_sets", kind: "message", T: VariantSet, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchVariantSetsResponse {
    return new SearchVariantSetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchVariantSetsResponse {
    return new SearchVariantSetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchVariantSetsResponse {
    return new SearchVariantSetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchVariantSetsResponse | PlainMessage<SearchVariantSetsResponse> | undefined, b: SearchVariantSetsResponse | PlainMessage<SearchVariantSetsResponse> | undefined): boolean {
    return proto3.util.equals(SearchVariantSetsResponse, a, b);
  }
}

/**
 * The delete variant set request.
 *
 * @generated from message google.genomics.v1.DeleteVariantSetRequest
 */
export class DeleteVariantSetRequest extends Message<DeleteVariantSetRequest> {
  /**
   * The ID of the variant set to be deleted.
   *
   * @generated from field: string variant_set_id = 1;
   */
  variantSetId = "";

  constructor(data?: PartialMessage<DeleteVariantSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.DeleteVariantSetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variant_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteVariantSetRequest {
    return new DeleteVariantSetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteVariantSetRequest {
    return new DeleteVariantSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteVariantSetRequest {
    return new DeleteVariantSetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteVariantSetRequest | PlainMessage<DeleteVariantSetRequest> | undefined, b: DeleteVariantSetRequest | PlainMessage<DeleteVariantSetRequest> | undefined): boolean {
    return proto3.util.equals(DeleteVariantSetRequest, a, b);
  }
}

/**
 * @generated from message google.genomics.v1.UpdateVariantSetRequest
 */
export class UpdateVariantSetRequest extends Message<UpdateVariantSetRequest> {
  /**
   * The ID of the variant to be updated (must already exist).
   *
   * @generated from field: string variant_set_id = 1;
   */
  variantSetId = "";

  /**
   * The new variant data. Only the variant_set.metadata will be considered
   * for update.
   *
   * @generated from field: google.genomics.v1.VariantSet variant_set = 2;
   */
  variantSet?: VariantSet;

  /**
   * An optional mask specifying which fields to update. Supported fields:
   *
   * * [metadata][google.genomics.v1.VariantSet.metadata].
   * * [name][google.genomics.v1.VariantSet.name].
   * * [description][google.genomics.v1.VariantSet.description].
   *
   * Leaving `updateMask` unset is equivalent to specifying all mutable
   * fields.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 5;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateVariantSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.UpdateVariantSetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variant_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "variant_set", kind: "message", T: VariantSet },
    { no: 5, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateVariantSetRequest {
    return new UpdateVariantSetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateVariantSetRequest {
    return new UpdateVariantSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateVariantSetRequest {
    return new UpdateVariantSetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateVariantSetRequest | PlainMessage<UpdateVariantSetRequest> | undefined, b: UpdateVariantSetRequest | PlainMessage<UpdateVariantSetRequest> | undefined): boolean {
    return proto3.util.equals(UpdateVariantSetRequest, a, b);
  }
}

/**
 * The variant search request.
 *
 * @generated from message google.genomics.v1.SearchVariantsRequest
 */
export class SearchVariantsRequest extends Message<SearchVariantsRequest> {
  /**
   * At most one variant set ID must be provided. Only variants from this
   * variant set will be returned. If omitted, a call set id must be included in
   * the request.
   *
   * @generated from field: repeated string variant_set_ids = 1;
   */
  variantSetIds: string[] = [];

  /**
   * Only return variants which have exactly this name.
   *
   * @generated from field: string variant_name = 2;
   */
  variantName = "";

  /**
   * Only return variant calls which belong to call sets with these ids.
   * Leaving this blank returns all variant calls. If a variant has no
   * calls belonging to any of these call sets, it won't be returned at all.
   *
   * @generated from field: repeated string call_set_ids = 3;
   */
  callSetIds: string[] = [];

  /**
   * Required. Only return variants in this reference sequence.
   *
   * @generated from field: string reference_name = 4;
   */
  referenceName = "";

  /**
   * The beginning of the window (0-based, inclusive) for which
   * overlapping variants should be returned. If unspecified, defaults to 0.
   *
   * @generated from field: int64 start = 5;
   */
  start = protoInt64.zero;

  /**
   * The end of the window, 0-based exclusive. If unspecified or 0, defaults to
   * the length of the reference.
   *
   * @generated from field: int64 end = 6;
   */
  end = protoInt64.zero;

  /**
   * The continuation token, which is used to page through large result sets.
   * To get the next page of results, set this parameter to the value of
   * `nextPageToken` from the previous response.
   *
   * @generated from field: string page_token = 7;
   */
  pageToken = "";

  /**
   * The maximum number of variants to return in a single page. If unspecified,
   * defaults to 5000. The maximum value is 10000.
   *
   * @generated from field: int32 page_size = 8;
   */
  pageSize = 0;

  /**
   * The maximum number of calls to return in a single page. Note that this
   * limit may be exceeded in the event that a matching variant contains more
   * calls than the requested maximum. If unspecified, defaults to 5000. The
   * maximum value is 10000.
   *
   * @generated from field: int32 max_calls = 9;
   */
  maxCalls = 0;

  constructor(data?: PartialMessage<SearchVariantsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.SearchVariantsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variant_set_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "variant_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "call_set_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "reference_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "max_calls", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchVariantsRequest {
    return new SearchVariantsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchVariantsRequest {
    return new SearchVariantsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchVariantsRequest {
    return new SearchVariantsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchVariantsRequest | PlainMessage<SearchVariantsRequest> | undefined, b: SearchVariantsRequest | PlainMessage<SearchVariantsRequest> | undefined): boolean {
    return proto3.util.equals(SearchVariantsRequest, a, b);
  }
}

/**
 * The variant search response.
 *
 * @generated from message google.genomics.v1.SearchVariantsResponse
 */
export class SearchVariantsResponse extends Message<SearchVariantsResponse> {
  /**
   * The list of matching Variants.
   *
   * @generated from field: repeated google.genomics.v1.Variant variants = 1;
   */
  variants: Variant[] = [];

  /**
   * The continuation token, which is used to page through large result sets.
   * Provide this value in a subsequent request to return the next page of
   * results. This field will be empty if there aren't any additional results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<SearchVariantsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.SearchVariantsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variants", kind: "message", T: Variant, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchVariantsResponse {
    return new SearchVariantsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchVariantsResponse {
    return new SearchVariantsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchVariantsResponse {
    return new SearchVariantsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchVariantsResponse | PlainMessage<SearchVariantsResponse> | undefined, b: SearchVariantsResponse | PlainMessage<SearchVariantsResponse> | undefined): boolean {
    return proto3.util.equals(SearchVariantsResponse, a, b);
  }
}

/**
 * @generated from message google.genomics.v1.CreateVariantRequest
 */
export class CreateVariantRequest extends Message<CreateVariantRequest> {
  /**
   * The variant to be created.
   *
   * @generated from field: google.genomics.v1.Variant variant = 1;
   */
  variant?: Variant;

  constructor(data?: PartialMessage<CreateVariantRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.CreateVariantRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variant", kind: "message", T: Variant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateVariantRequest {
    return new CreateVariantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateVariantRequest {
    return new CreateVariantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateVariantRequest {
    return new CreateVariantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateVariantRequest | PlainMessage<CreateVariantRequest> | undefined, b: CreateVariantRequest | PlainMessage<CreateVariantRequest> | undefined): boolean {
    return proto3.util.equals(CreateVariantRequest, a, b);
  }
}

/**
 * @generated from message google.genomics.v1.UpdateVariantRequest
 */
export class UpdateVariantRequest extends Message<UpdateVariantRequest> {
  /**
   * The ID of the variant to be updated.
   *
   * @generated from field: string variant_id = 1;
   */
  variantId = "";

  /**
   * The new variant data.
   *
   * @generated from field: google.genomics.v1.Variant variant = 2;
   */
  variant?: Variant;

  /**
   * An optional mask specifying which fields to update. At this time, mutable
   * fields are [names][google.genomics.v1.Variant.names] and
   * [info][google.genomics.v1.Variant.info]. Acceptable values are "names" and
   * "info". If unspecified, all mutable fields will be updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateVariantRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.UpdateVariantRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "variant", kind: "message", T: Variant },
    { no: 3, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateVariantRequest {
    return new UpdateVariantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateVariantRequest {
    return new UpdateVariantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateVariantRequest {
    return new UpdateVariantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateVariantRequest | PlainMessage<UpdateVariantRequest> | undefined, b: UpdateVariantRequest | PlainMessage<UpdateVariantRequest> | undefined): boolean {
    return proto3.util.equals(UpdateVariantRequest, a, b);
  }
}

/**
 * @generated from message google.genomics.v1.DeleteVariantRequest
 */
export class DeleteVariantRequest extends Message<DeleteVariantRequest> {
  /**
   * The ID of the variant to be deleted.
   *
   * @generated from field: string variant_id = 1;
   */
  variantId = "";

  constructor(data?: PartialMessage<DeleteVariantRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.DeleteVariantRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteVariantRequest {
    return new DeleteVariantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteVariantRequest {
    return new DeleteVariantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteVariantRequest {
    return new DeleteVariantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteVariantRequest | PlainMessage<DeleteVariantRequest> | undefined, b: DeleteVariantRequest | PlainMessage<DeleteVariantRequest> | undefined): boolean {
    return proto3.util.equals(DeleteVariantRequest, a, b);
  }
}

/**
 * @generated from message google.genomics.v1.GetVariantRequest
 */
export class GetVariantRequest extends Message<GetVariantRequest> {
  /**
   * The ID of the variant.
   *
   * @generated from field: string variant_id = 1;
   */
  variantId = "";

  constructor(data?: PartialMessage<GetVariantRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.GetVariantRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVariantRequest {
    return new GetVariantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVariantRequest {
    return new GetVariantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVariantRequest {
    return new GetVariantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVariantRequest | PlainMessage<GetVariantRequest> | undefined, b: GetVariantRequest | PlainMessage<GetVariantRequest> | undefined): boolean {
    return proto3.util.equals(GetVariantRequest, a, b);
  }
}

/**
 * @generated from message google.genomics.v1.MergeVariantsRequest
 */
export class MergeVariantsRequest extends Message<MergeVariantsRequest> {
  /**
   * The destination variant set.
   *
   * @generated from field: string variant_set_id = 1;
   */
  variantSetId = "";

  /**
   * The variants to be merged with existing variants.
   *
   * @generated from field: repeated google.genomics.v1.Variant variants = 2;
   */
  variants: Variant[] = [];

  /**
   * A mapping between info field keys and the InfoMergeOperations to
   * be performed on them.
   *
   * @generated from field: map<string, google.genomics.v1.InfoMergeOperation> info_merge_config = 3;
   */
  infoMergeConfig: { [key: string]: InfoMergeOperation } = {};

  constructor(data?: PartialMessage<MergeVariantsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.MergeVariantsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variant_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "variants", kind: "message", T: Variant, repeated: true },
    { no: 3, name: "info_merge_config", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "enum", T: proto3.getEnumType(InfoMergeOperation)} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MergeVariantsRequest {
    return new MergeVariantsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MergeVariantsRequest {
    return new MergeVariantsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MergeVariantsRequest {
    return new MergeVariantsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MergeVariantsRequest | PlainMessage<MergeVariantsRequest> | undefined, b: MergeVariantsRequest | PlainMessage<MergeVariantsRequest> | undefined): boolean {
    return proto3.util.equals(MergeVariantsRequest, a, b);
  }
}

/**
 * The call set search request.
 *
 * @generated from message google.genomics.v1.SearchCallSetsRequest
 */
export class SearchCallSetsRequest extends Message<SearchCallSetsRequest> {
  /**
   * Restrict the query to call sets within the given variant sets. At least one
   * ID must be provided.
   *
   * @generated from field: repeated string variant_set_ids = 1;
   */
  variantSetIds: string[] = [];

  /**
   * Only return call sets for which a substring of the name matches this
   * string.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The continuation token, which is used to page through large result sets.
   * To get the next page of results, set this parameter to the value of
   * `nextPageToken` from the previous response.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * The maximum number of results to return in a single page. If unspecified,
   * defaults to 1024.
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<SearchCallSetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.SearchCallSetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variant_set_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchCallSetsRequest {
    return new SearchCallSetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchCallSetsRequest {
    return new SearchCallSetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchCallSetsRequest {
    return new SearchCallSetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchCallSetsRequest | PlainMessage<SearchCallSetsRequest> | undefined, b: SearchCallSetsRequest | PlainMessage<SearchCallSetsRequest> | undefined): boolean {
    return proto3.util.equals(SearchCallSetsRequest, a, b);
  }
}

/**
 * The call set search response.
 *
 * @generated from message google.genomics.v1.SearchCallSetsResponse
 */
export class SearchCallSetsResponse extends Message<SearchCallSetsResponse> {
  /**
   * The list of matching call sets.
   *
   * @generated from field: repeated google.genomics.v1.CallSet call_sets = 1;
   */
  callSets: CallSet[] = [];

  /**
   * The continuation token, which is used to page through large result sets.
   * Provide this value in a subsequent request to return the next page of
   * results. This field will be empty if there aren't any additional results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<SearchCallSetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.SearchCallSetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "call_sets", kind: "message", T: CallSet, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchCallSetsResponse {
    return new SearchCallSetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchCallSetsResponse {
    return new SearchCallSetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchCallSetsResponse {
    return new SearchCallSetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchCallSetsResponse | PlainMessage<SearchCallSetsResponse> | undefined, b: SearchCallSetsResponse | PlainMessage<SearchCallSetsResponse> | undefined): boolean {
    return proto3.util.equals(SearchCallSetsResponse, a, b);
  }
}

/**
 * @generated from message google.genomics.v1.CreateCallSetRequest
 */
export class CreateCallSetRequest extends Message<CreateCallSetRequest> {
  /**
   * The call set to be created.
   *
   * @generated from field: google.genomics.v1.CallSet call_set = 1;
   */
  callSet?: CallSet;

  constructor(data?: PartialMessage<CreateCallSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.CreateCallSetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "call_set", kind: "message", T: CallSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCallSetRequest {
    return new CreateCallSetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCallSetRequest {
    return new CreateCallSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCallSetRequest {
    return new CreateCallSetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCallSetRequest | PlainMessage<CreateCallSetRequest> | undefined, b: CreateCallSetRequest | PlainMessage<CreateCallSetRequest> | undefined): boolean {
    return proto3.util.equals(CreateCallSetRequest, a, b);
  }
}

/**
 * @generated from message google.genomics.v1.UpdateCallSetRequest
 */
export class UpdateCallSetRequest extends Message<UpdateCallSetRequest> {
  /**
   * The ID of the call set to be updated.
   *
   * @generated from field: string call_set_id = 1;
   */
  callSetId = "";

  /**
   * The new call set data.
   *
   * @generated from field: google.genomics.v1.CallSet call_set = 2;
   */
  callSet?: CallSet;

  /**
   * An optional mask specifying which fields to update. At this time, the only
   * mutable field is [name][google.genomics.v1.CallSet.name]. The only
   * acceptable value is "name". If unspecified, all mutable fields will be
   * updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateCallSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.UpdateCallSetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "call_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "call_set", kind: "message", T: CallSet },
    { no: 3, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCallSetRequest {
    return new UpdateCallSetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCallSetRequest {
    return new UpdateCallSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCallSetRequest {
    return new UpdateCallSetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCallSetRequest | PlainMessage<UpdateCallSetRequest> | undefined, b: UpdateCallSetRequest | PlainMessage<UpdateCallSetRequest> | undefined): boolean {
    return proto3.util.equals(UpdateCallSetRequest, a, b);
  }
}

/**
 * @generated from message google.genomics.v1.DeleteCallSetRequest
 */
export class DeleteCallSetRequest extends Message<DeleteCallSetRequest> {
  /**
   * The ID of the call set to be deleted.
   *
   * @generated from field: string call_set_id = 1;
   */
  callSetId = "";

  constructor(data?: PartialMessage<DeleteCallSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.DeleteCallSetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "call_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCallSetRequest {
    return new DeleteCallSetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCallSetRequest {
    return new DeleteCallSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCallSetRequest {
    return new DeleteCallSetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCallSetRequest | PlainMessage<DeleteCallSetRequest> | undefined, b: DeleteCallSetRequest | PlainMessage<DeleteCallSetRequest> | undefined): boolean {
    return proto3.util.equals(DeleteCallSetRequest, a, b);
  }
}

/**
 * @generated from message google.genomics.v1.GetCallSetRequest
 */
export class GetCallSetRequest extends Message<GetCallSetRequest> {
  /**
   * The ID of the call set.
   *
   * @generated from field: string call_set_id = 1;
   */
  callSetId = "";

  constructor(data?: PartialMessage<GetCallSetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.GetCallSetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "call_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCallSetRequest {
    return new GetCallSetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCallSetRequest {
    return new GetCallSetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCallSetRequest {
    return new GetCallSetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCallSetRequest | PlainMessage<GetCallSetRequest> | undefined, b: GetCallSetRequest | PlainMessage<GetCallSetRequest> | undefined): boolean {
    return proto3.util.equals(GetCallSetRequest, a, b);
  }
}

/**
 * The stream variants request.
 *
 * @generated from message google.genomics.v1.StreamVariantsRequest
 */
export class StreamVariantsRequest extends Message<StreamVariantsRequest> {
  /**
   * The Google Cloud project ID which will be billed
   * for this access. The caller must have WRITE access to this project.
   * Required.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * The variant set ID from which to stream variants.
   *
   * @generated from field: string variant_set_id = 2;
   */
  variantSetId = "";

  /**
   * Only return variant calls which belong to call sets with these IDs.
   * Leaving this blank returns all variant calls.
   *
   * @generated from field: repeated string call_set_ids = 3;
   */
  callSetIds: string[] = [];

  /**
   * Required. Only return variants in this reference sequence.
   *
   * @generated from field: string reference_name = 4;
   */
  referenceName = "";

  /**
   * The beginning of the window (0-based, inclusive) for which
   * overlapping variants should be returned.
   *
   * @generated from field: int64 start = 5;
   */
  start = protoInt64.zero;

  /**
   * The end of the window (0-based, exclusive) for which overlapping
   * variants should be returned.
   *
   * @generated from field: int64 end = 6;
   */
  end = protoInt64.zero;

  constructor(data?: PartialMessage<StreamVariantsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.StreamVariantsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "variant_set_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "call_set_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "reference_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamVariantsRequest {
    return new StreamVariantsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamVariantsRequest {
    return new StreamVariantsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamVariantsRequest {
    return new StreamVariantsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamVariantsRequest | PlainMessage<StreamVariantsRequest> | undefined, b: StreamVariantsRequest | PlainMessage<StreamVariantsRequest> | undefined): boolean {
    return proto3.util.equals(StreamVariantsRequest, a, b);
  }
}

/**
 * @generated from message google.genomics.v1.StreamVariantsResponse
 */
export class StreamVariantsResponse extends Message<StreamVariantsResponse> {
  /**
   * @generated from field: repeated google.genomics.v1.Variant variants = 1;
   */
  variants: Variant[] = [];

  constructor(data?: PartialMessage<StreamVariantsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1.StreamVariantsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variants", kind: "message", T: Variant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamVariantsResponse {
    return new StreamVariantsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamVariantsResponse {
    return new StreamVariantsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamVariantsResponse {
    return new StreamVariantsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamVariantsResponse | PlainMessage<StreamVariantsResponse> | undefined, b: StreamVariantsResponse | PlainMessage<StreamVariantsResponse> | undefined): boolean {
    return proto3.util.equals(StreamVariantsResponse, a, b);
  }
}

