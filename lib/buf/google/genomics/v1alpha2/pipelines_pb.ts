// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/genomics/v1alpha2/pipelines.proto (package google.genomics.v1alpha2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Code } from "../../rpc/code_pb.js";

/**
 * Describes a Compute Engine resource that is being managed by a running
 * [pipeline][google.genomics.v1alpha2.Pipeline].
 *
 * @generated from message google.genomics.v1alpha2.ComputeEngine
 */
export class ComputeEngine extends Message<ComputeEngine> {
  /**
   * The instance on which the operation is running.
   *
   * @generated from field: string instance_name = 1;
   */
  instanceName = "";

  /**
   * The availability zone in which the instance resides.
   *
   * @generated from field: string zone = 2;
   */
  zone = "";

  /**
   * The machine type of the instance.
   *
   * @generated from field: string machine_type = 3;
   */
  machineType = "";

  /**
   * The names of the disks that were created for this pipeline.
   *
   * @generated from field: repeated string disk_names = 4;
   */
  diskNames: string[] = [];

  constructor(data?: PartialMessage<ComputeEngine>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.ComputeEngine";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "zone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "machine_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "disk_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComputeEngine {
    return new ComputeEngine().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComputeEngine {
    return new ComputeEngine().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComputeEngine {
    return new ComputeEngine().fromJsonString(jsonString, options);
  }

  static equals(a: ComputeEngine | PlainMessage<ComputeEngine> | undefined, b: ComputeEngine | PlainMessage<ComputeEngine> | undefined): boolean {
    return proto3.util.equals(ComputeEngine, a, b);
  }
}

/**
 * Runtime metadata that will be populated in the
 * [runtimeMetadata][google.genomics.v1.OperationMetadata.runtime_metadata]
 * field of the Operation associated with a RunPipeline execution.
 *
 * @generated from message google.genomics.v1alpha2.RuntimeMetadata
 */
export class RuntimeMetadata extends Message<RuntimeMetadata> {
  /**
   * Execution information specific to Google Compute Engine.
   *
   * @generated from field: google.genomics.v1alpha2.ComputeEngine compute_engine = 1;
   */
  computeEngine?: ComputeEngine;

  constructor(data?: PartialMessage<RuntimeMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.RuntimeMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "compute_engine", kind: "message", T: ComputeEngine },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeMetadata {
    return new RuntimeMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeMetadata {
    return new RuntimeMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeMetadata {
    return new RuntimeMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: RuntimeMetadata | PlainMessage<RuntimeMetadata> | undefined, b: RuntimeMetadata | PlainMessage<RuntimeMetadata> | undefined): boolean {
    return proto3.util.equals(RuntimeMetadata, a, b);
  }
}

/**
 * The pipeline object. Represents a transformation from a set of input
 * parameters to a set of output parameters. The transformation is defined
 * as a docker image and command to run within that image. Each pipeline
 * is run on a Google Compute Engine VM. A pipeline can be created with the
 * `create` method and then later run with the `run` method, or a pipeline can
 * be defined and run all at once with the `run` method.
 *
 * @generated from message google.genomics.v1alpha2.Pipeline
 */
export class Pipeline extends Message<Pipeline> {
  /**
   * Required. The project in which to create the pipeline. The caller must have
   * WRITE access.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * Required. A user specified pipeline name that does not have to be unique.
   * This name can be used for filtering Pipelines in ListPipelines.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * User-specified description.
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * Input parameters of the pipeline.
   *
   * @generated from field: repeated google.genomics.v1alpha2.PipelineParameter input_parameters = 8;
   */
  inputParameters: PipelineParameter[] = [];

  /**
   * Output parameters of the pipeline.
   *
   * @generated from field: repeated google.genomics.v1alpha2.PipelineParameter output_parameters = 9;
   */
  outputParameters: PipelineParameter[] = [];

  /**
   * Required. The executor indicates in which environment the pipeline runs.
   *
   * @generated from oneof google.genomics.v1alpha2.Pipeline.executor
   */
  executor: {
    /**
     * Specifies the docker run information.
     *
     * @generated from field: google.genomics.v1alpha2.DockerExecutor docker = 5;
     */
    value: DockerExecutor;
    case: "docker";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Required. Specifies resource requirements for the pipeline run.
   * Required fields:
   *
   * *
   * [minimumCpuCores][google.genomics.v1alpha2.PipelineResources.minimum_cpu_cores]
   *
   * *
   * [minimumRamGb][google.genomics.v1alpha2.PipelineResources.minimum_ram_gb]
   *
   * @generated from field: google.genomics.v1alpha2.PipelineResources resources = 6;
   */
  resources?: PipelineResources;

  /**
   * Unique pipeline id that is generated by the service when CreatePipeline
   * is called. Cannot be specified in the Pipeline used in the
   * CreatePipelineRequest, and will be populated in the response to
   * CreatePipeline and all subsequent Get and List calls. Indicates that the
   * service has registered this pipeline.
   *
   * @generated from field: string pipeline_id = 7;
   */
  pipelineId = "";

  constructor(data?: PartialMessage<Pipeline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.Pipeline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "input_parameters", kind: "message", T: PipelineParameter, repeated: true },
    { no: 9, name: "output_parameters", kind: "message", T: PipelineParameter, repeated: true },
    { no: 5, name: "docker", kind: "message", T: DockerExecutor, oneof: "executor" },
    { no: 6, name: "resources", kind: "message", T: PipelineResources },
    { no: 7, name: "pipeline_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pipeline {
    return new Pipeline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pipeline {
    return new Pipeline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pipeline {
    return new Pipeline().fromJsonString(jsonString, options);
  }

  static equals(a: Pipeline | PlainMessage<Pipeline> | undefined, b: Pipeline | PlainMessage<Pipeline> | undefined): boolean {
    return proto3.util.equals(Pipeline, a, b);
  }
}

/**
 * The request to create a pipeline. The pipeline field here should not have
 * `pipelineId` populated, as that will be populated by the server.
 *
 * @generated from message google.genomics.v1alpha2.CreatePipelineRequest
 */
export class CreatePipelineRequest extends Message<CreatePipelineRequest> {
  /**
   * The pipeline to create. Should not have `pipelineId` populated.
   *
   * @generated from field: google.genomics.v1alpha2.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;

  constructor(data?: PartialMessage<CreatePipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.CreatePipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipeline", kind: "message", T: Pipeline },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePipelineRequest {
    return new CreatePipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePipelineRequest {
    return new CreatePipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePipelineRequest {
    return new CreatePipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePipelineRequest | PlainMessage<CreatePipelineRequest> | undefined, b: CreatePipelineRequest | PlainMessage<CreatePipelineRequest> | undefined): boolean {
    return proto3.util.equals(CreatePipelineRequest, a, b);
  }
}

/**
 * The pipeline run arguments.
 *
 * @generated from message google.genomics.v1alpha2.RunPipelineArgs
 */
export class RunPipelineArgs extends Message<RunPipelineArgs> {
  /**
   * Required. The project in which to run the pipeline. The caller must have
   * WRITER access to all Google Cloud services and resources (e.g. Google
   * Compute Engine) will be used.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * Pipeline input arguments; keys are defined in the pipeline documentation.
   * All input parameters that do not have default values  must be specified.
   * If parameters with defaults are specified here, the defaults will be
   * overridden.
   *
   * @generated from field: map<string, string> inputs = 2;
   */
  inputs: { [key: string]: string } = {};

  /**
   * Pipeline output arguments; keys are defined in the pipeline
   * documentation.  All output parameters of without default values
   * must be specified.  If parameters with defaults are specified
   * here, the defaults will be overridden.
   *
   * @generated from field: map<string, string> outputs = 3;
   */
  outputs: { [key: string]: string } = {};

  /**
   * The Google Cloud Service Account that will be used to access data and
   * services. By default, the compute service account associated with
   * `projectId` is used.
   *
   * @generated from field: google.genomics.v1alpha2.ServiceAccount service_account = 4;
   */
  serviceAccount?: ServiceAccount;

  /**
   * This field is deprecated. Use `labels` instead. Client-specified pipeline
   * operation identifier.
   *
   * @generated from field: string client_id = 5;
   */
  clientId = "";

  /**
   * Specifies resource requirements/overrides for the pipeline run.
   *
   * @generated from field: google.genomics.v1alpha2.PipelineResources resources = 6;
   */
  resources?: PipelineResources;

  /**
   * Required. Logging options. Used by the service to communicate results
   * to the user.
   *
   * @generated from field: google.genomics.v1alpha2.LoggingOptions logging = 7;
   */
  logging?: LoggingOptions;

  /**
   * How long to keep the VM up after a failure (for example docker command
   * failed, copying input or output files failed, etc). While the VM is up, one
   * can ssh into the VM to debug. Default is 0; maximum allowed value is 1 day.
   *
   * @generated from field: google.protobuf.Duration keep_vm_alive_on_failure_duration = 8;
   */
  keepVmAliveOnFailureDuration?: Duration;

  /**
   * Labels to apply to this pipeline run. Labels will also be applied to
   * compute resources (VM, disks) created by this pipeline run. When listing
   * operations, operations can [filtered by labels]
   * [google.longrunning.ListOperationsRequest.filter].
   * Label keys may not be empty; label values may be empty. Non-empty labels
   * must be 1-63 characters long, and comply with [RFC1035]
   * (https://www.ietf.org/rfc/rfc1035.txt).
   * Specifically, the name must be 1-63 characters long and match the regular
   * expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first
   * character must be a lowercase letter, and all following characters must be
   * a dash, lowercase letter, or digit, except the last character, which cannot
   * be a dash.
   *
   * @generated from field: map<string, string> labels = 9;
   */
  labels: { [key: string]: string } = {};

  constructor(data?: PartialMessage<RunPipelineArgs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.RunPipelineArgs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "inputs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "outputs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "service_account", kind: "message", T: ServiceAccount },
    { no: 5, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "resources", kind: "message", T: PipelineResources },
    { no: 7, name: "logging", kind: "message", T: LoggingOptions },
    { no: 8, name: "keep_vm_alive_on_failure_duration", kind: "message", T: Duration },
    { no: 9, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunPipelineArgs {
    return new RunPipelineArgs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunPipelineArgs {
    return new RunPipelineArgs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunPipelineArgs {
    return new RunPipelineArgs().fromJsonString(jsonString, options);
  }

  static equals(a: RunPipelineArgs | PlainMessage<RunPipelineArgs> | undefined, b: RunPipelineArgs | PlainMessage<RunPipelineArgs> | undefined): boolean {
    return proto3.util.equals(RunPipelineArgs, a, b);
  }
}

/**
 * The request to run a pipeline. If `pipelineId` is specified, it
 * refers to a saved pipeline created with CreatePipeline and set as
 * the `pipelineId` of the returned Pipeline object. If
 * `ephemeralPipeline` is specified, that pipeline is run once
 * with the given args and not saved. It is an error to specify both
 * `pipelineId` and `ephemeralPipeline`. `pipelineArgs`
 * must be specified.
 *
 * @generated from message google.genomics.v1alpha2.RunPipelineRequest
 */
export class RunPipelineRequest extends Message<RunPipelineRequest> {
  /**
   * @generated from oneof google.genomics.v1alpha2.RunPipelineRequest.pipeline
   */
  pipeline: {
    /**
     * The already created pipeline to run.
     *
     * @generated from field: string pipeline_id = 1;
     */
    value: string;
    case: "pipelineId";
  } | {
    /**
     * A new pipeline object to run once and then delete.
     *
     * @generated from field: google.genomics.v1alpha2.Pipeline ephemeral_pipeline = 2;
     */
    value: Pipeline;
    case: "ephemeralPipeline";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * The arguments to use when running this pipeline.
   *
   * @generated from field: google.genomics.v1alpha2.RunPipelineArgs pipeline_args = 3;
   */
  pipelineArgs?: RunPipelineArgs;

  constructor(data?: PartialMessage<RunPipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.RunPipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipeline_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "pipeline" },
    { no: 2, name: "ephemeral_pipeline", kind: "message", T: Pipeline, oneof: "pipeline" },
    { no: 3, name: "pipeline_args", kind: "message", T: RunPipelineArgs },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunPipelineRequest {
    return new RunPipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunPipelineRequest {
    return new RunPipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunPipelineRequest {
    return new RunPipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RunPipelineRequest | PlainMessage<RunPipelineRequest> | undefined, b: RunPipelineRequest | PlainMessage<RunPipelineRequest> | undefined): boolean {
    return proto3.util.equals(RunPipelineRequest, a, b);
  }
}

/**
 * A request to get a saved pipeline by id.
 *
 * @generated from message google.genomics.v1alpha2.GetPipelineRequest
 */
export class GetPipelineRequest extends Message<GetPipelineRequest> {
  /**
   * Caller must have READ access to the project in which this pipeline
   * is defined.
   *
   * @generated from field: string pipeline_id = 1;
   */
  pipelineId = "";

  constructor(data?: PartialMessage<GetPipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.GetPipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipeline_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPipelineRequest {
    return new GetPipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPipelineRequest {
    return new GetPipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPipelineRequest {
    return new GetPipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPipelineRequest | PlainMessage<GetPipelineRequest> | undefined, b: GetPipelineRequest | PlainMessage<GetPipelineRequest> | undefined): boolean {
    return proto3.util.equals(GetPipelineRequest, a, b);
  }
}

/**
 * A request to list pipelines in a given project. Pipelines can be
 * filtered by name using `namePrefix`: all pipelines with names that
 * begin with `namePrefix` will be returned. Uses standard pagination:
 * `pageSize` indicates how many pipelines to return, and
 * `pageToken` comes from a previous ListPipelinesResponse to
 * indicate offset.
 *
 * @generated from message google.genomics.v1alpha2.ListPipelinesRequest
 */
export class ListPipelinesRequest extends Message<ListPipelinesRequest> {
  /**
   * Required. The name of the project to search for pipelines. Caller
   * must have READ access to this project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * Pipelines with names that match this prefix should be
   * returned.  If unspecified, all pipelines in the project, up to
   * `pageSize`, will be returned.
   *
   * @generated from field: string name_prefix = 2;
   */
  namePrefix = "";

  /**
   * Number of pipelines to return at once. Defaults to 256, and max
   * is 2048.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  /**
   * Token to use to indicate where to start getting results.
   * If unspecified, returns the first page of results.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListPipelinesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.ListPipelinesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPipelinesRequest {
    return new ListPipelinesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPipelinesRequest {
    return new ListPipelinesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPipelinesRequest {
    return new ListPipelinesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPipelinesRequest | PlainMessage<ListPipelinesRequest> | undefined, b: ListPipelinesRequest | PlainMessage<ListPipelinesRequest> | undefined): boolean {
    return proto3.util.equals(ListPipelinesRequest, a, b);
  }
}

/**
 * The response of ListPipelines. Contains at most `pageSize`
 * pipelines. If it contains `pageSize` pipelines, and more pipelines
 * exist, then `nextPageToken` will be populated and should be
 * used as the `pageToken` argument to a subsequent ListPipelines
 * request.
 *
 * @generated from message google.genomics.v1alpha2.ListPipelinesResponse
 */
export class ListPipelinesResponse extends Message<ListPipelinesResponse> {
  /**
   * The matched pipelines.
   *
   * @generated from field: repeated google.genomics.v1alpha2.Pipeline pipelines = 1;
   */
  pipelines: Pipeline[] = [];

  /**
   * The token to use to get the next page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListPipelinesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.ListPipelinesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipelines", kind: "message", T: Pipeline, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPipelinesResponse {
    return new ListPipelinesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPipelinesResponse {
    return new ListPipelinesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPipelinesResponse {
    return new ListPipelinesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPipelinesResponse | PlainMessage<ListPipelinesResponse> | undefined, b: ListPipelinesResponse | PlainMessage<ListPipelinesResponse> | undefined): boolean {
    return proto3.util.equals(ListPipelinesResponse, a, b);
  }
}

/**
 * The request to delete a saved pipeline by ID.
 *
 * @generated from message google.genomics.v1alpha2.DeletePipelineRequest
 */
export class DeletePipelineRequest extends Message<DeletePipelineRequest> {
  /**
   * Caller must have WRITE access to the project in which this pipeline
   * is defined.
   *
   * @generated from field: string pipeline_id = 1;
   */
  pipelineId = "";

  constructor(data?: PartialMessage<DeletePipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.DeletePipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipeline_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePipelineRequest {
    return new DeletePipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePipelineRequest {
    return new DeletePipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePipelineRequest {
    return new DeletePipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePipelineRequest | PlainMessage<DeletePipelineRequest> | undefined, b: DeletePipelineRequest | PlainMessage<DeletePipelineRequest> | undefined): boolean {
    return proto3.util.equals(DeletePipelineRequest, a, b);
  }
}

/**
 * Request to get controller configuation.  Should only be used
 * by VMs created by the Pipelines Service and not by end users.
 *
 * @generated from message google.genomics.v1alpha2.GetControllerConfigRequest
 */
export class GetControllerConfigRequest extends Message<GetControllerConfigRequest> {
  /**
   * The operation to retrieve controller configuration for.
   *
   * @generated from field: string operation_id = 1;
   */
  operationId = "";

  /**
   * @generated from field: uint64 validation_token = 2;
   */
  validationToken = protoInt64.zero;

  constructor(data?: PartialMessage<GetControllerConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.GetControllerConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validation_token", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetControllerConfigRequest {
    return new GetControllerConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetControllerConfigRequest {
    return new GetControllerConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetControllerConfigRequest {
    return new GetControllerConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetControllerConfigRequest | PlainMessage<GetControllerConfigRequest> | undefined, b: GetControllerConfigRequest | PlainMessage<GetControllerConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetControllerConfigRequest, a, b);
  }
}

/**
 * Stores the information that the controller will fetch from the
 * server in order to run. Should only be used by VMs created by the
 * Pipelines Service and not by end users.
 *
 * @generated from message google.genomics.v1alpha2.ControllerConfig
 */
export class ControllerConfig extends Message<ControllerConfig> {
  /**
   * @generated from field: string image = 1;
   */
  image = "";

  /**
   * @generated from field: string cmd = 2;
   */
  cmd = "";

  /**
   * @generated from field: string gcs_log_path = 3;
   */
  gcsLogPath = "";

  /**
   * @generated from field: string machine_type = 4;
   */
  machineType = "";

  /**
   * @generated from field: map<string, string> vars = 5;
   */
  vars: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> disks = 6;
   */
  disks: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sources = 7;
   */
  gcsSources: { [key: string]: ControllerConfig_RepeatedString } = {};

  /**
   * @generated from field: map<string, google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sinks = 8;
   */
  gcsSinks: { [key: string]: ControllerConfig_RepeatedString } = {};

  constructor(data?: PartialMessage<ControllerConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.ControllerConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cmd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gcs_log_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "machine_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "vars", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "disks", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "gcs_sources", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ControllerConfig_RepeatedString} },
    { no: 8, name: "gcs_sinks", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ControllerConfig_RepeatedString} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ControllerConfig {
    return new ControllerConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ControllerConfig {
    return new ControllerConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ControllerConfig {
    return new ControllerConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ControllerConfig | PlainMessage<ControllerConfig> | undefined, b: ControllerConfig | PlainMessage<ControllerConfig> | undefined): boolean {
    return proto3.util.equals(ControllerConfig, a, b);
  }
}

/**
 * @generated from message google.genomics.v1alpha2.ControllerConfig.RepeatedString
 */
export class ControllerConfig_RepeatedString extends Message<ControllerConfig_RepeatedString> {
  /**
   * @generated from field: repeated string values = 1;
   */
  values: string[] = [];

  constructor(data?: PartialMessage<ControllerConfig_RepeatedString>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.ControllerConfig.RepeatedString";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ControllerConfig_RepeatedString {
    return new ControllerConfig_RepeatedString().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ControllerConfig_RepeatedString {
    return new ControllerConfig_RepeatedString().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ControllerConfig_RepeatedString {
    return new ControllerConfig_RepeatedString().fromJsonString(jsonString, options);
  }

  static equals(a: ControllerConfig_RepeatedString | PlainMessage<ControllerConfig_RepeatedString> | undefined, b: ControllerConfig_RepeatedString | PlainMessage<ControllerConfig_RepeatedString> | undefined): boolean {
    return proto3.util.equals(ControllerConfig_RepeatedString, a, b);
  }
}

/**
 * Stores the list of events and times they occured for major events in job
 * execution.
 *
 * @generated from message google.genomics.v1alpha2.TimestampEvent
 */
export class TimestampEvent extends Message<TimestampEvent> {
  /**
   * String indicating the type of event
   *
   * @generated from field: string description = 1;
   */
  description = "";

  /**
   * The time this event occured.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<TimestampEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.TimestampEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimestampEvent {
    return new TimestampEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimestampEvent {
    return new TimestampEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimestampEvent {
    return new TimestampEvent().fromJsonString(jsonString, options);
  }

  static equals(a: TimestampEvent | PlainMessage<TimestampEvent> | undefined, b: TimestampEvent | PlainMessage<TimestampEvent> | undefined): boolean {
    return proto3.util.equals(TimestampEvent, a, b);
  }
}

/**
 * Request to set operation status. Should only be used by VMs
 * created by the Pipelines Service and not by end users.
 *
 * @generated from message google.genomics.v1alpha2.SetOperationStatusRequest
 */
export class SetOperationStatusRequest extends Message<SetOperationStatusRequest> {
  /**
   * @generated from field: string operation_id = 1;
   */
  operationId = "";

  /**
   * @generated from field: repeated google.genomics.v1alpha2.TimestampEvent timestamp_events = 2;
   */
  timestampEvents: TimestampEvent[] = [];

  /**
   * @generated from field: google.rpc.Code error_code = 3;
   */
  errorCode = Code.OK;

  /**
   * @generated from field: string error_message = 4;
   */
  errorMessage = "";

  /**
   * @generated from field: uint64 validation_token = 5;
   */
  validationToken = protoInt64.zero;

  constructor(data?: PartialMessage<SetOperationStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.SetOperationStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp_events", kind: "message", T: TimestampEvent, repeated: true },
    { no: 3, name: "error_code", kind: "enum", T: proto3.getEnumType(Code) },
    { no: 4, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "validation_token", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetOperationStatusRequest {
    return new SetOperationStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetOperationStatusRequest {
    return new SetOperationStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetOperationStatusRequest {
    return new SetOperationStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetOperationStatusRequest | PlainMessage<SetOperationStatusRequest> | undefined, b: SetOperationStatusRequest | PlainMessage<SetOperationStatusRequest> | undefined): boolean {
    return proto3.util.equals(SetOperationStatusRequest, a, b);
  }
}

/**
 * A Google Cloud Service Account.
 *
 * @generated from message google.genomics.v1alpha2.ServiceAccount
 */
export class ServiceAccount extends Message<ServiceAccount> {
  /**
   * Email address of the service account. Defaults to `default`,
   * which uses the compute service account associated with the project.
   *
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * List of scopes to be enabled for this service account on the VM.
   * The following scopes are automatically included:
   *
   * * https://www.googleapis.com/auth/compute
   * * https://www.googleapis.com/auth/devstorage.full_control
   * * https://www.googleapis.com/auth/genomics
   * * https://www.googleapis.com/auth/logging.write
   * * https://www.googleapis.com/auth/monitoring.write
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[] = [];

  constructor(data?: PartialMessage<ServiceAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.ServiceAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceAccount {
    return new ServiceAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceAccount {
    return new ServiceAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceAccount {
    return new ServiceAccount().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceAccount | PlainMessage<ServiceAccount> | undefined, b: ServiceAccount | PlainMessage<ServiceAccount> | undefined): boolean {
    return proto3.util.equals(ServiceAccount, a, b);
  }
}

/**
 * The logging options for the pipeline run.
 *
 * @generated from message google.genomics.v1alpha2.LoggingOptions
 */
export class LoggingOptions extends Message<LoggingOptions> {
  /**
   * The location in Google Cloud Storage to which the pipeline logs
   * will be copied. Can be specified as a fully qualified directory
   * path, in which case logs will be output with a unique identifier
   * as the filename in that directory, or as a fully specified path,
   * which must end in `.log`, in which case that path will be
   * used, and the user must ensure that logs are not
   * overwritten. Stdout and stderr logs from the run are also
   * generated and output as `-stdout.log` and `-stderr.log`.
   *
   * @generated from field: string gcs_path = 1;
   */
  gcsPath = "";

  constructor(data?: PartialMessage<LoggingOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.LoggingOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gcs_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoggingOptions {
    return new LoggingOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoggingOptions {
    return new LoggingOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoggingOptions {
    return new LoggingOptions().fromJsonString(jsonString, options);
  }

  static equals(a: LoggingOptions | PlainMessage<LoggingOptions> | undefined, b: LoggingOptions | PlainMessage<LoggingOptions> | undefined): boolean {
    return proto3.util.equals(LoggingOptions, a, b);
  }
}

/**
 * The system resources for the pipeline run.
 *
 * @generated from message google.genomics.v1alpha2.PipelineResources
 */
export class PipelineResources extends Message<PipelineResources> {
  /**
   * The minimum number of cores to use. Defaults to 1.
   *
   * @generated from field: int32 minimum_cpu_cores = 1;
   */
  minimumCpuCores = 0;

  /**
   * Whether to use preemptible VMs. Defaults to `false`. In order to use this,
   * must be true for both create time and run time. Cannot be true at run time
   * if false at create time.
   *
   * @generated from field: bool preemptible = 2;
   */
  preemptible = false;

  /**
   * The minimum amount of RAM to use. Defaults to 3.75 (GB)
   *
   * @generated from field: double minimum_ram_gb = 3;
   */
  minimumRamGb = 0;

  /**
   * Disks to attach.
   *
   * @generated from field: repeated google.genomics.v1alpha2.PipelineResources.Disk disks = 4;
   */
  disks: PipelineResources_Disk[] = [];

  /**
   * List of Google Compute Engine availability zones to which resource
   * creation will restricted. If empty, any zone may be chosen.
   *
   * @generated from field: repeated string zones = 5;
   */
  zones: string[] = [];

  /**
   * The size of the boot disk. Defaults to 10 (GB).
   *
   * @generated from field: int32 boot_disk_size_gb = 6;
   */
  bootDiskSizeGb = 0;

  /**
   * Whether to assign an external IP to the instance. This is an experimental
   * feature that may go away. Defaults to false.
   * Corresponds to `--no_address` flag for [gcloud compute instances create]
   * (https://cloud.google.com/sdk/gcloud/reference/compute/instances/create).
   * In order to use this, must be true for both create time and run time.
   * Cannot be true at run time if false at create time. If you need to ssh into
   * a private IP VM for debugging, you can ssh to a public VM and then ssh into
   * the private VM's Internal IP.  If noAddress is set, this pipeline run may
   * only load docker images from Google Container Registry and not Docker Hub.
   * ** Note: To use this option, your project must be in Google Access for
   * Private IPs Early Access Program.**
   *
   * @generated from field: bool no_address = 7;
   */
  noAddress = false;

  constructor(data?: PartialMessage<PipelineResources>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.PipelineResources";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "minimum_cpu_cores", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "preemptible", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "minimum_ram_gb", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "disks", kind: "message", T: PipelineResources_Disk, repeated: true },
    { no: 5, name: "zones", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "boot_disk_size_gb", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "no_address", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PipelineResources {
    return new PipelineResources().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PipelineResources {
    return new PipelineResources().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PipelineResources {
    return new PipelineResources().fromJsonString(jsonString, options);
  }

  static equals(a: PipelineResources | PlainMessage<PipelineResources> | undefined, b: PipelineResources | PlainMessage<PipelineResources> | undefined): boolean {
    return proto3.util.equals(PipelineResources, a, b);
  }
}

/**
 * A Google Compute Engine disk resource specification.
 *
 * @generated from message google.genomics.v1alpha2.PipelineResources.Disk
 */
export class PipelineResources_Disk extends Message<PipelineResources_Disk> {
  /**
   * Required. The name of the disk that can be used in the pipeline
   * parameters. Must be 1 - 63 characters.
   * The name "boot" is reserved for system use.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Required. The type of the disk to create.
   *
   * @generated from field: google.genomics.v1alpha2.PipelineResources.Disk.Type type = 2;
   */
  type = PipelineResources_Disk_Type.TYPE_UNSPECIFIED;

  /**
   * The size of the disk. Defaults to 500 (GB).
   * This field is not applicable for local SSD.
   *
   * @generated from field: int32 size_gb = 3;
   */
  sizeGb = 0;

  /**
   * The full or partial URL of the persistent disk to attach. See
   * https://cloud.google.com/compute/docs/reference/latest/instances#resource
   * and
   * https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots
   * for more details.
   *
   * @generated from field: string source = 4;
   */
  source = "";

  /**
   * Deprecated. Disks created by the Pipelines API will be deleted at the end
   * of the pipeline run, regardless of what this field is set to.
   *
   * @generated from field: bool auto_delete = 6;
   */
  autoDelete = false;

  /**
   * Required at create time and cannot be overridden at run time.
   * Specifies the path in the docker container where files on
   * this disk should be located. For example, if `mountPoint`
   * is `/mnt/disk`, and the parameter has `localPath`
   * `inputs/file.txt`, the docker container can access the data at
   * `/mnt/disk/inputs/file.txt`.
   *
   * @generated from field: string mount_point = 8;
   */
  mountPoint = "";

  constructor(data?: PartialMessage<PipelineResources_Disk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.PipelineResources.Disk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(PipelineResources_Disk_Type) },
    { no: 3, name: "size_gb", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "auto_delete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "mount_point", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PipelineResources_Disk {
    return new PipelineResources_Disk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PipelineResources_Disk {
    return new PipelineResources_Disk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PipelineResources_Disk {
    return new PipelineResources_Disk().fromJsonString(jsonString, options);
  }

  static equals(a: PipelineResources_Disk | PlainMessage<PipelineResources_Disk> | undefined, b: PipelineResources_Disk | PlainMessage<PipelineResources_Disk> | undefined): boolean {
    return proto3.util.equals(PipelineResources_Disk, a, b);
  }
}

/**
 * The types of disks that may be attached to VMs.
 *
 * @generated from enum google.genomics.v1alpha2.PipelineResources.Disk.Type
 */
export enum PipelineResources_Disk_Type {
  /**
   * Default disk type. Use one of the other options below.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Specifies a Google Compute Engine persistent hard disk. See
   * https://cloud.google.com/compute/docs/disks/#pdspecs for details.
   *
   * @generated from enum value: PERSISTENT_HDD = 1;
   */
  PERSISTENT_HDD = 1,

  /**
   * Specifies a Google Compute Engine persistent solid-state disk. See
   * https://cloud.google.com/compute/docs/disks/#pdspecs for details.
   *
   * @generated from enum value: PERSISTENT_SSD = 2;
   */
  PERSISTENT_SSD = 2,

  /**
   * Specifies a Google Compute Engine local SSD.
   * See https://cloud.google.com/compute/docs/disks/local-ssd for details.
   *
   * @generated from enum value: LOCAL_SSD = 3;
   */
  LOCAL_SSD = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PipelineResources_Disk_Type)
proto3.util.setEnumType(PipelineResources_Disk_Type, "google.genomics.v1alpha2.PipelineResources.Disk.Type", [
  { no: 0, name: "TYPE_UNSPECIFIED" },
  { no: 1, name: "PERSISTENT_HDD" },
  { no: 2, name: "PERSISTENT_SSD" },
  { no: 3, name: "LOCAL_SSD" },
]);

/**
 * Parameters facilitate setting and delivering data into the
 * pipeline's execution environment. They are defined at create time,
 * with optional defaults, and can be overridden at run time.
 *
 * If `localCopy` is unset, then the parameter specifies a string that
 * is passed as-is into the pipeline, as the value of the environment
 * variable with the given name.  A default value can be optionally
 * specified at create time. The default can be overridden at run time
 * using the inputs map. If no default is given, a value must be
 * supplied at runtime.
 *
 * If `localCopy` is defined, then the parameter specifies a data
 * source or sink, both in Google Cloud Storage and on the Docker container
 * where the pipeline computation is run. The [service account associated with
 * the Pipeline][google.genomics.v1alpha2.RunPipelineArgs.service_account] (by
 * default the project's Compute Engine service account) must have access to the
 * Google Cloud Storage paths.
 *
 * At run time, the Google Cloud Storage paths can be overridden if a default
 * was provided at create time, or must be set otherwise. The pipeline runner
 * should add a key/value pair to either the inputs or outputs map. The
 * indicated data copies will be carried out before/after pipeline execution,
 * just as if the corresponding arguments were provided to `gsutil cp`.
 *
 * For example: Given the following `PipelineParameter`, specified
 * in the `inputParameters` list:
 *
 * ```
 * {name: "input_file", localCopy: {path: "file.txt", disk: "pd1"}}
 * ```
 *
 * where `disk` is defined in the `PipelineResources` object as:
 *
 * ```
 * {name: "pd1", mountPoint: "/mnt/disk/"}
 * ```
 *
 * We create a disk named `pd1`, mount it on the host VM, and map
 * `/mnt/pd1` to `/mnt/disk` in the docker container.  At
 * runtime, an entry for `input_file` would be required in the inputs
 * map, such as:
 *
 * ```
 *   inputs["input_file"] = "gs://my-bucket/bar.txt"
 * ```
 *
 * This would generate the following gsutil call:
 *
 * ```
 *   gsutil cp gs://my-bucket/bar.txt /mnt/pd1/file.txt
 * ```
 *
 * The file `/mnt/pd1/file.txt` maps to `/mnt/disk/file.txt` in the
 * Docker container. Acceptable paths are:
 *
 * <table>
 *   <thead>
 *     <tr><th>Google Cloud storage path</th><th>Local path</th></tr>
 *   </thead>
 *   <tbody>
 *     <tr><td>file</td><td>file</td></tr>
 *     <tr><td>glob</td><td>directory</td></tr>
 *   </tbody>
 * </table>
 *
 * For outputs, the direction of the copy is reversed:
 *
 * ```
 *   gsutil cp /mnt/disk/file.txt gs://my-bucket/bar.txt
 * ```
 *
 * Acceptable paths are:
 *
 * <table>
 *   <thead>
 *     <tr><th>Local path</th><th>Google Cloud Storage path</th></tr>
 *   </thead>
 *   <tbody>
 *     <tr><td>file</td><td>file</td></tr>
 *     <tr>
 *       <td>file</td>
 *       <td>directory - directory must already exist</td>
 *     </tr>
 *     <tr>
 *       <td>glob</td>
 *       <td>directory - directory will be created if it doesn't exist</td></tr>
 *   </tbody>
 * </table>
 *
 * One restriction due to docker limitations, is that for outputs that are found
 * on the boot disk, the local path cannot be a glob and must be a file.
 *
 * @generated from message google.genomics.v1alpha2.PipelineParameter
 */
export class PipelineParameter extends Message<PipelineParameter> {
  /**
   * Required. Name of the parameter - the pipeline runner uses this string
   * as the key to the input and output maps in RunPipeline.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Human-readable description.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * The default value for this parameter. Can be overridden at runtime.
   * If `localCopy` is present, then this must be a Google Cloud Storage path
   * beginning with `gs://`.
   *
   * @generated from field: string default_value = 5;
   */
  defaultValue = "";

  /**
   * If present, this parameter is marked for copying to and from the VM.
   * `LocalCopy` indicates where on the VM the file should be. The value
   * given to this parameter (either at runtime or using `defaultValue`)
   * must be the remote path where the file should be.
   *
   * @generated from field: google.genomics.v1alpha2.PipelineParameter.LocalCopy local_copy = 6;
   */
  localCopy?: PipelineParameter_LocalCopy;

  constructor(data?: PartialMessage<PipelineParameter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.PipelineParameter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "default_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "local_copy", kind: "message", T: PipelineParameter_LocalCopy },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PipelineParameter {
    return new PipelineParameter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PipelineParameter {
    return new PipelineParameter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PipelineParameter {
    return new PipelineParameter().fromJsonString(jsonString, options);
  }

  static equals(a: PipelineParameter | PlainMessage<PipelineParameter> | undefined, b: PipelineParameter | PlainMessage<PipelineParameter> | undefined): boolean {
    return proto3.util.equals(PipelineParameter, a, b);
  }
}

/**
 * LocalCopy defines how a remote file should be copied to and from the VM.
 *
 * @generated from message google.genomics.v1alpha2.PipelineParameter.LocalCopy
 */
export class PipelineParameter_LocalCopy extends Message<PipelineParameter_LocalCopy> {
  /**
   * Required. The path within the user's docker container where
   * this input should be localized to and from, relative to the specified
   * disk's mount point. For example: file.txt,
   *
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * Required. The name of the disk where this parameter is
   * located. Can be the name of one of the disks specified in the
   * Resources field, or "boot", which represents the Docker
   * instance's boot disk and has a mount point of `/`.
   *
   * @generated from field: string disk = 2;
   */
  disk = "";

  constructor(data?: PartialMessage<PipelineParameter_LocalCopy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.PipelineParameter.LocalCopy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "disk", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PipelineParameter_LocalCopy {
    return new PipelineParameter_LocalCopy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PipelineParameter_LocalCopy {
    return new PipelineParameter_LocalCopy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PipelineParameter_LocalCopy {
    return new PipelineParameter_LocalCopy().fromJsonString(jsonString, options);
  }

  static equals(a: PipelineParameter_LocalCopy | PlainMessage<PipelineParameter_LocalCopy> | undefined, b: PipelineParameter_LocalCopy | PlainMessage<PipelineParameter_LocalCopy> | undefined): boolean {
    return proto3.util.equals(PipelineParameter_LocalCopy, a, b);
  }
}

/**
 * The Docker execuctor specification.
 *
 * @generated from message google.genomics.v1alpha2.DockerExecutor
 */
export class DockerExecutor extends Message<DockerExecutor> {
  /**
   * Required. Image name from either Docker Hub or Google Container Registry.
   * Users that run pipelines must have READ access to the image.
   *
   * @generated from field: string image_name = 1;
   */
  imageName = "";

  /**
   * Required. The command or newline delimited script to run. The command
   * string will be executed within a bash shell.
   *
   * If the command exits with a non-zero exit code, output parameter
   * de-localization will be skipped and the pipeline operation's
   * [`error`][google.longrunning.Operation.error] field will be populated.
   *
   * Maximum command string length is 16384.
   *
   * @generated from field: string cmd = 2;
   */
  cmd = "";

  constructor(data?: PartialMessage<DockerExecutor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.genomics.v1alpha2.DockerExecutor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cmd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DockerExecutor {
    return new DockerExecutor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DockerExecutor {
    return new DockerExecutor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DockerExecutor {
    return new DockerExecutor().fromJsonString(jsonString, options);
  }

  static equals(a: DockerExecutor | PlainMessage<DockerExecutor> | undefined, b: DockerExecutor | PlainMessage<DockerExecutor> | undefined): boolean {
    return proto3.util.equals(DockerExecutor, a, b);
  }
}

