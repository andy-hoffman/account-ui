// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/datastore/v1beta3/query.proto (package google.datastore.v1beta3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Int32Value, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Entity, Value } from "./entity_pb.js";

/**
 * The result of fetching an entity from Datastore.
 *
 * @generated from message google.datastore.v1beta3.EntityResult
 */
export class EntityResult extends Message<EntityResult> {
  /**
   * The resulting entity.
   *
   * @generated from field: google.datastore.v1beta3.Entity entity = 1;
   */
  entity?: Entity;

  /**
   * The version of the entity, a strictly positive number that monotonically
   * increases with changes to the entity.
   *
   * This field is set for [`FULL`][google.datastore.v1beta3.EntityResult.ResultType.FULL] entity
   * results.
   *
   * For [missing][google.datastore.v1beta3.LookupResponse.missing] entities in `LookupResponse`, this
   * is the version of the snapshot that was used to look up the entity, and it
   * is always set except for eventually consistent reads.
   *
   * @generated from field: int64 version = 4;
   */
  version = protoInt64.zero;

  /**
   * A cursor that points to the position after the result entity.
   * Set only when the `EntityResult` is part of a `QueryResultBatch` message.
   *
   * @generated from field: bytes cursor = 3;
   */
  cursor = new Uint8Array(0);

  constructor(data?: PartialMessage<EntityResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.v1beta3.EntityResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity", kind: "message", T: Entity },
    { no: 4, name: "version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityResult {
    return new EntityResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityResult {
    return new EntityResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityResult {
    return new EntityResult().fromJsonString(jsonString, options);
  }

  static equals(a: EntityResult | PlainMessage<EntityResult> | undefined, b: EntityResult | PlainMessage<EntityResult> | undefined): boolean {
    return proto3.util.equals(EntityResult, a, b);
  }
}

/**
 * Specifies what data the 'entity' field contains.
 * A `ResultType` is either implied (for example, in `LookupResponse.missing`
 * from `datastore.proto`, it is always `KEY_ONLY`) or specified by context
 * (for example, in message `QueryResultBatch`, field `entity_result_type`
 * specifies a `ResultType` for all the values in field `entity_results`).
 *
 * @generated from enum google.datastore.v1beta3.EntityResult.ResultType
 */
export enum EntityResult_ResultType {
  /**
   * Unspecified. This value is never used.
   *
   * @generated from enum value: RESULT_TYPE_UNSPECIFIED = 0;
   */
  RESULT_TYPE_UNSPECIFIED = 0,

  /**
   * The key and properties.
   *
   * @generated from enum value: FULL = 1;
   */
  FULL = 1,

  /**
   * A projected subset of properties. The entity may have no key.
   *
   * @generated from enum value: PROJECTION = 2;
   */
  PROJECTION = 2,

  /**
   * Only the key.
   *
   * @generated from enum value: KEY_ONLY = 3;
   */
  KEY_ONLY = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(EntityResult_ResultType)
proto3.util.setEnumType(EntityResult_ResultType, "google.datastore.v1beta3.EntityResult.ResultType", [
  { no: 0, name: "RESULT_TYPE_UNSPECIFIED" },
  { no: 1, name: "FULL" },
  { no: 2, name: "PROJECTION" },
  { no: 3, name: "KEY_ONLY" },
]);

/**
 * A query for entities.
 *
 * @generated from message google.datastore.v1beta3.Query
 */
export class Query extends Message<Query> {
  /**
   * The projection to return. Defaults to returning all properties.
   *
   * @generated from field: repeated google.datastore.v1beta3.Projection projection = 2;
   */
  projection: Projection[] = [];

  /**
   * The kinds to query (if empty, returns entities of all kinds).
   * Currently at most 1 kind may be specified.
   *
   * @generated from field: repeated google.datastore.v1beta3.KindExpression kind = 3;
   */
  kind: KindExpression[] = [];

  /**
   * The filter to apply.
   *
   * @generated from field: google.datastore.v1beta3.Filter filter = 4;
   */
  filter?: Filter;

  /**
   * The order to apply to the query results (if empty, order is unspecified).
   *
   * @generated from field: repeated google.datastore.v1beta3.PropertyOrder order = 5;
   */
  order: PropertyOrder[] = [];

  /**
   * The properties to make distinct. The query results will contain the first
   * result for each distinct combination of values for the given properties
   * (if empty, all results are returned).
   *
   * @generated from field: repeated google.datastore.v1beta3.PropertyReference distinct_on = 6;
   */
  distinctOn: PropertyReference[] = [];

  /**
   * A starting point for the query results. Query cursors are
   * returned in query result batches and
   * [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
   *
   * @generated from field: bytes start_cursor = 7;
   */
  startCursor = new Uint8Array(0);

  /**
   * An ending point for the query results. Query cursors are
   * returned in query result batches and
   * [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
   *
   * @generated from field: bytes end_cursor = 8;
   */
  endCursor = new Uint8Array(0);

  /**
   * The number of results to skip. Applies before limit, but after all other
   * constraints. Optional. Must be >= 0 if specified.
   *
   * @generated from field: int32 offset = 10;
   */
  offset = 0;

  /**
   * The maximum number of results to return. Applies after all other
   * constraints. Optional.
   * Unspecified is interpreted as no limit.
   * Must be >= 0 if specified.
   *
   * @generated from field: google.protobuf.Int32Value limit = 12;
   */
  limit?: number;

  constructor(data?: PartialMessage<Query>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.v1beta3.Query";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "projection", kind: "message", T: Projection, repeated: true },
    { no: 3, name: "kind", kind: "message", T: KindExpression, repeated: true },
    { no: 4, name: "filter", kind: "message", T: Filter },
    { no: 5, name: "order", kind: "message", T: PropertyOrder, repeated: true },
    { no: 6, name: "distinct_on", kind: "message", T: PropertyReference, repeated: true },
    { no: 7, name: "start_cursor", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "end_cursor", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 10, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "limit", kind: "message", T: Int32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Query {
    return new Query().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Query {
    return new Query().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Query {
    return new Query().fromJsonString(jsonString, options);
  }

  static equals(a: Query | PlainMessage<Query> | undefined, b: Query | PlainMessage<Query> | undefined): boolean {
    return proto3.util.equals(Query, a, b);
  }
}

/**
 * A representation of a kind.
 *
 * @generated from message google.datastore.v1beta3.KindExpression
 */
export class KindExpression extends Message<KindExpression> {
  /**
   * The name of the kind.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<KindExpression>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.v1beta3.KindExpression";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KindExpression {
    return new KindExpression().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KindExpression {
    return new KindExpression().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KindExpression {
    return new KindExpression().fromJsonString(jsonString, options);
  }

  static equals(a: KindExpression | PlainMessage<KindExpression> | undefined, b: KindExpression | PlainMessage<KindExpression> | undefined): boolean {
    return proto3.util.equals(KindExpression, a, b);
  }
}

/**
 * A reference to a property relative to the kind expressions.
 *
 * @generated from message google.datastore.v1beta3.PropertyReference
 */
export class PropertyReference extends Message<PropertyReference> {
  /**
   * The name of the property.
   * If name includes "."s, it may be interpreted as a property name path.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<PropertyReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.v1beta3.PropertyReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PropertyReference {
    return new PropertyReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PropertyReference {
    return new PropertyReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PropertyReference {
    return new PropertyReference().fromJsonString(jsonString, options);
  }

  static equals(a: PropertyReference | PlainMessage<PropertyReference> | undefined, b: PropertyReference | PlainMessage<PropertyReference> | undefined): boolean {
    return proto3.util.equals(PropertyReference, a, b);
  }
}

/**
 * A representation of a property in a projection.
 *
 * @generated from message google.datastore.v1beta3.Projection
 */
export class Projection extends Message<Projection> {
  /**
   * The property to project.
   *
   * @generated from field: google.datastore.v1beta3.PropertyReference property = 1;
   */
  property?: PropertyReference;

  constructor(data?: PartialMessage<Projection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.v1beta3.Projection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "property", kind: "message", T: PropertyReference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Projection {
    return new Projection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Projection {
    return new Projection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Projection {
    return new Projection().fromJsonString(jsonString, options);
  }

  static equals(a: Projection | PlainMessage<Projection> | undefined, b: Projection | PlainMessage<Projection> | undefined): boolean {
    return proto3.util.equals(Projection, a, b);
  }
}

/**
 * The desired order for a specific property.
 *
 * @generated from message google.datastore.v1beta3.PropertyOrder
 */
export class PropertyOrder extends Message<PropertyOrder> {
  /**
   * The property to order by.
   *
   * @generated from field: google.datastore.v1beta3.PropertyReference property = 1;
   */
  property?: PropertyReference;

  /**
   * The direction to order by. Defaults to `ASCENDING`.
   *
   * @generated from field: google.datastore.v1beta3.PropertyOrder.Direction direction = 2;
   */
  direction = PropertyOrder_Direction.DIRECTION_UNSPECIFIED;

  constructor(data?: PartialMessage<PropertyOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.v1beta3.PropertyOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "property", kind: "message", T: PropertyReference },
    { no: 2, name: "direction", kind: "enum", T: proto3.getEnumType(PropertyOrder_Direction) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PropertyOrder {
    return new PropertyOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PropertyOrder {
    return new PropertyOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PropertyOrder {
    return new PropertyOrder().fromJsonString(jsonString, options);
  }

  static equals(a: PropertyOrder | PlainMessage<PropertyOrder> | undefined, b: PropertyOrder | PlainMessage<PropertyOrder> | undefined): boolean {
    return proto3.util.equals(PropertyOrder, a, b);
  }
}

/**
 * The sort direction.
 *
 * @generated from enum google.datastore.v1beta3.PropertyOrder.Direction
 */
export enum PropertyOrder_Direction {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: DIRECTION_UNSPECIFIED = 0;
   */
  DIRECTION_UNSPECIFIED = 0,

  /**
   * Ascending.
   *
   * @generated from enum value: ASCENDING = 1;
   */
  ASCENDING = 1,

  /**
   * Descending.
   *
   * @generated from enum value: DESCENDING = 2;
   */
  DESCENDING = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PropertyOrder_Direction)
proto3.util.setEnumType(PropertyOrder_Direction, "google.datastore.v1beta3.PropertyOrder.Direction", [
  { no: 0, name: "DIRECTION_UNSPECIFIED" },
  { no: 1, name: "ASCENDING" },
  { no: 2, name: "DESCENDING" },
]);

/**
 * A holder for any type of filter.
 *
 * @generated from message google.datastore.v1beta3.Filter
 */
export class Filter extends Message<Filter> {
  /**
   * The type of filter.
   *
   * @generated from oneof google.datastore.v1beta3.Filter.filter_type
   */
  filterType: {
    /**
     * A composite filter.
     *
     * @generated from field: google.datastore.v1beta3.CompositeFilter composite_filter = 1;
     */
    value: CompositeFilter;
    case: "compositeFilter";
  } | {
    /**
     * A filter on a property.
     *
     * @generated from field: google.datastore.v1beta3.PropertyFilter property_filter = 2;
     */
    value: PropertyFilter;
    case: "propertyFilter";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Filter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.v1beta3.Filter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "composite_filter", kind: "message", T: CompositeFilter, oneof: "filter_type" },
    { no: 2, name: "property_filter", kind: "message", T: PropertyFilter, oneof: "filter_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Filter {
    return new Filter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Filter {
    return new Filter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Filter {
    return new Filter().fromJsonString(jsonString, options);
  }

  static equals(a: Filter | PlainMessage<Filter> | undefined, b: Filter | PlainMessage<Filter> | undefined): boolean {
    return proto3.util.equals(Filter, a, b);
  }
}

/**
 * A filter that merges multiple other filters using the given operator.
 *
 * @generated from message google.datastore.v1beta3.CompositeFilter
 */
export class CompositeFilter extends Message<CompositeFilter> {
  /**
   * The operator for combining multiple filters.
   *
   * @generated from field: google.datastore.v1beta3.CompositeFilter.Operator op = 1;
   */
  op = CompositeFilter_Operator.OPERATOR_UNSPECIFIED;

  /**
   * The list of filters to combine.
   * Must contain at least one filter.
   *
   * @generated from field: repeated google.datastore.v1beta3.Filter filters = 2;
   */
  filters: Filter[] = [];

  constructor(data?: PartialMessage<CompositeFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.v1beta3.CompositeFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "op", kind: "enum", T: proto3.getEnumType(CompositeFilter_Operator) },
    { no: 2, name: "filters", kind: "message", T: Filter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompositeFilter {
    return new CompositeFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompositeFilter {
    return new CompositeFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompositeFilter {
    return new CompositeFilter().fromJsonString(jsonString, options);
  }

  static equals(a: CompositeFilter | PlainMessage<CompositeFilter> | undefined, b: CompositeFilter | PlainMessage<CompositeFilter> | undefined): boolean {
    return proto3.util.equals(CompositeFilter, a, b);
  }
}

/**
 * A composite filter operator.
 *
 * @generated from enum google.datastore.v1beta3.CompositeFilter.Operator
 */
export enum CompositeFilter_Operator {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: OPERATOR_UNSPECIFIED = 0;
   */
  OPERATOR_UNSPECIFIED = 0,

  /**
   * The results are required to satisfy each of the combined filters.
   *
   * @generated from enum value: AND = 1;
   */
  AND = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(CompositeFilter_Operator)
proto3.util.setEnumType(CompositeFilter_Operator, "google.datastore.v1beta3.CompositeFilter.Operator", [
  { no: 0, name: "OPERATOR_UNSPECIFIED" },
  { no: 1, name: "AND" },
]);

/**
 * A filter on a specific property.
 *
 * @generated from message google.datastore.v1beta3.PropertyFilter
 */
export class PropertyFilter extends Message<PropertyFilter> {
  /**
   * The property to filter by.
   *
   * @generated from field: google.datastore.v1beta3.PropertyReference property = 1;
   */
  property?: PropertyReference;

  /**
   * The operator to filter by.
   *
   * @generated from field: google.datastore.v1beta3.PropertyFilter.Operator op = 2;
   */
  op = PropertyFilter_Operator.OPERATOR_UNSPECIFIED;

  /**
   * The value to compare the property to.
   *
   * @generated from field: google.datastore.v1beta3.Value value = 3;
   */
  value?: Value;

  constructor(data?: PartialMessage<PropertyFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.v1beta3.PropertyFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "property", kind: "message", T: PropertyReference },
    { no: 2, name: "op", kind: "enum", T: proto3.getEnumType(PropertyFilter_Operator) },
    { no: 3, name: "value", kind: "message", T: Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PropertyFilter {
    return new PropertyFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PropertyFilter {
    return new PropertyFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PropertyFilter {
    return new PropertyFilter().fromJsonString(jsonString, options);
  }

  static equals(a: PropertyFilter | PlainMessage<PropertyFilter> | undefined, b: PropertyFilter | PlainMessage<PropertyFilter> | undefined): boolean {
    return proto3.util.equals(PropertyFilter, a, b);
  }
}

/**
 * A property filter operator.
 *
 * @generated from enum google.datastore.v1beta3.PropertyFilter.Operator
 */
export enum PropertyFilter_Operator {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: OPERATOR_UNSPECIFIED = 0;
   */
  OPERATOR_UNSPECIFIED = 0,

  /**
   * Less than.
   *
   * @generated from enum value: LESS_THAN = 1;
   */
  LESS_THAN = 1,

  /**
   * Less than or equal.
   *
   * @generated from enum value: LESS_THAN_OR_EQUAL = 2;
   */
  LESS_THAN_OR_EQUAL = 2,

  /**
   * Greater than.
   *
   * @generated from enum value: GREATER_THAN = 3;
   */
  GREATER_THAN = 3,

  /**
   * Greater than or equal.
   *
   * @generated from enum value: GREATER_THAN_OR_EQUAL = 4;
   */
  GREATER_THAN_OR_EQUAL = 4,

  /**
   * Equal.
   *
   * @generated from enum value: EQUAL = 5;
   */
  EQUAL = 5,

  /**
   * Has ancestor.
   *
   * @generated from enum value: HAS_ANCESTOR = 11;
   */
  HAS_ANCESTOR = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(PropertyFilter_Operator)
proto3.util.setEnumType(PropertyFilter_Operator, "google.datastore.v1beta3.PropertyFilter.Operator", [
  { no: 0, name: "OPERATOR_UNSPECIFIED" },
  { no: 1, name: "LESS_THAN" },
  { no: 2, name: "LESS_THAN_OR_EQUAL" },
  { no: 3, name: "GREATER_THAN" },
  { no: 4, name: "GREATER_THAN_OR_EQUAL" },
  { no: 5, name: "EQUAL" },
  { no: 11, name: "HAS_ANCESTOR" },
]);

/**
 * A [GQL query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
 *
 * @generated from message google.datastore.v1beta3.GqlQuery
 */
export class GqlQuery extends Message<GqlQuery> {
  /**
   * A string of the format described
   * [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
   *
   * @generated from field: string query_string = 1;
   */
  queryString = "";

  /**
   * When false, the query string must not contain any literals and instead must
   * bind all values. For example,
   * `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while
   * `SELECT * FROM Kind WHERE a = @value` is.
   *
   * @generated from field: bool allow_literals = 2;
   */
  allowLiterals = false;

  /**
   * For each non-reserved named binding site in the query string, there must be
   * a named parameter with that name, but not necessarily the inverse.
   *
   * Key must match regex `[A-Za-z_$][A-Za-z_$0-9]*`, must not match regex
   * `__.*__`, and must not be `""`.
   *
   * @generated from field: map<string, google.datastore.v1beta3.GqlQueryParameter> named_bindings = 5;
   */
  namedBindings: { [key: string]: GqlQueryParameter } = {};

  /**
   * Numbered binding site @1 references the first numbered parameter,
   * effectively using 1-based indexing, rather than the usual 0.
   *
   * For each binding site numbered i in `query_string`, there must be an i-th
   * numbered parameter. The inverse must also be true.
   *
   * @generated from field: repeated google.datastore.v1beta3.GqlQueryParameter positional_bindings = 4;
   */
  positionalBindings: GqlQueryParameter[] = [];

  constructor(data?: PartialMessage<GqlQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.v1beta3.GqlQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "allow_literals", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "named_bindings", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GqlQueryParameter} },
    { no: 4, name: "positional_bindings", kind: "message", T: GqlQueryParameter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GqlQuery {
    return new GqlQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GqlQuery {
    return new GqlQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GqlQuery {
    return new GqlQuery().fromJsonString(jsonString, options);
  }

  static equals(a: GqlQuery | PlainMessage<GqlQuery> | undefined, b: GqlQuery | PlainMessage<GqlQuery> | undefined): boolean {
    return proto3.util.equals(GqlQuery, a, b);
  }
}

/**
 * A binding parameter for a GQL query.
 *
 * @generated from message google.datastore.v1beta3.GqlQueryParameter
 */
export class GqlQueryParameter extends Message<GqlQueryParameter> {
  /**
   * The type of parameter.
   *
   * @generated from oneof google.datastore.v1beta3.GqlQueryParameter.parameter_type
   */
  parameterType: {
    /**
     * A value parameter.
     *
     * @generated from field: google.datastore.v1beta3.Value value = 2;
     */
    value: Value;
    case: "value";
  } | {
    /**
     * A query cursor. Query cursors are returned in query
     * result batches.
     *
     * @generated from field: bytes cursor = 3;
     */
    value: Uint8Array;
    case: "cursor";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GqlQueryParameter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.v1beta3.GqlQueryParameter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "value", kind: "message", T: Value, oneof: "parameter_type" },
    { no: 3, name: "cursor", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "parameter_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GqlQueryParameter {
    return new GqlQueryParameter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GqlQueryParameter {
    return new GqlQueryParameter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GqlQueryParameter {
    return new GqlQueryParameter().fromJsonString(jsonString, options);
  }

  static equals(a: GqlQueryParameter | PlainMessage<GqlQueryParameter> | undefined, b: GqlQueryParameter | PlainMessage<GqlQueryParameter> | undefined): boolean {
    return proto3.util.equals(GqlQueryParameter, a, b);
  }
}

/**
 * A batch of results produced by a query.
 *
 * @generated from message google.datastore.v1beta3.QueryResultBatch
 */
export class QueryResultBatch extends Message<QueryResultBatch> {
  /**
   * The number of results skipped, typically because of an offset.
   *
   * @generated from field: int32 skipped_results = 6;
   */
  skippedResults = 0;

  /**
   * A cursor that points to the position after the last skipped result.
   * Will be set when `skipped_results` != 0.
   *
   * @generated from field: bytes skipped_cursor = 3;
   */
  skippedCursor = new Uint8Array(0);

  /**
   * The result type for every entity in `entity_results`.
   *
   * @generated from field: google.datastore.v1beta3.EntityResult.ResultType entity_result_type = 1;
   */
  entityResultType = EntityResult_ResultType.RESULT_TYPE_UNSPECIFIED;

  /**
   * The results for this batch.
   *
   * @generated from field: repeated google.datastore.v1beta3.EntityResult entity_results = 2;
   */
  entityResults: EntityResult[] = [];

  /**
   * A cursor that points to the position after the last result in the batch.
   *
   * @generated from field: bytes end_cursor = 4;
   */
  endCursor = new Uint8Array(0);

  /**
   * The state of the query after the current batch.
   *
   * @generated from field: google.datastore.v1beta3.QueryResultBatch.MoreResultsType more_results = 5;
   */
  moreResults = QueryResultBatch_MoreResultsType.MORE_RESULTS_TYPE_UNSPECIFIED;

  /**
   * The version number of the snapshot this batch was returned from.
   * This applies to the range of results from the query's `start_cursor` (or
   * the beginning of the query if no cursor was given) to this batch's
   * `end_cursor` (not the query's `end_cursor`).
   *
   * In a single transaction, subsequent query result batches for the same query
   * can have a greater snapshot version number. Each batch's snapshot version
   * is valid for all preceding batches.
   * The value will be zero for eventually consistent queries.
   *
   * @generated from field: int64 snapshot_version = 7;
   */
  snapshotVersion = protoInt64.zero;

  constructor(data?: PartialMessage<QueryResultBatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.v1beta3.QueryResultBatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 6, name: "skipped_results", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "skipped_cursor", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 1, name: "entity_result_type", kind: "enum", T: proto3.getEnumType(EntityResult_ResultType) },
    { no: 2, name: "entity_results", kind: "message", T: EntityResult, repeated: true },
    { no: 4, name: "end_cursor", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "more_results", kind: "enum", T: proto3.getEnumType(QueryResultBatch_MoreResultsType) },
    { no: 7, name: "snapshot_version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResultBatch {
    return new QueryResultBatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResultBatch {
    return new QueryResultBatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResultBatch {
    return new QueryResultBatch().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResultBatch | PlainMessage<QueryResultBatch> | undefined, b: QueryResultBatch | PlainMessage<QueryResultBatch> | undefined): boolean {
    return proto3.util.equals(QueryResultBatch, a, b);
  }
}

/**
 * The possible values for the `more_results` field.
 *
 * @generated from enum google.datastore.v1beta3.QueryResultBatch.MoreResultsType
 */
export enum QueryResultBatch_MoreResultsType {
  /**
   * Unspecified. This value is never used.
   *
   * @generated from enum value: MORE_RESULTS_TYPE_UNSPECIFIED = 0;
   */
  MORE_RESULTS_TYPE_UNSPECIFIED = 0,

  /**
   * There may be additional batches to fetch from this query.
   *
   * @generated from enum value: NOT_FINISHED = 1;
   */
  NOT_FINISHED = 1,

  /**
   * The query is finished, but there may be more results after the limit.
   *
   * @generated from enum value: MORE_RESULTS_AFTER_LIMIT = 2;
   */
  MORE_RESULTS_AFTER_LIMIT = 2,

  /**
   * The query is finished, but there may be more results after the end
   * cursor.
   *
   * @generated from enum value: MORE_RESULTS_AFTER_CURSOR = 4;
   */
  MORE_RESULTS_AFTER_CURSOR = 4,

  /**
   * The query is finished, and there are no more results.
   *
   * @generated from enum value: NO_MORE_RESULTS = 3;
   */
  NO_MORE_RESULTS = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(QueryResultBatch_MoreResultsType)
proto3.util.setEnumType(QueryResultBatch_MoreResultsType, "google.datastore.v1beta3.QueryResultBatch.MoreResultsType", [
  { no: 0, name: "MORE_RESULTS_TYPE_UNSPECIFIED" },
  { no: 1, name: "NOT_FINISHED" },
  { no: 2, name: "MORE_RESULTS_AFTER_LIMIT" },
  { no: 4, name: "MORE_RESULTS_AFTER_CURSOR" },
  { no: 3, name: "NO_MORE_RESULTS" },
]);

