// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/datastore/admin/v1beta1/datastore_admin.proto (package google.datastore.admin.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * Operation types.
 *
 * @generated from enum google.datastore.admin.v1beta1.OperationType
 */
export enum OperationType {
  /**
   * Unspecified.
   *
   * @generated from enum value: OPERATION_TYPE_UNSPECIFIED = 0;
   */
  OPERATION_TYPE_UNSPECIFIED = 0,

  /**
   * ExportEntities.
   *
   * @generated from enum value: EXPORT_ENTITIES = 1;
   */
  EXPORT_ENTITIES = 1,

  /**
   * ImportEntities.
   *
   * @generated from enum value: IMPORT_ENTITIES = 2;
   */
  IMPORT_ENTITIES = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(OperationType)
proto3.util.setEnumType(OperationType, "google.datastore.admin.v1beta1.OperationType", [
  { no: 0, name: "OPERATION_TYPE_UNSPECIFIED" },
  { no: 1, name: "EXPORT_ENTITIES" },
  { no: 2, name: "IMPORT_ENTITIES" },
]);

/**
 * Metadata common to all Datastore Admin operations.
 *
 * @generated from message google.datastore.admin.v1beta1.CommonMetadata
 */
export class CommonMetadata extends Message<CommonMetadata> {
  /**
   * The time that work began on the operation.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * The time the operation ended, either successfully or otherwise.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * The type of the operation. Can be used as a filter in
   * ListOperationsRequest.
   *
   * @generated from field: google.datastore.admin.v1beta1.OperationType operation_type = 3;
   */
  operationType = OperationType.OPERATION_TYPE_UNSPECIFIED;

  /**
   * The client-assigned labels which were provided when the operation was
   * created. May also include additional labels.
   *
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string } = {};

  /**
   * The current state of the Operation.
   *
   * @generated from field: google.datastore.admin.v1beta1.CommonMetadata.State state = 5;
   */
  state = CommonMetadata_State.STATE_UNSPECIFIED;

  constructor(data?: PartialMessage<CommonMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.admin.v1beta1.CommonMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_time", kind: "message", T: Timestamp },
    { no: 2, name: "end_time", kind: "message", T: Timestamp },
    { no: 3, name: "operation_type", kind: "enum", T: proto3.getEnumType(OperationType) },
    { no: 4, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "state", kind: "enum", T: proto3.getEnumType(CommonMetadata_State) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommonMetadata {
    return new CommonMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommonMetadata {
    return new CommonMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommonMetadata {
    return new CommonMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: CommonMetadata | PlainMessage<CommonMetadata> | undefined, b: CommonMetadata | PlainMessage<CommonMetadata> | undefined): boolean {
    return proto3.util.equals(CommonMetadata, a, b);
  }
}

/**
 * The various possible states for an ongoing Operation.
 *
 * @generated from enum google.datastore.admin.v1beta1.CommonMetadata.State
 */
export enum CommonMetadata_State {
  /**
   * Unspecified.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * Request is being prepared for processing.
   *
   * @generated from enum value: INITIALIZING = 1;
   */
  INITIALIZING = 1,

  /**
   * Request is actively being processed.
   *
   * @generated from enum value: PROCESSING = 2;
   */
  PROCESSING = 2,

  /**
   * Request is in the process of being cancelled after user called
   * google.longrunning.Operations.CancelOperation on the operation.
   *
   * @generated from enum value: CANCELLING = 3;
   */
  CANCELLING = 3,

  /**
   * Request has been processed and is in its finalization stage.
   *
   * @generated from enum value: FINALIZING = 4;
   */
  FINALIZING = 4,

  /**
   * Request has completed successfully.
   *
   * @generated from enum value: SUCCESSFUL = 5;
   */
  SUCCESSFUL = 5,

  /**
   * Request has finished being processed, but encountered an error.
   *
   * @generated from enum value: FAILED = 6;
   */
  FAILED = 6,

  /**
   * Request has finished being cancelled after user called
   * google.longrunning.Operations.CancelOperation.
   *
   * @generated from enum value: CANCELLED = 7;
   */
  CANCELLED = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(CommonMetadata_State)
proto3.util.setEnumType(CommonMetadata_State, "google.datastore.admin.v1beta1.CommonMetadata.State", [
  { no: 0, name: "STATE_UNSPECIFIED" },
  { no: 1, name: "INITIALIZING" },
  { no: 2, name: "PROCESSING" },
  { no: 3, name: "CANCELLING" },
  { no: 4, name: "FINALIZING" },
  { no: 5, name: "SUCCESSFUL" },
  { no: 6, name: "FAILED" },
  { no: 7, name: "CANCELLED" },
]);

/**
 * Measures the progress of a particular metric.
 *
 * @generated from message google.datastore.admin.v1beta1.Progress
 */
export class Progress extends Message<Progress> {
  /**
   * The amount of work that has been completed. Note that this may be greater
   * than work_estimated.
   *
   * @generated from field: int64 work_completed = 1;
   */
  workCompleted = protoInt64.zero;

  /**
   * An estimate of how much work needs to be performed. May be zero if the
   * work estimate is unavailable.
   *
   * @generated from field: int64 work_estimated = 2;
   */
  workEstimated = protoInt64.zero;

  constructor(data?: PartialMessage<Progress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.admin.v1beta1.Progress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "work_completed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "work_estimated", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Progress {
    return new Progress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Progress {
    return new Progress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Progress {
    return new Progress().fromJsonString(jsonString, options);
  }

  static equals(a: Progress | PlainMessage<Progress> | undefined, b: Progress | PlainMessage<Progress> | undefined): boolean {
    return proto3.util.equals(Progress, a, b);
  }
}

/**
 * The request for
 * [google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities][google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities].
 *
 * @generated from message google.datastore.admin.v1beta1.ExportEntitiesRequest
 */
export class ExportEntitiesRequest extends Message<ExportEntitiesRequest> {
  /**
   * Project ID against which to make the request.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * Client-assigned labels.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string } = {};

  /**
   * Description of what data from the project is included in the export.
   *
   * @generated from field: google.datastore.admin.v1beta1.EntityFilter entity_filter = 3;
   */
  entityFilter?: EntityFilter;

  /**
   * Location for the export metadata and data files.
   *
   * The full resource URL of the external storage location. Currently, only
   * Google Cloud Storage is supported. So output_url_prefix should be of the
   * form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the
   * name of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud
   * Storage namespace path (this is not a Cloud Datastore namespace). For more
   * information about Cloud Storage namespace paths, see
   * [Object name
   * considerations](https://cloud.google.com/storage/docs/naming#object-considerations).
   *
   * The resulting files will be nested deeper than the specified URL prefix.
   * The final output URL will be provided in the
   * [google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url][google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url]
   * field. That value should be used for subsequent ImportEntities operations.
   *
   * By nesting the data files deeper, the same Cloud Storage bucket can be used
   * in multiple ExportEntities operations without conflict.
   *
   * @generated from field: string output_url_prefix = 4;
   */
  outputUrlPrefix = "";

  constructor(data?: PartialMessage<ExportEntitiesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.admin.v1beta1.ExportEntitiesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "entity_filter", kind: "message", T: EntityFilter },
    { no: 4, name: "output_url_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportEntitiesRequest {
    return new ExportEntitiesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportEntitiesRequest {
    return new ExportEntitiesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportEntitiesRequest {
    return new ExportEntitiesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExportEntitiesRequest | PlainMessage<ExportEntitiesRequest> | undefined, b: ExportEntitiesRequest | PlainMessage<ExportEntitiesRequest> | undefined): boolean {
    return proto3.util.equals(ExportEntitiesRequest, a, b);
  }
}

/**
 * The request for
 * [google.datastore.admin.v1beta1.DatastoreAdmin.ImportEntities][google.datastore.admin.v1beta1.DatastoreAdmin.ImportEntities].
 *
 * @generated from message google.datastore.admin.v1beta1.ImportEntitiesRequest
 */
export class ImportEntitiesRequest extends Message<ImportEntitiesRequest> {
  /**
   * Project ID against which to make the request.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * Client-assigned labels.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string } = {};

  /**
   * The full resource URL of the external storage location. Currently, only
   * Google Cloud Storage is supported. So input_url should be of the form:
   * `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where
   * `BUCKET_NAME` is the name of the Cloud Storage bucket, `NAMESPACE_PATH` is
   * an optional Cloud Storage namespace path (this is not a Cloud Datastore
   * namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata file written
   * by the ExportEntities operation. For more information about Cloud Storage
   * namespace paths, see
   * [Object name
   * considerations](https://cloud.google.com/storage/docs/naming#object-considerations).
   *
   * For more information, see
   * [google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url][google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url].
   *
   * @generated from field: string input_url = 3;
   */
  inputUrl = "";

  /**
   * Optionally specify which kinds/namespaces are to be imported. If provided,
   * the list must be a subset of the EntityFilter used in creating the export,
   * otherwise a FAILED_PRECONDITION error will be returned. If no filter is
   * specified then all entities from the export are imported.
   *
   * @generated from field: google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
   */
  entityFilter?: EntityFilter;

  constructor(data?: PartialMessage<ImportEntitiesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.admin.v1beta1.ImportEntitiesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "input_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "entity_filter", kind: "message", T: EntityFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImportEntitiesRequest {
    return new ImportEntitiesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportEntitiesRequest {
    return new ImportEntitiesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImportEntitiesRequest {
    return new ImportEntitiesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ImportEntitiesRequest | PlainMessage<ImportEntitiesRequest> | undefined, b: ImportEntitiesRequest | PlainMessage<ImportEntitiesRequest> | undefined): boolean {
    return proto3.util.equals(ImportEntitiesRequest, a, b);
  }
}

/**
 * The response for
 * [google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities][google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities].
 *
 * @generated from message google.datastore.admin.v1beta1.ExportEntitiesResponse
 */
export class ExportEntitiesResponse extends Message<ExportEntitiesResponse> {
  /**
   * Location of the output metadata file. This can be used to begin an import
   * into Cloud Datastore (this project or another project). See
   * [google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url][google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url].
   * Only present if the operation completed successfully.
   *
   * @generated from field: string output_url = 1;
   */
  outputUrl = "";

  constructor(data?: PartialMessage<ExportEntitiesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.admin.v1beta1.ExportEntitiesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportEntitiesResponse {
    return new ExportEntitiesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportEntitiesResponse {
    return new ExportEntitiesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportEntitiesResponse {
    return new ExportEntitiesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExportEntitiesResponse | PlainMessage<ExportEntitiesResponse> | undefined, b: ExportEntitiesResponse | PlainMessage<ExportEntitiesResponse> | undefined): boolean {
    return proto3.util.equals(ExportEntitiesResponse, a, b);
  }
}

/**
 * Metadata for ExportEntities operations.
 *
 * @generated from message google.datastore.admin.v1beta1.ExportEntitiesMetadata
 */
export class ExportEntitiesMetadata extends Message<ExportEntitiesMetadata> {
  /**
   * Metadata common to all Datastore Admin operations.
   *
   * @generated from field: google.datastore.admin.v1beta1.CommonMetadata common = 1;
   */
  common?: CommonMetadata;

  /**
   * An estimate of the number of entities processed.
   *
   * @generated from field: google.datastore.admin.v1beta1.Progress progress_entities = 2;
   */
  progressEntities?: Progress;

  /**
   * An estimate of the number of bytes processed.
   *
   * @generated from field: google.datastore.admin.v1beta1.Progress progress_bytes = 3;
   */
  progressBytes?: Progress;

  /**
   * Description of which entities are being exported.
   *
   * @generated from field: google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
   */
  entityFilter?: EntityFilter;

  /**
   * Location for the export metadata and data files. This will be the same
   * value as the
   * [google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix][google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix]
   * field. The final output location is provided in
   * [google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url][google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url].
   *
   * @generated from field: string output_url_prefix = 5;
   */
  outputUrlPrefix = "";

  constructor(data?: PartialMessage<ExportEntitiesMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.admin.v1beta1.ExportEntitiesMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "common", kind: "message", T: CommonMetadata },
    { no: 2, name: "progress_entities", kind: "message", T: Progress },
    { no: 3, name: "progress_bytes", kind: "message", T: Progress },
    { no: 4, name: "entity_filter", kind: "message", T: EntityFilter },
    { no: 5, name: "output_url_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportEntitiesMetadata {
    return new ExportEntitiesMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportEntitiesMetadata {
    return new ExportEntitiesMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportEntitiesMetadata {
    return new ExportEntitiesMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ExportEntitiesMetadata | PlainMessage<ExportEntitiesMetadata> | undefined, b: ExportEntitiesMetadata | PlainMessage<ExportEntitiesMetadata> | undefined): boolean {
    return proto3.util.equals(ExportEntitiesMetadata, a, b);
  }
}

/**
 * Metadata for ImportEntities operations.
 *
 * @generated from message google.datastore.admin.v1beta1.ImportEntitiesMetadata
 */
export class ImportEntitiesMetadata extends Message<ImportEntitiesMetadata> {
  /**
   * Metadata common to all Datastore Admin operations.
   *
   * @generated from field: google.datastore.admin.v1beta1.CommonMetadata common = 1;
   */
  common?: CommonMetadata;

  /**
   * An estimate of the number of entities processed.
   *
   * @generated from field: google.datastore.admin.v1beta1.Progress progress_entities = 2;
   */
  progressEntities?: Progress;

  /**
   * An estimate of the number of bytes processed.
   *
   * @generated from field: google.datastore.admin.v1beta1.Progress progress_bytes = 3;
   */
  progressBytes?: Progress;

  /**
   * Description of which entities are being imported.
   *
   * @generated from field: google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
   */
  entityFilter?: EntityFilter;

  /**
   * The location of the import metadata file. This will be the same value as
   * the [google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url][google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url]
   * field.
   *
   * @generated from field: string input_url = 5;
   */
  inputUrl = "";

  constructor(data?: PartialMessage<ImportEntitiesMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.admin.v1beta1.ImportEntitiesMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "common", kind: "message", T: CommonMetadata },
    { no: 2, name: "progress_entities", kind: "message", T: Progress },
    { no: 3, name: "progress_bytes", kind: "message", T: Progress },
    { no: 4, name: "entity_filter", kind: "message", T: EntityFilter },
    { no: 5, name: "input_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImportEntitiesMetadata {
    return new ImportEntitiesMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportEntitiesMetadata {
    return new ImportEntitiesMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImportEntitiesMetadata {
    return new ImportEntitiesMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ImportEntitiesMetadata | PlainMessage<ImportEntitiesMetadata> | undefined, b: ImportEntitiesMetadata | PlainMessage<ImportEntitiesMetadata> | undefined): boolean {
    return proto3.util.equals(ImportEntitiesMetadata, a, b);
  }
}

/**
 * Identifies a subset of entities in a project. This is specified as
 * combinations of kinds and namespaces (either or both of which may be all, as
 * described in the following examples).
 * Example usage:
 *
 * Entire project:
 *   kinds=[], namespace_ids=[]
 *
 * Kinds Foo and Bar in all namespaces:
 *   kinds=['Foo', 'Bar'], namespace_ids=[]
 *
 * Kinds Foo and Bar only in the default namespace:
 *   kinds=['Foo', 'Bar'], namespace_ids=['']
 *
 * Kinds Foo and Bar in both the default and Baz namespaces:
 *   kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz']
 *
 * The entire Baz namespace:
 *   kinds=[], namespace_ids=['Baz']
 *
 * @generated from message google.datastore.admin.v1beta1.EntityFilter
 */
export class EntityFilter extends Message<EntityFilter> {
  /**
   * If empty, then this represents all kinds.
   *
   * @generated from field: repeated string kinds = 1;
   */
  kinds: string[] = [];

  /**
   * An empty list represents all namespaces. This is the preferred
   * usage for projects that don't use namespaces.
   *
   * An empty string element represents the default namespace. This should be
   * used if the project has data in non-default namespaces, but doesn't want to
   * include them.
   * Each namespace in this list must be unique.
   *
   * @generated from field: repeated string namespace_ids = 2;
   */
  namespaceIds: string[] = [];

  constructor(data?: PartialMessage<EntityFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.datastore.admin.v1beta1.EntityFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kinds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "namespace_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityFilter {
    return new EntityFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityFilter {
    return new EntityFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityFilter {
    return new EntityFilter().fromJsonString(jsonString, options);
  }

  static equals(a: EntityFilter | PlainMessage<EntityFilter> | undefined, b: EntityFilter | PlainMessage<EntityFilter> | undefined): boolean {
    return proto3.util.equals(EntityFilter, a, b);
  }
}

