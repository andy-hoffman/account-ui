// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/firestore/v1beta1/query.proto (package google.firestore.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Int32Value, Message, proto3 } from "@bufbuild/protobuf";
import { Value } from "./document_pb.js";

/**
 * A Firestore query.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery
 */
export class StructuredQuery extends Message<StructuredQuery> {
  /**
   * The projection to return.
   *
   * @generated from field: google.firestore.v1beta1.StructuredQuery.Projection select = 1;
   */
  select?: StructuredQuery_Projection;

  /**
   * The collections to query.
   *
   * @generated from field: repeated google.firestore.v1beta1.StructuredQuery.CollectionSelector from = 2;
   */
  from: StructuredQuery_CollectionSelector[] = [];

  /**
   * The filter to apply.
   *
   * @generated from field: google.firestore.v1beta1.StructuredQuery.Filter where = 3;
   */
  where?: StructuredQuery_Filter;

  /**
   * The order to apply to the query results.
   *
   * Firestore guarantees a stable ordering through the following rules:
   *
   *  * Any field required to appear in `order_by`, that is not already
   *    specified in `order_by`, is appended to the order in field name order
   *    by default.
   *  * If an order on `__name__` is not specified, it is appended by default.
   *
   * Fields are appended with the same sort direction as the last order
   * specified, or 'ASCENDING' if no order was specified. For example:
   *
   *  * `SELECT * FROM Foo ORDER BY A` becomes
   *    `SELECT * FROM Foo ORDER BY A, __name__`
   *  * `SELECT * FROM Foo ORDER BY A DESC` becomes
   *    `SELECT * FROM Foo ORDER BY A DESC, __name__ DESC`
   *  * `SELECT * FROM Foo WHERE A > 1` becomes
   *    `SELECT * FROM Foo WHERE A > 1 ORDER BY A, __name__`
   *
   * @generated from field: repeated google.firestore.v1beta1.StructuredQuery.Order order_by = 4;
   */
  orderBy: StructuredQuery_Order[] = [];

  /**
   * A starting point for the query results.
   *
   * @generated from field: google.firestore.v1beta1.Cursor start_at = 7;
   */
  startAt?: Cursor;

  /**
   * A end point for the query results.
   *
   * @generated from field: google.firestore.v1beta1.Cursor end_at = 8;
   */
  endAt?: Cursor;

  /**
   * The number of results to skip.
   *
   * Applies before limit, but after all other constraints. Must be >= 0 if
   * specified.
   *
   * @generated from field: int32 offset = 6;
   */
  offset = 0;

  /**
   * The maximum number of results to return.
   *
   * Applies after all other constraints.
   * Must be >= 0 if specified.
   *
   * @generated from field: google.protobuf.Int32Value limit = 5;
   */
  limit?: number;

  constructor(data?: PartialMessage<StructuredQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.v1beta1.StructuredQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "select", kind: "message", T: StructuredQuery_Projection },
    { no: 2, name: "from", kind: "message", T: StructuredQuery_CollectionSelector, repeated: true },
    { no: 3, name: "where", kind: "message", T: StructuredQuery_Filter },
    { no: 4, name: "order_by", kind: "message", T: StructuredQuery_Order, repeated: true },
    { no: 7, name: "start_at", kind: "message", T: Cursor },
    { no: 8, name: "end_at", kind: "message", T: Cursor },
    { no: 6, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "limit", kind: "message", T: Int32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructuredQuery {
    return new StructuredQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructuredQuery {
    return new StructuredQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructuredQuery {
    return new StructuredQuery().fromJsonString(jsonString, options);
  }

  static equals(a: StructuredQuery | PlainMessage<StructuredQuery> | undefined, b: StructuredQuery | PlainMessage<StructuredQuery> | undefined): boolean {
    return proto3.util.equals(StructuredQuery, a, b);
  }
}

/**
 * A sort direction.
 *
 * @generated from enum google.firestore.v1beta1.StructuredQuery.Direction
 */
export enum StructuredQuery_Direction {
  /**
   * Unspecified.
   *
   * @generated from enum value: DIRECTION_UNSPECIFIED = 0;
   */
  DIRECTION_UNSPECIFIED = 0,

  /**
   * Ascending.
   *
   * @generated from enum value: ASCENDING = 1;
   */
  ASCENDING = 1,

  /**
   * Descending.
   *
   * @generated from enum value: DESCENDING = 2;
   */
  DESCENDING = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(StructuredQuery_Direction)
proto3.util.setEnumType(StructuredQuery_Direction, "google.firestore.v1beta1.StructuredQuery.Direction", [
  { no: 0, name: "DIRECTION_UNSPECIFIED" },
  { no: 1, name: "ASCENDING" },
  { no: 2, name: "DESCENDING" },
]);

/**
 * A selection of a collection, such as `messages as m1`.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery.CollectionSelector
 */
export class StructuredQuery_CollectionSelector extends Message<StructuredQuery_CollectionSelector> {
  /**
   * The collection ID.
   * When set, selects only collections with this ID.
   *
   * @generated from field: string collection_id = 2;
   */
  collectionId = "";

  /**
   * When false, selects only collections that are immediate children of
   * the `parent` specified in the containing `RunQueryRequest`.
   * When true, selects all descendant collections.
   *
   * @generated from field: bool all_descendants = 3;
   */
  allDescendants = false;

  constructor(data?: PartialMessage<StructuredQuery_CollectionSelector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.v1beta1.StructuredQuery.CollectionSelector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "all_descendants", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructuredQuery_CollectionSelector {
    return new StructuredQuery_CollectionSelector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructuredQuery_CollectionSelector {
    return new StructuredQuery_CollectionSelector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructuredQuery_CollectionSelector {
    return new StructuredQuery_CollectionSelector().fromJsonString(jsonString, options);
  }

  static equals(a: StructuredQuery_CollectionSelector | PlainMessage<StructuredQuery_CollectionSelector> | undefined, b: StructuredQuery_CollectionSelector | PlainMessage<StructuredQuery_CollectionSelector> | undefined): boolean {
    return proto3.util.equals(StructuredQuery_CollectionSelector, a, b);
  }
}

/**
 * A filter.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery.Filter
 */
export class StructuredQuery_Filter extends Message<StructuredQuery_Filter> {
  /**
   * The type of filter.
   *
   * @generated from oneof google.firestore.v1beta1.StructuredQuery.Filter.filter_type
   */
  filterType: {
    /**
     * A composite filter.
     *
     * @generated from field: google.firestore.v1beta1.StructuredQuery.CompositeFilter composite_filter = 1;
     */
    value: StructuredQuery_CompositeFilter;
    case: "compositeFilter";
  } | {
    /**
     * A filter on a document field.
     *
     * @generated from field: google.firestore.v1beta1.StructuredQuery.FieldFilter field_filter = 2;
     */
    value: StructuredQuery_FieldFilter;
    case: "fieldFilter";
  } | {
    /**
     * A filter that takes exactly one argument.
     *
     * @generated from field: google.firestore.v1beta1.StructuredQuery.UnaryFilter unary_filter = 3;
     */
    value: StructuredQuery_UnaryFilter;
    case: "unaryFilter";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StructuredQuery_Filter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.v1beta1.StructuredQuery.Filter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "composite_filter", kind: "message", T: StructuredQuery_CompositeFilter, oneof: "filter_type" },
    { no: 2, name: "field_filter", kind: "message", T: StructuredQuery_FieldFilter, oneof: "filter_type" },
    { no: 3, name: "unary_filter", kind: "message", T: StructuredQuery_UnaryFilter, oneof: "filter_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructuredQuery_Filter {
    return new StructuredQuery_Filter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructuredQuery_Filter {
    return new StructuredQuery_Filter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructuredQuery_Filter {
    return new StructuredQuery_Filter().fromJsonString(jsonString, options);
  }

  static equals(a: StructuredQuery_Filter | PlainMessage<StructuredQuery_Filter> | undefined, b: StructuredQuery_Filter | PlainMessage<StructuredQuery_Filter> | undefined): boolean {
    return proto3.util.equals(StructuredQuery_Filter, a, b);
  }
}

/**
 * A filter that merges multiple other filters using the given operator.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery.CompositeFilter
 */
export class StructuredQuery_CompositeFilter extends Message<StructuredQuery_CompositeFilter> {
  /**
   * The operator for combining multiple filters.
   *
   * @generated from field: google.firestore.v1beta1.StructuredQuery.CompositeFilter.Operator op = 1;
   */
  op = StructuredQuery_CompositeFilter_Operator.OPERATOR_UNSPECIFIED;

  /**
   * The list of filters to combine.
   * Must contain at least one filter.
   *
   * @generated from field: repeated google.firestore.v1beta1.StructuredQuery.Filter filters = 2;
   */
  filters: StructuredQuery_Filter[] = [];

  constructor(data?: PartialMessage<StructuredQuery_CompositeFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.v1beta1.StructuredQuery.CompositeFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "op", kind: "enum", T: proto3.getEnumType(StructuredQuery_CompositeFilter_Operator) },
    { no: 2, name: "filters", kind: "message", T: StructuredQuery_Filter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructuredQuery_CompositeFilter {
    return new StructuredQuery_CompositeFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructuredQuery_CompositeFilter {
    return new StructuredQuery_CompositeFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructuredQuery_CompositeFilter {
    return new StructuredQuery_CompositeFilter().fromJsonString(jsonString, options);
  }

  static equals(a: StructuredQuery_CompositeFilter | PlainMessage<StructuredQuery_CompositeFilter> | undefined, b: StructuredQuery_CompositeFilter | PlainMessage<StructuredQuery_CompositeFilter> | undefined): boolean {
    return proto3.util.equals(StructuredQuery_CompositeFilter, a, b);
  }
}

/**
 * A composite filter operator.
 *
 * @generated from enum google.firestore.v1beta1.StructuredQuery.CompositeFilter.Operator
 */
export enum StructuredQuery_CompositeFilter_Operator {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: OPERATOR_UNSPECIFIED = 0;
   */
  OPERATOR_UNSPECIFIED = 0,

  /**
   * The results are required to satisfy each of the combined filters.
   *
   * @generated from enum value: AND = 1;
   */
  AND = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(StructuredQuery_CompositeFilter_Operator)
proto3.util.setEnumType(StructuredQuery_CompositeFilter_Operator, "google.firestore.v1beta1.StructuredQuery.CompositeFilter.Operator", [
  { no: 0, name: "OPERATOR_UNSPECIFIED" },
  { no: 1, name: "AND" },
]);

/**
 * A filter on a specific field.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery.FieldFilter
 */
export class StructuredQuery_FieldFilter extends Message<StructuredQuery_FieldFilter> {
  /**
   * The field to filter by.
   *
   * @generated from field: google.firestore.v1beta1.StructuredQuery.FieldReference field = 1;
   */
  field?: StructuredQuery_FieldReference;

  /**
   * The operator to filter by.
   *
   * @generated from field: google.firestore.v1beta1.StructuredQuery.FieldFilter.Operator op = 2;
   */
  op = StructuredQuery_FieldFilter_Operator.OPERATOR_UNSPECIFIED;

  /**
   * The value to compare to.
   *
   * @generated from field: google.firestore.v1beta1.Value value = 3;
   */
  value?: Value;

  constructor(data?: PartialMessage<StructuredQuery_FieldFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.v1beta1.StructuredQuery.FieldFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field", kind: "message", T: StructuredQuery_FieldReference },
    { no: 2, name: "op", kind: "enum", T: proto3.getEnumType(StructuredQuery_FieldFilter_Operator) },
    { no: 3, name: "value", kind: "message", T: Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructuredQuery_FieldFilter {
    return new StructuredQuery_FieldFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructuredQuery_FieldFilter {
    return new StructuredQuery_FieldFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructuredQuery_FieldFilter {
    return new StructuredQuery_FieldFilter().fromJsonString(jsonString, options);
  }

  static equals(a: StructuredQuery_FieldFilter | PlainMessage<StructuredQuery_FieldFilter> | undefined, b: StructuredQuery_FieldFilter | PlainMessage<StructuredQuery_FieldFilter> | undefined): boolean {
    return proto3.util.equals(StructuredQuery_FieldFilter, a, b);
  }
}

/**
 * A field filter operator.
 *
 * @generated from enum google.firestore.v1beta1.StructuredQuery.FieldFilter.Operator
 */
export enum StructuredQuery_FieldFilter_Operator {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: OPERATOR_UNSPECIFIED = 0;
   */
  OPERATOR_UNSPECIFIED = 0,

  /**
   * Less than. Requires that the field come first in `order_by`.
   *
   * @generated from enum value: LESS_THAN = 1;
   */
  LESS_THAN = 1,

  /**
   * Less than or equal. Requires that the field come first in `order_by`.
   *
   * @generated from enum value: LESS_THAN_OR_EQUAL = 2;
   */
  LESS_THAN_OR_EQUAL = 2,

  /**
   * Greater than. Requires that the field come first in `order_by`.
   *
   * @generated from enum value: GREATER_THAN = 3;
   */
  GREATER_THAN = 3,

  /**
   * Greater than or equal. Requires that the field come first in
   * `order_by`.
   *
   * @generated from enum value: GREATER_THAN_OR_EQUAL = 4;
   */
  GREATER_THAN_OR_EQUAL = 4,

  /**
   * Equal.
   *
   * @generated from enum value: EQUAL = 5;
   */
  EQUAL = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(StructuredQuery_FieldFilter_Operator)
proto3.util.setEnumType(StructuredQuery_FieldFilter_Operator, "google.firestore.v1beta1.StructuredQuery.FieldFilter.Operator", [
  { no: 0, name: "OPERATOR_UNSPECIFIED" },
  { no: 1, name: "LESS_THAN" },
  { no: 2, name: "LESS_THAN_OR_EQUAL" },
  { no: 3, name: "GREATER_THAN" },
  { no: 4, name: "GREATER_THAN_OR_EQUAL" },
  { no: 5, name: "EQUAL" },
]);

/**
 * A filter with a single operand.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery.UnaryFilter
 */
export class StructuredQuery_UnaryFilter extends Message<StructuredQuery_UnaryFilter> {
  /**
   * The unary operator to apply.
   *
   * @generated from field: google.firestore.v1beta1.StructuredQuery.UnaryFilter.Operator op = 1;
   */
  op = StructuredQuery_UnaryFilter_Operator.OPERATOR_UNSPECIFIED;

  /**
   * The argument to the filter.
   *
   * @generated from oneof google.firestore.v1beta1.StructuredQuery.UnaryFilter.operand_type
   */
  operandType: {
    /**
     * The field to which to apply the operator.
     *
     * @generated from field: google.firestore.v1beta1.StructuredQuery.FieldReference field = 2;
     */
    value: StructuredQuery_FieldReference;
    case: "field";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StructuredQuery_UnaryFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.v1beta1.StructuredQuery.UnaryFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "op", kind: "enum", T: proto3.getEnumType(StructuredQuery_UnaryFilter_Operator) },
    { no: 2, name: "field", kind: "message", T: StructuredQuery_FieldReference, oneof: "operand_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructuredQuery_UnaryFilter {
    return new StructuredQuery_UnaryFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructuredQuery_UnaryFilter {
    return new StructuredQuery_UnaryFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructuredQuery_UnaryFilter {
    return new StructuredQuery_UnaryFilter().fromJsonString(jsonString, options);
  }

  static equals(a: StructuredQuery_UnaryFilter | PlainMessage<StructuredQuery_UnaryFilter> | undefined, b: StructuredQuery_UnaryFilter | PlainMessage<StructuredQuery_UnaryFilter> | undefined): boolean {
    return proto3.util.equals(StructuredQuery_UnaryFilter, a, b);
  }
}

/**
 * A unary operator.
 *
 * @generated from enum google.firestore.v1beta1.StructuredQuery.UnaryFilter.Operator
 */
export enum StructuredQuery_UnaryFilter_Operator {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: OPERATOR_UNSPECIFIED = 0;
   */
  OPERATOR_UNSPECIFIED = 0,

  /**
   * Test if a field is equal to NaN.
   *
   * @generated from enum value: IS_NAN = 2;
   */
  IS_NAN = 2,

  /**
   * Test if an exprestion evaluates to Null.
   *
   * @generated from enum value: IS_NULL = 3;
   */
  IS_NULL = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(StructuredQuery_UnaryFilter_Operator)
proto3.util.setEnumType(StructuredQuery_UnaryFilter_Operator, "google.firestore.v1beta1.StructuredQuery.UnaryFilter.Operator", [
  { no: 0, name: "OPERATOR_UNSPECIFIED" },
  { no: 2, name: "IS_NAN" },
  { no: 3, name: "IS_NULL" },
]);

/**
 * An order on a field.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery.Order
 */
export class StructuredQuery_Order extends Message<StructuredQuery_Order> {
  /**
   * The field to order by.
   *
   * @generated from field: google.firestore.v1beta1.StructuredQuery.FieldReference field = 1;
   */
  field?: StructuredQuery_FieldReference;

  /**
   * The direction to order by. Defaults to `ASCENDING`.
   *
   * @generated from field: google.firestore.v1beta1.StructuredQuery.Direction direction = 2;
   */
  direction = StructuredQuery_Direction.DIRECTION_UNSPECIFIED;

  constructor(data?: PartialMessage<StructuredQuery_Order>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.v1beta1.StructuredQuery.Order";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field", kind: "message", T: StructuredQuery_FieldReference },
    { no: 2, name: "direction", kind: "enum", T: proto3.getEnumType(StructuredQuery_Direction) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructuredQuery_Order {
    return new StructuredQuery_Order().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructuredQuery_Order {
    return new StructuredQuery_Order().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructuredQuery_Order {
    return new StructuredQuery_Order().fromJsonString(jsonString, options);
  }

  static equals(a: StructuredQuery_Order | PlainMessage<StructuredQuery_Order> | undefined, b: StructuredQuery_Order | PlainMessage<StructuredQuery_Order> | undefined): boolean {
    return proto3.util.equals(StructuredQuery_Order, a, b);
  }
}

/**
 * A reference to a field, such as `max(messages.time) as max_time`.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery.FieldReference
 */
export class StructuredQuery_FieldReference extends Message<StructuredQuery_FieldReference> {
  /**
   * @generated from field: string field_path = 2;
   */
  fieldPath = "";

  constructor(data?: PartialMessage<StructuredQuery_FieldReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.v1beta1.StructuredQuery.FieldReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "field_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructuredQuery_FieldReference {
    return new StructuredQuery_FieldReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructuredQuery_FieldReference {
    return new StructuredQuery_FieldReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructuredQuery_FieldReference {
    return new StructuredQuery_FieldReference().fromJsonString(jsonString, options);
  }

  static equals(a: StructuredQuery_FieldReference | PlainMessage<StructuredQuery_FieldReference> | undefined, b: StructuredQuery_FieldReference | PlainMessage<StructuredQuery_FieldReference> | undefined): boolean {
    return proto3.util.equals(StructuredQuery_FieldReference, a, b);
  }
}

/**
 * The projection of document's fields to return.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery.Projection
 */
export class StructuredQuery_Projection extends Message<StructuredQuery_Projection> {
  /**
   * The fields to return.
   *
   * If empty, all fields are returned. To only return the name
   * of the document, use `['__name__']`.
   *
   * @generated from field: repeated google.firestore.v1beta1.StructuredQuery.FieldReference fields = 2;
   */
  fields: StructuredQuery_FieldReference[] = [];

  constructor(data?: PartialMessage<StructuredQuery_Projection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.v1beta1.StructuredQuery.Projection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "fields", kind: "message", T: StructuredQuery_FieldReference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructuredQuery_Projection {
    return new StructuredQuery_Projection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructuredQuery_Projection {
    return new StructuredQuery_Projection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructuredQuery_Projection {
    return new StructuredQuery_Projection().fromJsonString(jsonString, options);
  }

  static equals(a: StructuredQuery_Projection | PlainMessage<StructuredQuery_Projection> | undefined, b: StructuredQuery_Projection | PlainMessage<StructuredQuery_Projection> | undefined): boolean {
    return proto3.util.equals(StructuredQuery_Projection, a, b);
  }
}

/**
 * A position in a query result set.
 *
 * @generated from message google.firestore.v1beta1.Cursor
 */
export class Cursor extends Message<Cursor> {
  /**
   * The values that represent a position, in the order they appear in
   * the order by clause of a query.
   *
   * Can contain fewer values than specified in the order by clause.
   *
   * @generated from field: repeated google.firestore.v1beta1.Value values = 1;
   */
  values: Value[] = [];

  /**
   * If the position is just before or just after the given values, relative
   * to the sort order defined by the query.
   *
   * @generated from field: bool before = 2;
   */
  before = false;

  constructor(data?: PartialMessage<Cursor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.v1beta1.Cursor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "message", T: Value, repeated: true },
    { no: 2, name: "before", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Cursor {
    return new Cursor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Cursor {
    return new Cursor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Cursor {
    return new Cursor().fromJsonString(jsonString, options);
  }

  static equals(a: Cursor | PlainMessage<Cursor> | undefined, b: Cursor | PlainMessage<Cursor> | undefined): boolean {
    return proto3.util.equals(Cursor, a, b);
  }
}

