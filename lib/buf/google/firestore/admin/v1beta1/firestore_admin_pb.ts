// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/firestore/admin/v1beta1/firestore_admin.proto (package google.firestore.admin.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Index } from "./index_pb.js";

/**
 * Metadata for index operations. This metadata populates
 * the metadata field of [google.longrunning.Operation][google.longrunning.Operation].
 *
 * @generated from message google.firestore.admin.v1beta1.IndexOperationMetadata
 */
export class IndexOperationMetadata extends Message<IndexOperationMetadata> {
  /**
   * The time that work began on the operation.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * The time the operation ended, either successfully or otherwise. Unset if
   * the operation is still active.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * The index resource that this operation is acting on. For example:
   * `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
   *
   * @generated from field: string index = 3;
   */
  index = "";

  /**
   * The type of index operation.
   *
   * @generated from field: google.firestore.admin.v1beta1.IndexOperationMetadata.OperationType operation_type = 4;
   */
  operationType = IndexOperationMetadata_OperationType.OPERATION_TYPE_UNSPECIFIED;

  /**
   * True if the [google.longrunning.Operation] was cancelled. If the
   * cancellation is in progress, cancelled will be true but
   * [google.longrunning.Operation.done][google.longrunning.Operation.done] will be false.
   *
   * @generated from field: bool cancelled = 5;
   */
  cancelled = false;

  /**
   * Progress of the existing operation, measured in number of documents.
   *
   * @generated from field: google.firestore.admin.v1beta1.Progress document_progress = 6;
   */
  documentProgress?: Progress;

  constructor(data?: PartialMessage<IndexOperationMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.admin.v1beta1.IndexOperationMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_time", kind: "message", T: Timestamp },
    { no: 2, name: "end_time", kind: "message", T: Timestamp },
    { no: 3, name: "index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "operation_type", kind: "enum", T: proto3.getEnumType(IndexOperationMetadata_OperationType) },
    { no: 5, name: "cancelled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "document_progress", kind: "message", T: Progress },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexOperationMetadata {
    return new IndexOperationMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexOperationMetadata {
    return new IndexOperationMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexOperationMetadata {
    return new IndexOperationMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: IndexOperationMetadata | PlainMessage<IndexOperationMetadata> | undefined, b: IndexOperationMetadata | PlainMessage<IndexOperationMetadata> | undefined): boolean {
    return proto3.util.equals(IndexOperationMetadata, a, b);
  }
}

/**
 * The type of index operation.
 *
 * @generated from enum google.firestore.admin.v1beta1.IndexOperationMetadata.OperationType
 */
export enum IndexOperationMetadata_OperationType {
  /**
   * Unspecified. Never set by server.
   *
   * @generated from enum value: OPERATION_TYPE_UNSPECIFIED = 0;
   */
  OPERATION_TYPE_UNSPECIFIED = 0,

  /**
   * The operation is creating the index. Initiated by a `CreateIndex` call.
   *
   * @generated from enum value: CREATING_INDEX = 1;
   */
  CREATING_INDEX = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(IndexOperationMetadata_OperationType)
proto3.util.setEnumType(IndexOperationMetadata_OperationType, "google.firestore.admin.v1beta1.IndexOperationMetadata.OperationType", [
  { no: 0, name: "OPERATION_TYPE_UNSPECIFIED" },
  { no: 1, name: "CREATING_INDEX" },
]);

/**
 * Measures the progress of a particular metric.
 *
 * @generated from message google.firestore.admin.v1beta1.Progress
 */
export class Progress extends Message<Progress> {
  /**
   * An estimate of how much work has been completed. Note that this may be
   * greater than `work_estimated`.
   *
   * @generated from field: int64 work_completed = 1;
   */
  workCompleted = protoInt64.zero;

  /**
   * An estimate of how much work needs to be performed. Zero if the
   * work estimate is unavailable. May change as work progresses.
   *
   * @generated from field: int64 work_estimated = 2;
   */
  workEstimated = protoInt64.zero;

  constructor(data?: PartialMessage<Progress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.admin.v1beta1.Progress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "work_completed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "work_estimated", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Progress {
    return new Progress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Progress {
    return new Progress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Progress {
    return new Progress().fromJsonString(jsonString, options);
  }

  static equals(a: Progress | PlainMessage<Progress> | undefined, b: Progress | PlainMessage<Progress> | undefined): boolean {
    return proto3.util.equals(Progress, a, b);
  }
}

/**
 * The request for [FirestoreAdmin.CreateIndex][google.firestore.admin.v1beta1.FirestoreAdmin.CreateIndex].
 *
 * @generated from message google.firestore.admin.v1beta1.CreateIndexRequest
 */
export class CreateIndexRequest extends Message<CreateIndexRequest> {
  /**
   * The name of the database this index will apply to. For example:
   * `projects/{project_id}/databases/{database_id}`
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The index to create. The name and state should not be specified.
   * Certain single field indexes cannot be created or deleted.
   *
   * @generated from field: google.firestore.admin.v1beta1.Index index = 2;
   */
  index?: Index;

  constructor(data?: PartialMessage<CreateIndexRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.admin.v1beta1.CreateIndexRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "index", kind: "message", T: Index },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateIndexRequest {
    return new CreateIndexRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateIndexRequest {
    return new CreateIndexRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateIndexRequest {
    return new CreateIndexRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateIndexRequest | PlainMessage<CreateIndexRequest> | undefined, b: CreateIndexRequest | PlainMessage<CreateIndexRequest> | undefined): boolean {
    return proto3.util.equals(CreateIndexRequest, a, b);
  }
}

/**
 * The request for [FirestoreAdmin.GetIndex][google.firestore.admin.v1beta1.FirestoreAdmin.GetIndex].
 *
 * @generated from message google.firestore.admin.v1beta1.GetIndexRequest
 */
export class GetIndexRequest extends Message<GetIndexRequest> {
  /**
   * The name of the index. For example:
   * `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetIndexRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.admin.v1beta1.GetIndexRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIndexRequest {
    return new GetIndexRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIndexRequest {
    return new GetIndexRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIndexRequest {
    return new GetIndexRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIndexRequest | PlainMessage<GetIndexRequest> | undefined, b: GetIndexRequest | PlainMessage<GetIndexRequest> | undefined): boolean {
    return proto3.util.equals(GetIndexRequest, a, b);
  }
}

/**
 * The request for [FirestoreAdmin.ListIndexes][google.firestore.admin.v1beta1.FirestoreAdmin.ListIndexes].
 *
 * @generated from message google.firestore.admin.v1beta1.ListIndexesRequest
 */
export class ListIndexesRequest extends Message<ListIndexesRequest> {
  /**
   * The database name. For example:
   * `projects/{project_id}/databases/{database_id}`
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * @generated from field: string filter = 2;
   */
  filter = "";

  /**
   * The standard List page size.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  /**
   * The standard List page token.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListIndexesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.admin.v1beta1.ListIndexesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIndexesRequest {
    return new ListIndexesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIndexesRequest {
    return new ListIndexesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIndexesRequest {
    return new ListIndexesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListIndexesRequest | PlainMessage<ListIndexesRequest> | undefined, b: ListIndexesRequest | PlainMessage<ListIndexesRequest> | undefined): boolean {
    return proto3.util.equals(ListIndexesRequest, a, b);
  }
}

/**
 * The request for [FirestoreAdmin.DeleteIndex][google.firestore.admin.v1beta1.FirestoreAdmin.DeleteIndex].
 *
 * @generated from message google.firestore.admin.v1beta1.DeleteIndexRequest
 */
export class DeleteIndexRequest extends Message<DeleteIndexRequest> {
  /**
   * The index name. For example:
   * `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteIndexRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.admin.v1beta1.DeleteIndexRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteIndexRequest {
    return new DeleteIndexRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteIndexRequest {
    return new DeleteIndexRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteIndexRequest {
    return new DeleteIndexRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteIndexRequest | PlainMessage<DeleteIndexRequest> | undefined, b: DeleteIndexRequest | PlainMessage<DeleteIndexRequest> | undefined): boolean {
    return proto3.util.equals(DeleteIndexRequest, a, b);
  }
}

/**
 * The response for [FirestoreAdmin.ListIndexes][google.firestore.admin.v1beta1.FirestoreAdmin.ListIndexes].
 *
 * @generated from message google.firestore.admin.v1beta1.ListIndexesResponse
 */
export class ListIndexesResponse extends Message<ListIndexesResponse> {
  /**
   * The indexes.
   *
   * @generated from field: repeated google.firestore.admin.v1beta1.Index indexes = 1;
   */
  indexes: Index[] = [];

  /**
   * The standard List next-page token.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListIndexesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.admin.v1beta1.ListIndexesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "indexes", kind: "message", T: Index, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIndexesResponse {
    return new ListIndexesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIndexesResponse {
    return new ListIndexesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIndexesResponse {
    return new ListIndexesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListIndexesResponse | PlainMessage<ListIndexesResponse> | undefined, b: ListIndexesResponse | PlainMessage<ListIndexesResponse> | undefined): boolean {
    return proto3.util.equals(ListIndexesResponse, a, b);
  }
}

