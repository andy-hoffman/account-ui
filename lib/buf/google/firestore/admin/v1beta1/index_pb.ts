// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/firestore/admin/v1beta1/index.proto (package google.firestore.admin.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * A field of an index.
 *
 * @generated from message google.firestore.admin.v1beta1.IndexField
 */
export class IndexField extends Message<IndexField> {
  /**
   * The path of the field. Must match the field path specification described
   * by [google.firestore.v1beta1.Document.fields][fields].
   * Special field path `__name__` may be used by itself or at the end of a
   * path. `__type__` may be used only at the end of path.
   *
   * @generated from field: string field_path = 1;
   */
  fieldPath = "";

  /**
   * The field's mode.
   *
   * @generated from field: google.firestore.admin.v1beta1.IndexField.Mode mode = 2;
   */
  mode = IndexField_Mode.MODE_UNSPECIFIED;

  constructor(data?: PartialMessage<IndexField>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.admin.v1beta1.IndexField";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mode", kind: "enum", T: proto3.getEnumType(IndexField_Mode) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexField {
    return new IndexField().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexField {
    return new IndexField().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexField {
    return new IndexField().fromJsonString(jsonString, options);
  }

  static equals(a: IndexField | PlainMessage<IndexField> | undefined, b: IndexField | PlainMessage<IndexField> | undefined): boolean {
    return proto3.util.equals(IndexField, a, b);
  }
}

/**
 * The mode determines how a field is indexed.
 *
 * @generated from enum google.firestore.admin.v1beta1.IndexField.Mode
 */
export enum IndexField_Mode {
  /**
   * The mode is unspecified.
   *
   * @generated from enum value: MODE_UNSPECIFIED = 0;
   */
  MODE_UNSPECIFIED = 0,

  /**
   * The field's values are indexed so as to support sequencing in
   * ascending order and also query by <, >, <=, >=, and =.
   *
   * @generated from enum value: ASCENDING = 2;
   */
  ASCENDING = 2,

  /**
   * The field's values are indexed so as to support sequencing in
   * descending order and also query by <, >, <=, >=, and =.
   *
   * @generated from enum value: DESCENDING = 3;
   */
  DESCENDING = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(IndexField_Mode)
proto3.util.setEnumType(IndexField_Mode, "google.firestore.admin.v1beta1.IndexField.Mode", [
  { no: 0, name: "MODE_UNSPECIFIED" },
  { no: 2, name: "ASCENDING" },
  { no: 3, name: "DESCENDING" },
]);

/**
 * An index definition.
 *
 * @generated from message google.firestore.admin.v1beta1.Index
 */
export class Index extends Message<Index> {
  /**
   * The resource name of the index.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The collection ID to which this index applies. Required.
   *
   * @generated from field: string collection_id = 2;
   */
  collectionId = "";

  /**
   * The fields to index.
   *
   * @generated from field: repeated google.firestore.admin.v1beta1.IndexField fields = 3;
   */
  fields: IndexField[] = [];

  /**
   * The state of the index.
   * The state is read-only.
   * @OutputOnly
   *
   * @generated from field: google.firestore.admin.v1beta1.Index.State state = 6;
   */
  state = Index_State.STATE_UNSPECIFIED;

  constructor(data?: PartialMessage<Index>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.firestore.admin.v1beta1.Index";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fields", kind: "message", T: IndexField, repeated: true },
    { no: 6, name: "state", kind: "enum", T: proto3.getEnumType(Index_State) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Index {
    return new Index().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Index {
    return new Index().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Index {
    return new Index().fromJsonString(jsonString, options);
  }

  static equals(a: Index | PlainMessage<Index> | undefined, b: Index | PlainMessage<Index> | undefined): boolean {
    return proto3.util.equals(Index, a, b);
  }
}

/**
 * The state of an index. During index creation, an index will be in the
 * `CREATING` state. If the index is created successfully, it will transition
 * to the `READY` state. If the index is not able to be created, it will
 * transition to the `ERROR` state.
 *
 * @generated from enum google.firestore.admin.v1beta1.Index.State
 */
export enum Index_State {
  /**
   * The state is unspecified.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The index is being created.
   * There is an active long-running operation for the index.
   * The index is updated when writing a document.
   * Some index data may exist.
   *
   * @generated from enum value: CREATING = 3;
   */
  CREATING = 3,

  /**
   * The index is ready to be used.
   * The index is updated when writing a document.
   * The index is fully populated from all stored documents it applies to.
   *
   * @generated from enum value: READY = 2;
   */
  READY = 2,

  /**
   * The index was being created, but something went wrong.
   * There is no active long-running operation for the index,
   * and the most recently finished long-running operation failed.
   * The index is not updated when writing a document.
   * Some index data may exist.
   *
   * @generated from enum value: ERROR = 5;
   */
  ERROR = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(Index_State)
proto3.util.setEnumType(Index_State, "google.firestore.admin.v1beta1.Index.State", [
  { no: 0, name: "STATE_UNSPECIFIED" },
  { no: 3, name: "CREATING" },
  { no: 2, name: "READY" },
  { no: 5, name: "ERROR" },
]);

