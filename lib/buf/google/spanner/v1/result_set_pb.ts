// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/spanner/v1/result_set.proto (package google.spanner.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { ListValue, Message, proto3, Struct, Value } from "@bufbuild/protobuf";
import { StructType } from "./type_pb.js";
import { Transaction } from "./transaction_pb.js";
import { QueryPlan } from "./query_plan_pb.js";

/**
 * Results from [Read][google.spanner.v1.Spanner.Read] or
 * [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].
 *
 * @generated from message google.spanner.v1.ResultSet
 */
export class ResultSet extends Message<ResultSet> {
  /**
   * Metadata about the result set, such as row type information.
   *
   * @generated from field: google.spanner.v1.ResultSetMetadata metadata = 1;
   */
  metadata?: ResultSetMetadata;

  /**
   * Each element in `rows` is a row whose format is defined by
   * [metadata.row_type][google.spanner.v1.ResultSetMetadata.row_type]. The ith element
   * in each row matches the ith field in
   * [metadata.row_type][google.spanner.v1.ResultSetMetadata.row_type]. Elements are
   * encoded based on type as described
   * [here][google.spanner.v1.TypeCode].
   *
   * @generated from field: repeated google.protobuf.ListValue rows = 2;
   */
  rows: ListValue[] = [];

  /**
   * Query plan and execution statistics for the query that produced this
   * result set. These can be requested by setting
   * [ExecuteSqlRequest.query_mode][google.spanner.v1.ExecuteSqlRequest.query_mode].
   *
   * @generated from field: google.spanner.v1.ResultSetStats stats = 3;
   */
  stats?: ResultSetStats;

  constructor(data?: PartialMessage<ResultSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.v1.ResultSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ResultSetMetadata },
    { no: 2, name: "rows", kind: "message", T: ListValue, repeated: true },
    { no: 3, name: "stats", kind: "message", T: ResultSetStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResultSet {
    return new ResultSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResultSet {
    return new ResultSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResultSet {
    return new ResultSet().fromJsonString(jsonString, options);
  }

  static equals(a: ResultSet | PlainMessage<ResultSet> | undefined, b: ResultSet | PlainMessage<ResultSet> | undefined): boolean {
    return proto3.util.equals(ResultSet, a, b);
  }
}

/**
 * Partial results from a streaming read or SQL query. Streaming reads and
 * SQL queries better tolerate large result sets, large rows, and large
 * values, but are a little trickier to consume.
 *
 * @generated from message google.spanner.v1.PartialResultSet
 */
export class PartialResultSet extends Message<PartialResultSet> {
  /**
   * Metadata about the result set, such as row type information.
   * Only present in the first response.
   *
   * @generated from field: google.spanner.v1.ResultSetMetadata metadata = 1;
   */
  metadata?: ResultSetMetadata;

  /**
   * A streamed result set consists of a stream of values, which might
   * be split into many `PartialResultSet` messages to accommodate
   * large rows and/or large values. Every N complete values defines a
   * row, where N is equal to the number of entries in
   * [metadata.row_type.fields][google.spanner.v1.StructType.fields].
   *
   * Most values are encoded based on type as described
   * [here][google.spanner.v1.TypeCode].
   *
   * It is possible that the last value in values is "chunked",
   * meaning that the rest of the value is sent in subsequent
   * `PartialResultSet`(s). This is denoted by the [chunked_value][google.spanner.v1.PartialResultSet.chunked_value]
   * field. Two or more chunked values can be merged to form a
   * complete value as follows:
   *
   *   * `bool/number/null`: cannot be chunked
   *   * `string`: concatenate the strings
   *   * `list`: concatenate the lists. If the last element in a list is a
   *     `string`, `list`, or `object`, merge it with the first element in
   *     the next list by applying these rules recursively.
   *   * `object`: concatenate the (field name, field value) pairs. If a
   *     field name is duplicated, then apply these rules recursively
   *     to merge the field values.
   *
   * Some examples of merging:
   *
   *     # Strings are concatenated.
   *     "foo", "bar" => "foobar"
   *
   *     # Lists of non-strings are concatenated.
   *     [2, 3], [4] => [2, 3, 4]
   *
   *     # Lists are concatenated, but the last and first elements are merged
   *     # because they are strings.
   *     ["a", "b"], ["c", "d"] => ["a", "bc", "d"]
   *
   *     # Lists are concatenated, but the last and first elements are merged
   *     # because they are lists. Recursively, the last and first elements
   *     # of the inner lists are merged because they are strings.
   *     ["a", ["b", "c"]], [["d"], "e"] => ["a", ["b", "cd"], "e"]
   *
   *     # Non-overlapping object fields are combined.
   *     {"a": "1"}, {"b": "2"} => {"a": "1", "b": 2"}
   *
   *     # Overlapping object fields are merged.
   *     {"a": "1"}, {"a": "2"} => {"a": "12"}
   *
   *     # Examples of merging objects containing lists of strings.
   *     {"a": ["1"]}, {"a": ["2"]} => {"a": ["12"]}
   *
   * For a more complete example, suppose a streaming SQL query is
   * yielding a result set whose rows contain a single string
   * field. The following `PartialResultSet`s might be yielded:
   *
   *     {
   *       "metadata": { ... }
   *       "values": ["Hello", "W"]
   *       "chunked_value": true
   *       "resume_token": "Af65..."
   *     }
   *     {
   *       "values": ["orl"]
   *       "chunked_value": true
   *       "resume_token": "Bqp2..."
   *     }
   *     {
   *       "values": ["d"]
   *       "resume_token": "Zx1B..."
   *     }
   *
   * This sequence of `PartialResultSet`s encodes two rows, one
   * containing the field value `"Hello"`, and a second containing the
   * field value `"World" = "W" + "orl" + "d"`.
   *
   * @generated from field: repeated google.protobuf.Value values = 2;
   */
  values: Value[] = [];

  /**
   * If true, then the final value in [values][google.spanner.v1.PartialResultSet.values] is chunked, and must
   * be combined with more values from subsequent `PartialResultSet`s
   * to obtain a complete field value.
   *
   * @generated from field: bool chunked_value = 3;
   */
  chunkedValue = false;

  /**
   * Streaming calls might be interrupted for a variety of reasons, such
   * as TCP connection loss. If this occurs, the stream of results can
   * be resumed by re-sending the original request and including
   * `resume_token`. Note that executing any other transaction in the
   * same session invalidates the token.
   *
   * @generated from field: bytes resume_token = 4;
   */
  resumeToken = new Uint8Array(0);

  /**
   * Query plan and execution statistics for the query that produced this
   * streaming result set. These can be requested by setting
   * [ExecuteSqlRequest.query_mode][google.spanner.v1.ExecuteSqlRequest.query_mode] and are sent
   * only once with the last response in the stream.
   *
   * @generated from field: google.spanner.v1.ResultSetStats stats = 5;
   */
  stats?: ResultSetStats;

  constructor(data?: PartialMessage<PartialResultSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.v1.PartialResultSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ResultSetMetadata },
    { no: 2, name: "values", kind: "message", T: Value, repeated: true },
    { no: 3, name: "chunked_value", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "resume_token", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "stats", kind: "message", T: ResultSetStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PartialResultSet {
    return new PartialResultSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PartialResultSet {
    return new PartialResultSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PartialResultSet {
    return new PartialResultSet().fromJsonString(jsonString, options);
  }

  static equals(a: PartialResultSet | PlainMessage<PartialResultSet> | undefined, b: PartialResultSet | PlainMessage<PartialResultSet> | undefined): boolean {
    return proto3.util.equals(PartialResultSet, a, b);
  }
}

/**
 * Metadata about a [ResultSet][google.spanner.v1.ResultSet] or [PartialResultSet][google.spanner.v1.PartialResultSet].
 *
 * @generated from message google.spanner.v1.ResultSetMetadata
 */
export class ResultSetMetadata extends Message<ResultSetMetadata> {
  /**
   * Indicates the field names and types for the rows in the result
   * set.  For example, a SQL query like `"SELECT UserId, UserName FROM
   * Users"` could return a `row_type` value like:
   *
   *     "fields": [
   *       { "name": "UserId", "type": { "code": "INT64" } },
   *       { "name": "UserName", "type": { "code": "STRING" } },
   *     ]
   *
   * @generated from field: google.spanner.v1.StructType row_type = 1;
   */
  rowType?: StructType;

  /**
   * If the read or SQL query began a transaction as a side-effect, the
   * information about the new transaction is yielded here.
   *
   * @generated from field: google.spanner.v1.Transaction transaction = 2;
   */
  transaction?: Transaction;

  constructor(data?: PartialMessage<ResultSetMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.v1.ResultSetMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "row_type", kind: "message", T: StructType },
    { no: 2, name: "transaction", kind: "message", T: Transaction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResultSetMetadata {
    return new ResultSetMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResultSetMetadata {
    return new ResultSetMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResultSetMetadata {
    return new ResultSetMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ResultSetMetadata | PlainMessage<ResultSetMetadata> | undefined, b: ResultSetMetadata | PlainMessage<ResultSetMetadata> | undefined): boolean {
    return proto3.util.equals(ResultSetMetadata, a, b);
  }
}

/**
 * Additional statistics about a [ResultSet][google.spanner.v1.ResultSet] or [PartialResultSet][google.spanner.v1.PartialResultSet].
 *
 * @generated from message google.spanner.v1.ResultSetStats
 */
export class ResultSetStats extends Message<ResultSetStats> {
  /**
   * [QueryPlan][google.spanner.v1.QueryPlan] for the query associated with this result.
   *
   * @generated from field: google.spanner.v1.QueryPlan query_plan = 1;
   */
  queryPlan?: QueryPlan;

  /**
   * Aggregated statistics from the execution of the query. Only present when
   * the query is profiled. For example, a query could return the statistics as
   * follows:
   *
   *     {
   *       "rows_returned": "3",
   *       "elapsed_time": "1.22 secs",
   *       "cpu_time": "1.19 secs"
   *     }
   *
   * @generated from field: google.protobuf.Struct query_stats = 2;
   */
  queryStats?: Struct;

  constructor(data?: PartialMessage<ResultSetStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.v1.ResultSetStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query_plan", kind: "message", T: QueryPlan },
    { no: 2, name: "query_stats", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResultSetStats {
    return new ResultSetStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResultSetStats {
    return new ResultSetStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResultSetStats {
    return new ResultSetStats().fromJsonString(jsonString, options);
  }

  static equals(a: ResultSetStats | PlainMessage<ResultSetStats> | undefined, b: ResultSetStats | PlainMessage<ResultSetStats> | undefined): boolean {
    return proto3.util.equals(ResultSetStats, a, b);
  }
}

