// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/spanner/v1/mutation.proto (package google.spanner.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { ListValue, Message, proto3 } from "@bufbuild/protobuf";
import { KeySet } from "./keys_pb.js";

/**
 * A modification to one or more Cloud Spanner rows.  Mutations can be
 * applied to a Cloud Spanner database by sending them in a
 * [Commit][google.spanner.v1.Spanner.Commit] call.
 *
 * @generated from message google.spanner.v1.Mutation
 */
export class Mutation extends Message<Mutation> {
  /**
   * Required. The operation to perform.
   *
   * @generated from oneof google.spanner.v1.Mutation.operation
   */
  operation: {
    /**
     * Insert new rows in a table. If any of the rows already exist,
     * the write or transaction fails with error `ALREADY_EXISTS`.
     *
     * @generated from field: google.spanner.v1.Mutation.Write insert = 1;
     */
    value: Mutation_Write;
    case: "insert";
  } | {
    /**
     * Update existing rows in a table. If any of the rows does not
     * already exist, the transaction fails with error `NOT_FOUND`.
     *
     * @generated from field: google.spanner.v1.Mutation.Write update = 2;
     */
    value: Mutation_Write;
    case: "update";
  } | {
    /**
     * Like [insert][google.spanner.v1.Mutation.insert], except that if the row already exists, then
     * its column values are overwritten with the ones provided. Any
     * column values not explicitly written are preserved.
     *
     * @generated from field: google.spanner.v1.Mutation.Write insert_or_update = 3;
     */
    value: Mutation_Write;
    case: "insertOrUpdate";
  } | {
    /**
     * Like [insert][google.spanner.v1.Mutation.insert], except that if the row already exists, it is
     * deleted, and the column values provided are inserted
     * instead. Unlike [insert_or_update][google.spanner.v1.Mutation.insert_or_update], this means any values not
     * explicitly written become `NULL`.
     *
     * @generated from field: google.spanner.v1.Mutation.Write replace = 4;
     */
    value: Mutation_Write;
    case: "replace";
  } | {
    /**
     * Delete rows from a table. Succeeds whether or not the named
     * rows were present.
     *
     * @generated from field: google.spanner.v1.Mutation.Delete delete = 5;
     */
    value: Mutation_Delete;
    case: "delete";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Mutation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.v1.Mutation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "insert", kind: "message", T: Mutation_Write, oneof: "operation" },
    { no: 2, name: "update", kind: "message", T: Mutation_Write, oneof: "operation" },
    { no: 3, name: "insert_or_update", kind: "message", T: Mutation_Write, oneof: "operation" },
    { no: 4, name: "replace", kind: "message", T: Mutation_Write, oneof: "operation" },
    { no: 5, name: "delete", kind: "message", T: Mutation_Delete, oneof: "operation" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Mutation {
    return new Mutation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Mutation {
    return new Mutation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Mutation {
    return new Mutation().fromJsonString(jsonString, options);
  }

  static equals(a: Mutation | PlainMessage<Mutation> | undefined, b: Mutation | PlainMessage<Mutation> | undefined): boolean {
    return proto3.util.equals(Mutation, a, b);
  }
}

/**
 * Arguments to [insert][google.spanner.v1.Mutation.insert], [update][google.spanner.v1.Mutation.update], [insert_or_update][google.spanner.v1.Mutation.insert_or_update], and
 * [replace][google.spanner.v1.Mutation.replace] operations.
 *
 * @generated from message google.spanner.v1.Mutation.Write
 */
export class Mutation_Write extends Message<Mutation_Write> {
  /**
   * Required. The table whose rows will be written.
   *
   * @generated from field: string table = 1;
   */
  table = "";

  /**
   * The names of the columns in [table][google.spanner.v1.Mutation.Write.table] to be written.
   *
   * The list of columns must contain enough columns to allow
   * Cloud Spanner to derive values for all primary key columns in the
   * row(s) to be modified.
   *
   * @generated from field: repeated string columns = 2;
   */
  columns: string[] = [];

  /**
   * The values to be written. `values` can contain more than one
   * list of values. If it does, then multiple rows are written, one
   * for each entry in `values`. Each list in `values` must have
   * exactly as many entries as there are entries in [columns][google.spanner.v1.Mutation.Write.columns]
   * above. Sending multiple lists is equivalent to sending multiple
   * `Mutation`s, each containing one `values` entry and repeating
   * [table][google.spanner.v1.Mutation.Write.table] and [columns][google.spanner.v1.Mutation.Write.columns]. Individual values in each list are
   * encoded as described [here][google.spanner.v1.TypeCode].
   *
   * @generated from field: repeated google.protobuf.ListValue values = 3;
   */
  values: ListValue[] = [];

  constructor(data?: PartialMessage<Mutation_Write>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.v1.Mutation.Write";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "columns", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "values", kind: "message", T: ListValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Mutation_Write {
    return new Mutation_Write().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Mutation_Write {
    return new Mutation_Write().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Mutation_Write {
    return new Mutation_Write().fromJsonString(jsonString, options);
  }

  static equals(a: Mutation_Write | PlainMessage<Mutation_Write> | undefined, b: Mutation_Write | PlainMessage<Mutation_Write> | undefined): boolean {
    return proto3.util.equals(Mutation_Write, a, b);
  }
}

/**
 * Arguments to [delete][google.spanner.v1.Mutation.delete] operations.
 *
 * @generated from message google.spanner.v1.Mutation.Delete
 */
export class Mutation_Delete extends Message<Mutation_Delete> {
  /**
   * Required. The table whose rows will be deleted.
   *
   * @generated from field: string table = 1;
   */
  table = "";

  /**
   * Required. The primary keys of the rows within [table][google.spanner.v1.Mutation.Delete.table] to delete.
   *
   * @generated from field: google.spanner.v1.KeySet key_set = 2;
   */
  keySet?: KeySet;

  constructor(data?: PartialMessage<Mutation_Delete>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.v1.Mutation.Delete";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key_set", kind: "message", T: KeySet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Mutation_Delete {
    return new Mutation_Delete().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Mutation_Delete {
    return new Mutation_Delete().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Mutation_Delete {
    return new Mutation_Delete().fromJsonString(jsonString, options);
  }

  static equals(a: Mutation_Delete | PlainMessage<Mutation_Delete> | undefined, b: Mutation_Delete | PlainMessage<Mutation_Delete> | undefined): boolean {
    return proto3.util.equals(Mutation_Delete, a, b);
  }
}

