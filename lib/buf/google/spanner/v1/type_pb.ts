// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/spanner/v1/type.proto (package google.spanner.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * `TypeCode` is used as part of [Type][google.spanner.v1.Type] to
 * indicate the type of a Cloud Spanner value.
 *
 * Each legal value of a type can be encoded to or decoded from a JSON
 * value, using the encodings described below. All Cloud Spanner values can
 * be `null`, regardless of type; `null`s are always encoded as a JSON
 * `null`.
 *
 * @generated from enum google.spanner.v1.TypeCode
 */
export enum TypeCode {
  /**
   * Not specified.
   *
   * @generated from enum value: TYPE_CODE_UNSPECIFIED = 0;
   */
  TYPE_CODE_UNSPECIFIED = 0,

  /**
   * Encoded as JSON `true` or `false`.
   *
   * @generated from enum value: BOOL = 1;
   */
  BOOL = 1,

  /**
   * Encoded as `string`, in decimal format.
   *
   * @generated from enum value: INT64 = 2;
   */
  INT64 = 2,

  /**
   * Encoded as `number`, or the strings `"NaN"`, `"Infinity"`, or
   * `"-Infinity"`.
   *
   * @generated from enum value: FLOAT64 = 3;
   */
  FLOAT64 = 3,

  /**
   * Encoded as `string` in RFC 3339 timestamp format. The time zone
   * must be present, and must be `"Z"`.
   *
   * @generated from enum value: TIMESTAMP = 4;
   */
  TIMESTAMP = 4,

  /**
   * Encoded as `string` in RFC 3339 date format.
   *
   * @generated from enum value: DATE = 5;
   */
  DATE = 5,

  /**
   * Encoded as `string`.
   *
   * @generated from enum value: STRING = 6;
   */
  STRING = 6,

  /**
   * Encoded as a base64-encoded `string`, as described in RFC 4648,
   * section 4.
   *
   * @generated from enum value: BYTES = 7;
   */
  BYTES = 7,

  /**
   * Encoded as `list`, where the list elements are represented
   * according to [array_element_type][google.spanner.v1.Type.array_element_type].
   *
   * @generated from enum value: ARRAY = 8;
   */
  ARRAY = 8,

  /**
   * Encoded as `list`, where list element `i` is represented according
   * to [struct_type.fields[i]][google.spanner.v1.StructType.fields].
   *
   * @generated from enum value: STRUCT = 9;
   */
  STRUCT = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(TypeCode)
proto3.util.setEnumType(TypeCode, "google.spanner.v1.TypeCode", [
  { no: 0, name: "TYPE_CODE_UNSPECIFIED" },
  { no: 1, name: "BOOL" },
  { no: 2, name: "INT64" },
  { no: 3, name: "FLOAT64" },
  { no: 4, name: "TIMESTAMP" },
  { no: 5, name: "DATE" },
  { no: 6, name: "STRING" },
  { no: 7, name: "BYTES" },
  { no: 8, name: "ARRAY" },
  { no: 9, name: "STRUCT" },
]);

/**
 * `Type` indicates the type of a Cloud Spanner value, as might be stored in a
 * table cell or returned from an SQL query.
 *
 * @generated from message google.spanner.v1.Type
 */
export class Type extends Message<Type> {
  /**
   * Required. The [TypeCode][google.spanner.v1.TypeCode] for this type.
   *
   * @generated from field: google.spanner.v1.TypeCode code = 1;
   */
  code = TypeCode.TYPE_CODE_UNSPECIFIED;

  /**
   * If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
   * is the type of the array elements.
   *
   * @generated from field: google.spanner.v1.Type array_element_type = 2;
   */
  arrayElementType?: Type;

  /**
   * If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
   * provides type information for the struct's fields.
   *
   * @generated from field: google.spanner.v1.StructType struct_type = 3;
   */
  structType?: StructType;

  constructor(data?: PartialMessage<Type>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.v1.Type";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "enum", T: proto3.getEnumType(TypeCode) },
    { no: 2, name: "array_element_type", kind: "message", T: Type },
    { no: 3, name: "struct_type", kind: "message", T: StructType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Type {
    return new Type().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Type {
    return new Type().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Type {
    return new Type().fromJsonString(jsonString, options);
  }

  static equals(a: Type | PlainMessage<Type> | undefined, b: Type | PlainMessage<Type> | undefined): boolean {
    return proto3.util.equals(Type, a, b);
  }
}

/**
 * `StructType` defines the fields of a [STRUCT][google.spanner.v1.TypeCode.STRUCT] type.
 *
 * @generated from message google.spanner.v1.StructType
 */
export class StructType extends Message<StructType> {
  /**
   * The list of fields that make up this struct. Order is
   * significant, because values of this struct type are represented as
   * lists, where the order of field values matches the order of
   * fields in the [StructType][google.spanner.v1.StructType]. In turn, the order of fields
   * matches the order of columns in a read request, or the order of
   * fields in the `SELECT` clause of a query.
   *
   * @generated from field: repeated google.spanner.v1.StructType.Field fields = 1;
   */
  fields: StructType_Field[] = [];

  constructor(data?: PartialMessage<StructType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.v1.StructType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fields", kind: "message", T: StructType_Field, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructType {
    return new StructType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructType {
    return new StructType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructType {
    return new StructType().fromJsonString(jsonString, options);
  }

  static equals(a: StructType | PlainMessage<StructType> | undefined, b: StructType | PlainMessage<StructType> | undefined): boolean {
    return proto3.util.equals(StructType, a, b);
  }
}

/**
 * Message representing a single field of a struct.
 *
 * @generated from message google.spanner.v1.StructType.Field
 */
export class StructType_Field extends Message<StructType_Field> {
  /**
   * The name of the field. For reads, this is the column name. For
   * SQL queries, it is the column alias (e.g., `"Word"` in the
   * query `"SELECT 'hello' AS Word"`), or the column name (e.g.,
   * `"ColName"` in the query `"SELECT ColName FROM Table"`). Some
   * columns might have an empty name (e.g., !"SELECT
   * UPPER(ColName)"`). Note that a query result can contain
   * multiple fields with the same name.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The type of the field.
   *
   * @generated from field: google.spanner.v1.Type type = 2;
   */
  type?: Type;

  constructor(data?: PartialMessage<StructType_Field>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.v1.StructType.Field";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "message", T: Type },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructType_Field {
    return new StructType_Field().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructType_Field {
    return new StructType_Field().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructType_Field {
    return new StructType_Field().fromJsonString(jsonString, options);
  }

  static equals(a: StructType_Field | PlainMessage<StructType_Field> | undefined, b: StructType_Field | PlainMessage<StructType_Field> | undefined): boolean {
    return proto3.util.equals(StructType_Field, a, b);
  }
}

