// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/spanner/admin/instance/v1/spanner_instance_admin.proto (package google.spanner.admin.instance.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * A possible configuration for a Cloud Spanner instance. Configurations
 * define the geographic placement of nodes and their replication.
 *
 * @generated from message google.spanner.admin.instance.v1.InstanceConfig
 */
export class InstanceConfig extends Message<InstanceConfig> {
  /**
   * A unique identifier for the instance configuration.  Values
   * are of the form
   * `projects/<project>/instanceConfigs/[a-z][-a-z0-9]*`
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The name of this instance configuration as it appears in UIs.
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  constructor(data?: PartialMessage<InstanceConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.admin.instance.v1.InstanceConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstanceConfig {
    return new InstanceConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstanceConfig {
    return new InstanceConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstanceConfig {
    return new InstanceConfig().fromJsonString(jsonString, options);
  }

  static equals(a: InstanceConfig | PlainMessage<InstanceConfig> | undefined, b: InstanceConfig | PlainMessage<InstanceConfig> | undefined): boolean {
    return proto3.util.equals(InstanceConfig, a, b);
  }
}

/**
 * An isolated set of Cloud Spanner resources on which databases can be hosted.
 *
 * @generated from message google.spanner.admin.instance.v1.Instance
 */
export class Instance extends Message<Instance> {
  /**
   * Required. A unique identifier for the instance, which cannot be changed
   * after the instance is created. Values are of the form
   * `projects/<project>/instances/[a-z][-a-z0-9]*[a-z0-9]`. The final
   * segment of the name must be between 6 and 30 characters in length.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Required. The name of the instance's configuration. Values are of the form
   * `projects/<project>/instanceConfigs/<configuration>`. See
   * also [InstanceConfig][google.spanner.admin.instance.v1.InstanceConfig] and
   * [ListInstanceConfigs][google.spanner.admin.instance.v1.InstanceAdmin.ListInstanceConfigs].
   *
   * @generated from field: string config = 2;
   */
  config = "";

  /**
   * Required. The descriptive name for this instance as it appears in UIs.
   * Must be unique per project and between 4 and 30 characters in length.
   *
   * @generated from field: string display_name = 3;
   */
  displayName = "";

  /**
   * Required. The number of nodes allocated to this instance. This may be zero
   * in API responses for instances that are not yet in state `READY`.
   *
   * See [the documentation](https://cloud.google.com/spanner/docs/instances#node_count)
   * for more information about nodes.
   *
   * @generated from field: int32 node_count = 5;
   */
  nodeCount = 0;

  /**
   * Output only. The current instance state. For
   * [CreateInstance][google.spanner.admin.instance.v1.InstanceAdmin.CreateInstance], the state must be
   * either omitted or set to `CREATING`. For
   * [UpdateInstance][google.spanner.admin.instance.v1.InstanceAdmin.UpdateInstance], the state must be
   * either omitted or set to `READY`.
   *
   * @generated from field: google.spanner.admin.instance.v1.Instance.State state = 6;
   */
  state = Instance_State.STATE_UNSPECIFIED;

  /**
   * Cloud Labels are a flexible and lightweight mechanism for organizing cloud
   * resources into groups that reflect a customer's organizational needs and
   * deployment strategies. Cloud Labels can be used to filter collections of
   * resources. They can be used to control how resource metrics are aggregated.
   * And they can be used as arguments to policy management rules (e.g. route,
   * firewall, load balancing, etc.).
   *
   *  * Label keys must be between 1 and 63 characters long and must conform to
   *    the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`.
   *  * Label values must be between 0 and 63 characters long and must conform
   *    to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
   *  * No more than 64 labels can be associated with a given resource.
   *
   * See https://goo.gl/xmQnxf for more information on and examples of labels.
   *
   * If you plan to use labels in your own code, please note that additional
   * characters may be allowed in the future. And so you are advised to use an
   * internal label representation, such as JSON, which doesn't rely upon
   * specific characters being disallowed.  For example, representing labels
   * as the string:  name + "_" + value  would prove problematic if we were to
   * allow "_" in a future release.
   *
   * @generated from field: map<string, string> labels = 7;
   */
  labels: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Instance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.admin.instance.v1.Instance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "node_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "state", kind: "enum", T: proto3.getEnumType(Instance_State) },
    { no: 7, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Instance {
    return new Instance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Instance {
    return new Instance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Instance {
    return new Instance().fromJsonString(jsonString, options);
  }

  static equals(a: Instance | PlainMessage<Instance> | undefined, b: Instance | PlainMessage<Instance> | undefined): boolean {
    return proto3.util.equals(Instance, a, b);
  }
}

/**
 * Indicates the current state of the instance.
 *
 * @generated from enum google.spanner.admin.instance.v1.Instance.State
 */
export enum Instance_State {
  /**
   * Not specified.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The instance is still being created. Resources may not be
   * available yet, and operations such as database creation may not
   * work.
   *
   * @generated from enum value: CREATING = 1;
   */
  CREATING = 1,

  /**
   * The instance is fully created and ready to do work such as
   * creating databases.
   *
   * @generated from enum value: READY = 2;
   */
  READY = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Instance_State)
proto3.util.setEnumType(Instance_State, "google.spanner.admin.instance.v1.Instance.State", [
  { no: 0, name: "STATE_UNSPECIFIED" },
  { no: 1, name: "CREATING" },
  { no: 2, name: "READY" },
]);

/**
 * The request for [ListInstanceConfigs][google.spanner.admin.instance.v1.InstanceAdmin.ListInstanceConfigs].
 *
 * @generated from message google.spanner.admin.instance.v1.ListInstanceConfigsRequest
 */
export class ListInstanceConfigsRequest extends Message<ListInstanceConfigsRequest> {
  /**
   * Required. The name of the project for which a list of supported instance
   * configurations is requested. Values are of the form
   * `projects/<project>`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * Number of instance configurations to be returned in the response. If 0 or
   * less, defaults to the server's maximum allowed page size.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * If non-empty, `page_token` should contain a
   * [next_page_token][google.spanner.admin.instance.v1.ListInstanceConfigsResponse.next_page_token]
   * from a previous [ListInstanceConfigsResponse][google.spanner.admin.instance.v1.ListInstanceConfigsResponse].
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListInstanceConfigsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.admin.instance.v1.ListInstanceConfigsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstanceConfigsRequest {
    return new ListInstanceConfigsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstanceConfigsRequest {
    return new ListInstanceConfigsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstanceConfigsRequest {
    return new ListInstanceConfigsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstanceConfigsRequest | PlainMessage<ListInstanceConfigsRequest> | undefined, b: ListInstanceConfigsRequest | PlainMessage<ListInstanceConfigsRequest> | undefined): boolean {
    return proto3.util.equals(ListInstanceConfigsRequest, a, b);
  }
}

/**
 * The response for [ListInstanceConfigs][google.spanner.admin.instance.v1.InstanceAdmin.ListInstanceConfigs].
 *
 * @generated from message google.spanner.admin.instance.v1.ListInstanceConfigsResponse
 */
export class ListInstanceConfigsResponse extends Message<ListInstanceConfigsResponse> {
  /**
   * The list of requested instance configurations.
   *
   * @generated from field: repeated google.spanner.admin.instance.v1.InstanceConfig instance_configs = 1;
   */
  instanceConfigs: InstanceConfig[] = [];

  /**
   * `next_page_token` can be sent in a subsequent
   * [ListInstanceConfigs][google.spanner.admin.instance.v1.InstanceAdmin.ListInstanceConfigs] call to
   * fetch more of the matching instance configurations.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListInstanceConfigsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.admin.instance.v1.ListInstanceConfigsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_configs", kind: "message", T: InstanceConfig, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstanceConfigsResponse {
    return new ListInstanceConfigsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstanceConfigsResponse {
    return new ListInstanceConfigsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstanceConfigsResponse {
    return new ListInstanceConfigsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstanceConfigsResponse | PlainMessage<ListInstanceConfigsResponse> | undefined, b: ListInstanceConfigsResponse | PlainMessage<ListInstanceConfigsResponse> | undefined): boolean {
    return proto3.util.equals(ListInstanceConfigsResponse, a, b);
  }
}

/**
 * The request for
 * [GetInstanceConfigRequest][google.spanner.admin.instance.v1.InstanceAdmin.GetInstanceConfig].
 *
 * @generated from message google.spanner.admin.instance.v1.GetInstanceConfigRequest
 */
export class GetInstanceConfigRequest extends Message<GetInstanceConfigRequest> {
  /**
   * Required. The name of the requested instance configuration. Values are of
   * the form `projects/<project>/instanceConfigs/<config>`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetInstanceConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.admin.instance.v1.GetInstanceConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceConfigRequest {
    return new GetInstanceConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceConfigRequest {
    return new GetInstanceConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceConfigRequest {
    return new GetInstanceConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceConfigRequest | PlainMessage<GetInstanceConfigRequest> | undefined, b: GetInstanceConfigRequest | PlainMessage<GetInstanceConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetInstanceConfigRequest, a, b);
  }
}

/**
 * The request for [GetInstance][google.spanner.admin.instance.v1.InstanceAdmin.GetInstance].
 *
 * @generated from message google.spanner.admin.instance.v1.GetInstanceRequest
 */
export class GetInstanceRequest extends Message<GetInstanceRequest> {
  /**
   * Required. The name of the requested instance. Values are of the form
   * `projects/<project>/instances/<instance>`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.admin.instance.v1.GetInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceRequest | PlainMessage<GetInstanceRequest> | undefined, b: GetInstanceRequest | PlainMessage<GetInstanceRequest> | undefined): boolean {
    return proto3.util.equals(GetInstanceRequest, a, b);
  }
}

/**
 * The request for [CreateInstance][google.spanner.admin.instance.v1.InstanceAdmin.CreateInstance].
 *
 * @generated from message google.spanner.admin.instance.v1.CreateInstanceRequest
 */
export class CreateInstanceRequest extends Message<CreateInstanceRequest> {
  /**
   * Required. The name of the project in which to create the instance. Values
   * are of the form `projects/<project>`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * Required. The ID of the instance to create.  Valid identifiers are of the
   * form `[a-z][-a-z0-9]*[a-z0-9]` and must be between 6 and 30 characters in
   * length.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * Required. The instance to create.  The name may be omitted, but if
   * specified must be `<parent>/instances/<instance_id>`.
   *
   * @generated from field: google.spanner.admin.instance.v1.Instance instance = 3;
   */
  instance?: Instance;

  constructor(data?: PartialMessage<CreateInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.admin.instance.v1.CreateInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "instance", kind: "message", T: Instance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceRequest | PlainMessage<CreateInstanceRequest> | undefined, b: CreateInstanceRequest | PlainMessage<CreateInstanceRequest> | undefined): boolean {
    return proto3.util.equals(CreateInstanceRequest, a, b);
  }
}

/**
 * The request for [ListInstances][google.spanner.admin.instance.v1.InstanceAdmin.ListInstances].
 *
 * @generated from message google.spanner.admin.instance.v1.ListInstancesRequest
 */
export class ListInstancesRequest extends Message<ListInstancesRequest> {
  /**
   * Required. The name of the project for which a list of instances is
   * requested. Values are of the form `projects/<project>`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * Number of instances to be returned in the response. If 0 or less, defaults
   * to the server's maximum allowed page size.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * If non-empty, `page_token` should contain a
   * [next_page_token][google.spanner.admin.instance.v1.ListInstancesResponse.next_page_token] from a
   * previous [ListInstancesResponse][google.spanner.admin.instance.v1.ListInstancesResponse].
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * An expression for filtering the results of the request. Filter rules are
   * case insensitive. The fields eligible for filtering are:
   *
   *   * `name`
   *   * `display_name`
   *   * `labels.key` where key is the name of a label
   *
   * Some examples of using filters are:
   *
   *   * `name:*` --> The instance has a name.
   *   * `name:Howl` --> The instance's name contains the string "howl".
   *   * `name:HOWL` --> Equivalent to above.
   *   * `NAME:howl` --> Equivalent to above.
   *   * `labels.env:*` --> The instance has the label "env".
   *   * `labels.env:dev` --> The instance has the label "env" and the value of
   *                        the label contains the string "dev".
   *   * `name:howl labels.env:dev` --> The instance's name contains "howl" and
   *                                  it has the label "env" with its value
   *                                  containing "dev".
   *
   * @generated from field: string filter = 4;
   */
  filter = "";

  constructor(data?: PartialMessage<ListInstancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.admin.instance.v1.ListInstancesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined, b: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined): boolean {
    return proto3.util.equals(ListInstancesRequest, a, b);
  }
}

/**
 * The response for [ListInstances][google.spanner.admin.instance.v1.InstanceAdmin.ListInstances].
 *
 * @generated from message google.spanner.admin.instance.v1.ListInstancesResponse
 */
export class ListInstancesResponse extends Message<ListInstancesResponse> {
  /**
   * The list of requested instances.
   *
   * @generated from field: repeated google.spanner.admin.instance.v1.Instance instances = 1;
   */
  instances: Instance[] = [];

  /**
   * `next_page_token` can be sent in a subsequent
   * [ListInstances][google.spanner.admin.instance.v1.InstanceAdmin.ListInstances] call to fetch more
   * of the matching instances.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListInstancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.admin.instance.v1.ListInstancesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "message", T: Instance, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined, b: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined): boolean {
    return proto3.util.equals(ListInstancesResponse, a, b);
  }
}

/**
 * The request for [UpdateInstance][google.spanner.admin.instance.v1.InstanceAdmin.UpdateInstance].
 *
 * @generated from message google.spanner.admin.instance.v1.UpdateInstanceRequest
 */
export class UpdateInstanceRequest extends Message<UpdateInstanceRequest> {
  /**
   * Required. The instance to update, which must always include the instance
   * name.  Otherwise, only fields mentioned in [][google.spanner.admin.instance.v1.UpdateInstanceRequest.field_mask] need be included.
   *
   * @generated from field: google.spanner.admin.instance.v1.Instance instance = 1;
   */
  instance?: Instance;

  /**
   * Required. A mask specifying which fields in [][google.spanner.admin.instance.v1.UpdateInstanceRequest.instance] should be updated.
   * The field mask must always be specified; this prevents any future fields in
   * [][google.spanner.admin.instance.v1.Instance] from being erased accidentally by clients that do not know
   * about them.
   *
   * @generated from field: google.protobuf.FieldMask field_mask = 2;
   */
  fieldMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.admin.instance.v1.UpdateInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance", kind: "message", T: Instance },
    { no: 2, name: "field_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateInstanceRequest {
    return new UpdateInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateInstanceRequest {
    return new UpdateInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateInstanceRequest {
    return new UpdateInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateInstanceRequest | PlainMessage<UpdateInstanceRequest> | undefined, b: UpdateInstanceRequest | PlainMessage<UpdateInstanceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateInstanceRequest, a, b);
  }
}

/**
 * The request for [DeleteInstance][google.spanner.admin.instance.v1.InstanceAdmin.DeleteInstance].
 *
 * @generated from message google.spanner.admin.instance.v1.DeleteInstanceRequest
 */
export class DeleteInstanceRequest extends Message<DeleteInstanceRequest> {
  /**
   * Required. The name of the instance to be deleted. Values are of the form
   * `projects/<project>/instances/<instance>`
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.admin.instance.v1.DeleteInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteInstanceRequest | PlainMessage<DeleteInstanceRequest> | undefined, b: DeleteInstanceRequest | PlainMessage<DeleteInstanceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteInstanceRequest, a, b);
  }
}

/**
 * Metadata type for the operation returned by
 * [CreateInstance][google.spanner.admin.instance.v1.InstanceAdmin.CreateInstance].
 *
 * @generated from message google.spanner.admin.instance.v1.CreateInstanceMetadata
 */
export class CreateInstanceMetadata extends Message<CreateInstanceMetadata> {
  /**
   * The instance being created.
   *
   * @generated from field: google.spanner.admin.instance.v1.Instance instance = 1;
   */
  instance?: Instance;

  /**
   * The time at which the
   * [CreateInstance][google.spanner.admin.instance.v1.InstanceAdmin.CreateInstance] request was
   * received.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * The time at which this operation was cancelled. If set, this operation is
   * in the process of undoing itself (which is guaranteed to succeed) and
   * cannot be cancelled again.
   *
   * @generated from field: google.protobuf.Timestamp cancel_time = 3;
   */
  cancelTime?: Timestamp;

  /**
   * The time at which this operation failed or was completed successfully.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 4;
   */
  endTime?: Timestamp;

  constructor(data?: PartialMessage<CreateInstanceMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.admin.instance.v1.CreateInstanceMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance", kind: "message", T: Instance },
    { no: 2, name: "start_time", kind: "message", T: Timestamp },
    { no: 3, name: "cancel_time", kind: "message", T: Timestamp },
    { no: 4, name: "end_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceMetadata {
    return new CreateInstanceMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceMetadata {
    return new CreateInstanceMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceMetadata {
    return new CreateInstanceMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceMetadata | PlainMessage<CreateInstanceMetadata> | undefined, b: CreateInstanceMetadata | PlainMessage<CreateInstanceMetadata> | undefined): boolean {
    return proto3.util.equals(CreateInstanceMetadata, a, b);
  }
}

/**
 * Metadata type for the operation returned by
 * [UpdateInstance][google.spanner.admin.instance.v1.InstanceAdmin.UpdateInstance].
 *
 * @generated from message google.spanner.admin.instance.v1.UpdateInstanceMetadata
 */
export class UpdateInstanceMetadata extends Message<UpdateInstanceMetadata> {
  /**
   * The desired end state of the update.
   *
   * @generated from field: google.spanner.admin.instance.v1.Instance instance = 1;
   */
  instance?: Instance;

  /**
   * The time at which [UpdateInstance][google.spanner.admin.instance.v1.InstanceAdmin.UpdateInstance]
   * request was received.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * The time at which this operation was cancelled. If set, this operation is
   * in the process of undoing itself (which is guaranteed to succeed) and
   * cannot be cancelled again.
   *
   * @generated from field: google.protobuf.Timestamp cancel_time = 3;
   */
  cancelTime?: Timestamp;

  /**
   * The time at which this operation failed or was completed successfully.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 4;
   */
  endTime?: Timestamp;

  constructor(data?: PartialMessage<UpdateInstanceMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.spanner.admin.instance.v1.UpdateInstanceMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance", kind: "message", T: Instance },
    { no: 2, name: "start_time", kind: "message", T: Timestamp },
    { no: 3, name: "cancel_time", kind: "message", T: Timestamp },
    { no: 4, name: "end_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateInstanceMetadata {
    return new UpdateInstanceMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateInstanceMetadata {
    return new UpdateInstanceMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateInstanceMetadata {
    return new UpdateInstanceMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateInstanceMetadata | PlainMessage<UpdateInstanceMetadata> | undefined, b: UpdateInstanceMetadata | PlainMessage<UpdateInstanceMetadata> | undefined): boolean {
    return proto3.util.equals(UpdateInstanceMetadata, a, b);
  }
}

