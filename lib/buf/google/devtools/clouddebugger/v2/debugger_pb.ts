// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/devtools/clouddebugger/v2/debugger.proto (package google.devtools.clouddebugger.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Breakpoint, Breakpoint_Action, Debuggee } from "./data_pb.js";

/**
 * Request to set a breakpoint
 *
 * @generated from message google.devtools.clouddebugger.v2.SetBreakpointRequest
 */
export class SetBreakpointRequest extends Message<SetBreakpointRequest> {
  /**
   * ID of the debuggee where the breakpoint is to be set.
   *
   * @generated from field: string debuggee_id = 1;
   */
  debuggeeId = "";

  /**
   * Breakpoint specification to set.
   * The field `location` of the breakpoint must be set.
   *
   * @generated from field: google.devtools.clouddebugger.v2.Breakpoint breakpoint = 2;
   */
  breakpoint?: Breakpoint;

  /**
   * The client version making the call.
   * Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
   *
   * @generated from field: string client_version = 4;
   */
  clientVersion = "";

  constructor(data?: PartialMessage<SetBreakpointRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.clouddebugger.v2.SetBreakpointRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "debuggee_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "breakpoint", kind: "message", T: Breakpoint },
    { no: 4, name: "client_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetBreakpointRequest {
    return new SetBreakpointRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetBreakpointRequest {
    return new SetBreakpointRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetBreakpointRequest {
    return new SetBreakpointRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetBreakpointRequest | PlainMessage<SetBreakpointRequest> | undefined, b: SetBreakpointRequest | PlainMessage<SetBreakpointRequest> | undefined): boolean {
    return proto3.util.equals(SetBreakpointRequest, a, b);
  }
}

/**
 * Response for setting a breakpoint.
 *
 * @generated from message google.devtools.clouddebugger.v2.SetBreakpointResponse
 */
export class SetBreakpointResponse extends Message<SetBreakpointResponse> {
  /**
   * Breakpoint resource.
   * The field `id` is guaranteed to be set (in addition to the echoed fileds).
   *
   * @generated from field: google.devtools.clouddebugger.v2.Breakpoint breakpoint = 1;
   */
  breakpoint?: Breakpoint;

  constructor(data?: PartialMessage<SetBreakpointResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.clouddebugger.v2.SetBreakpointResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "breakpoint", kind: "message", T: Breakpoint },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetBreakpointResponse {
    return new SetBreakpointResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetBreakpointResponse {
    return new SetBreakpointResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetBreakpointResponse {
    return new SetBreakpointResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetBreakpointResponse | PlainMessage<SetBreakpointResponse> | undefined, b: SetBreakpointResponse | PlainMessage<SetBreakpointResponse> | undefined): boolean {
    return proto3.util.equals(SetBreakpointResponse, a, b);
  }
}

/**
 * Request to get breakpoint information.
 *
 * @generated from message google.devtools.clouddebugger.v2.GetBreakpointRequest
 */
export class GetBreakpointRequest extends Message<GetBreakpointRequest> {
  /**
   * ID of the debuggee whose breakpoint to get.
   *
   * @generated from field: string debuggee_id = 1;
   */
  debuggeeId = "";

  /**
   * ID of the breakpoint to get.
   *
   * @generated from field: string breakpoint_id = 2;
   */
  breakpointId = "";

  /**
   * The client version making the call.
   * Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
   *
   * @generated from field: string client_version = 4;
   */
  clientVersion = "";

  constructor(data?: PartialMessage<GetBreakpointRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.clouddebugger.v2.GetBreakpointRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "debuggee_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "breakpoint_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "client_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBreakpointRequest {
    return new GetBreakpointRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBreakpointRequest {
    return new GetBreakpointRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBreakpointRequest {
    return new GetBreakpointRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBreakpointRequest | PlainMessage<GetBreakpointRequest> | undefined, b: GetBreakpointRequest | PlainMessage<GetBreakpointRequest> | undefined): boolean {
    return proto3.util.equals(GetBreakpointRequest, a, b);
  }
}

/**
 * Response for getting breakpoint information.
 *
 * @generated from message google.devtools.clouddebugger.v2.GetBreakpointResponse
 */
export class GetBreakpointResponse extends Message<GetBreakpointResponse> {
  /**
   * Complete breakpoint state.
   * The fields `id` and `location` are guaranteed to be set.
   *
   * @generated from field: google.devtools.clouddebugger.v2.Breakpoint breakpoint = 1;
   */
  breakpoint?: Breakpoint;

  constructor(data?: PartialMessage<GetBreakpointResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.clouddebugger.v2.GetBreakpointResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "breakpoint", kind: "message", T: Breakpoint },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBreakpointResponse {
    return new GetBreakpointResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBreakpointResponse {
    return new GetBreakpointResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBreakpointResponse {
    return new GetBreakpointResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBreakpointResponse | PlainMessage<GetBreakpointResponse> | undefined, b: GetBreakpointResponse | PlainMessage<GetBreakpointResponse> | undefined): boolean {
    return proto3.util.equals(GetBreakpointResponse, a, b);
  }
}

/**
 * Request to delete a breakpoint.
 *
 * @generated from message google.devtools.clouddebugger.v2.DeleteBreakpointRequest
 */
export class DeleteBreakpointRequest extends Message<DeleteBreakpointRequest> {
  /**
   * ID of the debuggee whose breakpoint to delete.
   *
   * @generated from field: string debuggee_id = 1;
   */
  debuggeeId = "";

  /**
   * ID of the breakpoint to delete.
   *
   * @generated from field: string breakpoint_id = 2;
   */
  breakpointId = "";

  /**
   * The client version making the call.
   * Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
   *
   * @generated from field: string client_version = 3;
   */
  clientVersion = "";

  constructor(data?: PartialMessage<DeleteBreakpointRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.clouddebugger.v2.DeleteBreakpointRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "debuggee_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "breakpoint_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBreakpointRequest {
    return new DeleteBreakpointRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBreakpointRequest {
    return new DeleteBreakpointRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteBreakpointRequest {
    return new DeleteBreakpointRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteBreakpointRequest | PlainMessage<DeleteBreakpointRequest> | undefined, b: DeleteBreakpointRequest | PlainMessage<DeleteBreakpointRequest> | undefined): boolean {
    return proto3.util.equals(DeleteBreakpointRequest, a, b);
  }
}

/**
 * Request to list breakpoints.
 *
 * @generated from message google.devtools.clouddebugger.v2.ListBreakpointsRequest
 */
export class ListBreakpointsRequest extends Message<ListBreakpointsRequest> {
  /**
   * ID of the debuggee whose breakpoints to list.
   *
   * @generated from field: string debuggee_id = 1;
   */
  debuggeeId = "";

  /**
   * When set to `true`, the response includes the list of breakpoints set by
   * any user. Otherwise, it includes only breakpoints set by the caller.
   *
   * @generated from field: bool include_all_users = 2;
   */
  includeAllUsers = false;

  /**
   * When set to `true`, the response includes active and inactive
   * breakpoints. Otherwise, it includes only active breakpoints.
   *
   * @generated from field: bool include_inactive = 3;
   */
  includeInactive = false;

  /**
   * When set, the response includes only breakpoints with the specified action.
   *
   * @generated from field: google.devtools.clouddebugger.v2.ListBreakpointsRequest.BreakpointActionValue action = 4;
   */
  action?: ListBreakpointsRequest_BreakpointActionValue;

  /**
   * This field is deprecated. The following fields are always stripped out of
   * the result: `stack_frames`, `evaluated_expressions` and `variable_table`.
   *
   * @generated from field: bool strip_results = 5;
   */
  stripResults = false;

  /**
   * A wait token that, if specified, blocks the call until the breakpoints
   * list has changed, or a server selected timeout has expired.  The value
   * should be set from the last response. The error code
   * `google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which
   * should be called again with the same `wait_token`.
   *
   * @generated from field: string wait_token = 6;
   */
  waitToken = "";

  /**
   * The client version making the call.
   * Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
   *
   * @generated from field: string client_version = 8;
   */
  clientVersion = "";

  constructor(data?: PartialMessage<ListBreakpointsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.clouddebugger.v2.ListBreakpointsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "debuggee_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "include_all_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "include_inactive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "action", kind: "message", T: ListBreakpointsRequest_BreakpointActionValue },
    { no: 5, name: "strip_results", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "wait_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "client_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBreakpointsRequest {
    return new ListBreakpointsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBreakpointsRequest {
    return new ListBreakpointsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBreakpointsRequest {
    return new ListBreakpointsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListBreakpointsRequest | PlainMessage<ListBreakpointsRequest> | undefined, b: ListBreakpointsRequest | PlainMessage<ListBreakpointsRequest> | undefined): boolean {
    return proto3.util.equals(ListBreakpointsRequest, a, b);
  }
}

/**
 * Wrapper message for `Breakpoint.Action`. Defines a filter on the action
 * field of breakpoints.
 *
 * @generated from message google.devtools.clouddebugger.v2.ListBreakpointsRequest.BreakpointActionValue
 */
export class ListBreakpointsRequest_BreakpointActionValue extends Message<ListBreakpointsRequest_BreakpointActionValue> {
  /**
   * Only breakpoints with the specified action will pass the filter.
   *
   * @generated from field: google.devtools.clouddebugger.v2.Breakpoint.Action value = 1;
   */
  value = Breakpoint_Action.CAPTURE;

  constructor(data?: PartialMessage<ListBreakpointsRequest_BreakpointActionValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.clouddebugger.v2.ListBreakpointsRequest.BreakpointActionValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(Breakpoint_Action) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBreakpointsRequest_BreakpointActionValue {
    return new ListBreakpointsRequest_BreakpointActionValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBreakpointsRequest_BreakpointActionValue {
    return new ListBreakpointsRequest_BreakpointActionValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBreakpointsRequest_BreakpointActionValue {
    return new ListBreakpointsRequest_BreakpointActionValue().fromJsonString(jsonString, options);
  }

  static equals(a: ListBreakpointsRequest_BreakpointActionValue | PlainMessage<ListBreakpointsRequest_BreakpointActionValue> | undefined, b: ListBreakpointsRequest_BreakpointActionValue | PlainMessage<ListBreakpointsRequest_BreakpointActionValue> | undefined): boolean {
    return proto3.util.equals(ListBreakpointsRequest_BreakpointActionValue, a, b);
  }
}

/**
 * Response for listing breakpoints.
 *
 * @generated from message google.devtools.clouddebugger.v2.ListBreakpointsResponse
 */
export class ListBreakpointsResponse extends Message<ListBreakpointsResponse> {
  /**
   * List of breakpoints matching the request.
   * The fields `id` and `location` are guaranteed to be set on each breakpoint.
   * The fields: `stack_frames`, `evaluated_expressions` and `variable_table`
   * are cleared on each breakpoint regardless of its status.
   *
   * @generated from field: repeated google.devtools.clouddebugger.v2.Breakpoint breakpoints = 1;
   */
  breakpoints: Breakpoint[] = [];

  /**
   * A wait token that can be used in the next call to `list` (REST) or
   * `ListBreakpoints` (RPC) to block until the list of breakpoints has changes.
   *
   * @generated from field: string next_wait_token = 2;
   */
  nextWaitToken = "";

  constructor(data?: PartialMessage<ListBreakpointsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.clouddebugger.v2.ListBreakpointsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "breakpoints", kind: "message", T: Breakpoint, repeated: true },
    { no: 2, name: "next_wait_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBreakpointsResponse {
    return new ListBreakpointsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBreakpointsResponse {
    return new ListBreakpointsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBreakpointsResponse {
    return new ListBreakpointsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListBreakpointsResponse | PlainMessage<ListBreakpointsResponse> | undefined, b: ListBreakpointsResponse | PlainMessage<ListBreakpointsResponse> | undefined): boolean {
    return proto3.util.equals(ListBreakpointsResponse, a, b);
  }
}

/**
 * Request to list debuggees.
 *
 * @generated from message google.devtools.clouddebugger.v2.ListDebuggeesRequest
 */
export class ListDebuggeesRequest extends Message<ListDebuggeesRequest> {
  /**
   * Project number of a Google Cloud project whose debuggees to list.
   *
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * When set to `true`, the result includes all debuggees. Otherwise, the
   * result includes only debuggees that are active.
   *
   * @generated from field: bool include_inactive = 3;
   */
  includeInactive = false;

  /**
   * The client version making the call.
   * Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
   *
   * @generated from field: string client_version = 4;
   */
  clientVersion = "";

  constructor(data?: PartialMessage<ListDebuggeesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.clouddebugger.v2.ListDebuggeesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "include_inactive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "client_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDebuggeesRequest {
    return new ListDebuggeesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDebuggeesRequest {
    return new ListDebuggeesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDebuggeesRequest {
    return new ListDebuggeesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDebuggeesRequest | PlainMessage<ListDebuggeesRequest> | undefined, b: ListDebuggeesRequest | PlainMessage<ListDebuggeesRequest> | undefined): boolean {
    return proto3.util.equals(ListDebuggeesRequest, a, b);
  }
}

/**
 * Response for listing debuggees.
 *
 * @generated from message google.devtools.clouddebugger.v2.ListDebuggeesResponse
 */
export class ListDebuggeesResponse extends Message<ListDebuggeesResponse> {
  /**
   * List of debuggees accessible to the calling user.
   * The fields `debuggee.id` and `description` are guaranteed to be set.
   * The `description` field is a human readable field provided by agents and
   * can be displayed to users.
   *
   * @generated from field: repeated google.devtools.clouddebugger.v2.Debuggee debuggees = 1;
   */
  debuggees: Debuggee[] = [];

  constructor(data?: PartialMessage<ListDebuggeesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.clouddebugger.v2.ListDebuggeesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "debuggees", kind: "message", T: Debuggee, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDebuggeesResponse {
    return new ListDebuggeesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDebuggeesResponse {
    return new ListDebuggeesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDebuggeesResponse {
    return new ListDebuggeesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDebuggeesResponse | PlainMessage<ListDebuggeesResponse> | undefined, b: ListDebuggeesResponse | PlainMessage<ListDebuggeesResponse> | undefined): boolean {
    return proto3.util.equals(ListDebuggeesResponse, a, b);
  }
}

