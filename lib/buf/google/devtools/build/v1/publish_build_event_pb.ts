// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/devtools/build/v1/publish_build_event.proto (package google.devtools.build.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BuildEvent, StreamId } from "./build_events_pb.js";

/**
 * Publishes 'lifecycle events' that update the high-level state of a build:
 * - BuildEnqueued: When a build is scheduled.
 * - InvocationAttemptStarted: When work for a build starts; there can be
 *     multiple invocations for a build (e.g. retries).
 * - InvocationAttemptCompleted: When work for a build finishes.
 * - BuildFinished: When a build is finished.
 *
 * @generated from message google.devtools.build.v1.PublishLifecycleEventRequest
 */
export class PublishLifecycleEventRequest extends Message<PublishLifecycleEventRequest> {
  /**
   * The interactivity of this build.
   *
   * @generated from field: google.devtools.build.v1.PublishLifecycleEventRequest.ServiceLevel service_level = 1;
   */
  serviceLevel = PublishLifecycleEventRequest_ServiceLevel.NONINTERACTIVE;

  /**
   * The lifecycle build event. If this is a build tool event, the RPC will fail
   * with INVALID_REQUEST.
   *
   * @generated from field: google.devtools.build.v1.OrderedBuildEvent build_event = 2;
   */
  buildEvent?: OrderedBuildEvent;

  /**
   * If the next event for this build or invocation (depending on the event
   * type) hasn't been published after this duration from when {build_event}
   * is written to BES, consider this stream expired. If this field is not set,
   * BES backend will use its own default value.
   *
   * @generated from field: google.protobuf.Duration stream_timeout = 3;
   */
  streamTimeout?: Duration;

  /**
   * Additional information about a build request. These are define by the event
   * publishers, and the Build Event Service does not validate or interpret
   * them. They are used while notifying internal systems of new builds and
   * invocations if the OrderedBuildEvent.event type is
   * BuildEnqueued/InvocationAttemptStarted.
   *
   * @generated from field: repeated string notification_keywords = 4;
   */
  notificationKeywords: string[] = [];

  /**
   * This field identifies which project (if any) the build is associated with.
   *
   * @generated from field: string project_id = 6;
   */
  projectId = "";

  constructor(data?: PartialMessage<PublishLifecycleEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.build.v1.PublishLifecycleEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_level", kind: "enum", T: proto3.getEnumType(PublishLifecycleEventRequest_ServiceLevel) },
    { no: 2, name: "build_event", kind: "message", T: OrderedBuildEvent },
    { no: 3, name: "stream_timeout", kind: "message", T: Duration },
    { no: 4, name: "notification_keywords", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishLifecycleEventRequest {
    return new PublishLifecycleEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishLifecycleEventRequest {
    return new PublishLifecycleEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishLifecycleEventRequest {
    return new PublishLifecycleEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishLifecycleEventRequest | PlainMessage<PublishLifecycleEventRequest> | undefined, b: PublishLifecycleEventRequest | PlainMessage<PublishLifecycleEventRequest> | undefined): boolean {
    return proto3.util.equals(PublishLifecycleEventRequest, a, b);
  }
}

/**
 * The service level of the build request. Backends only uses this value when
 * the BuildEnqueued event is published to determine what level of service
 * this build should receive.
 *
 * @generated from enum google.devtools.build.v1.PublishLifecycleEventRequest.ServiceLevel
 */
export enum PublishLifecycleEventRequest_ServiceLevel {
  /**
   * Non-interactive builds can tolerate longer event latencies. This is the
   * default ServiceLevel if callers do not specify one.
   *
   * @generated from enum value: NONINTERACTIVE = 0;
   */
  NONINTERACTIVE = 0,

  /**
   * The events of an interactive build should be delivered with low latency.
   *
   * @generated from enum value: INTERACTIVE = 1;
   */
  INTERACTIVE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(PublishLifecycleEventRequest_ServiceLevel)
proto3.util.setEnumType(PublishLifecycleEventRequest_ServiceLevel, "google.devtools.build.v1.PublishLifecycleEventRequest.ServiceLevel", [
  { no: 0, name: "NONINTERACTIVE" },
  { no: 1, name: "INTERACTIVE" },
]);

/**
 * States which event has been committed. Any failure to commit will cause
 * RPC errors, hence not recorded by this proto.
 *
 * @generated from message google.devtools.build.v1.PublishBuildToolEventStreamResponse
 */
export class PublishBuildToolEventStreamResponse extends Message<PublishBuildToolEventStreamResponse> {
  /**
   * The stream that contains this event.
   *
   * @generated from field: google.devtools.build.v1.StreamId stream_id = 1;
   */
  streamId?: StreamId;

  /**
   * The sequence number of this event that has been committed.
   *
   * @generated from field: int64 sequence_number = 2;
   */
  sequenceNumber = protoInt64.zero;

  constructor(data?: PartialMessage<PublishBuildToolEventStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.build.v1.PublishBuildToolEventStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id", kind: "message", T: StreamId },
    { no: 2, name: "sequence_number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishBuildToolEventStreamResponse {
    return new PublishBuildToolEventStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishBuildToolEventStreamResponse {
    return new PublishBuildToolEventStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishBuildToolEventStreamResponse {
    return new PublishBuildToolEventStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishBuildToolEventStreamResponse | PlainMessage<PublishBuildToolEventStreamResponse> | undefined, b: PublishBuildToolEventStreamResponse | PlainMessage<PublishBuildToolEventStreamResponse> | undefined): boolean {
    return proto3.util.equals(PublishBuildToolEventStreamResponse, a, b);
  }
}

/**
 * Build event with contextual information about the stream it belongs to and
 * its position in that stream.
 *
 * @generated from message google.devtools.build.v1.OrderedBuildEvent
 */
export class OrderedBuildEvent extends Message<OrderedBuildEvent> {
  /**
   * Which build event stream this event belongs to.
   *
   * @generated from field: google.devtools.build.v1.StreamId stream_id = 1;
   */
  streamId?: StreamId;

  /**
   * The position of this event in the stream. The sequence numbers for a build
   * event stream should be a sequence of consecutive natural numbers starting
   * from one. (1, 2, 3, ...)
   *
   * @generated from field: int64 sequence_number = 2;
   */
  sequenceNumber = protoInt64.zero;

  /**
   * The actual event.
   *
   * @generated from field: google.devtools.build.v1.BuildEvent event = 3;
   */
  event?: BuildEvent;

  constructor(data?: PartialMessage<OrderedBuildEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.build.v1.OrderedBuildEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id", kind: "message", T: StreamId },
    { no: 2, name: "sequence_number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "event", kind: "message", T: BuildEvent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderedBuildEvent {
    return new OrderedBuildEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderedBuildEvent {
    return new OrderedBuildEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderedBuildEvent {
    return new OrderedBuildEvent().fromJsonString(jsonString, options);
  }

  static equals(a: OrderedBuildEvent | PlainMessage<OrderedBuildEvent> | undefined, b: OrderedBuildEvent | PlainMessage<OrderedBuildEvent> | undefined): boolean {
    return proto3.util.equals(OrderedBuildEvent, a, b);
  }
}

/**
 * The fist 3 fields are identical to OrderedBuildEvent so we can have wire-
 * compatibility when migrating BES publishers.
 *
 * @generated from message google.devtools.build.v1.PublishBuildToolEventStreamRequest
 */
export class PublishBuildToolEventStreamRequest extends Message<PublishBuildToolEventStreamRequest> {
  /**
   * Which build event stream this event belongs to.
   *
   * @generated from field: google.devtools.build.v1.StreamId stream_id = 1 [deprecated = true];
   * @deprecated
   */
  streamId?: StreamId;

  /**
   * The position of this event in the stream. The sequence numbers for a build
   * event stream should be a sequence of consecutive natural numbers starting
   * from one. (1, 2, 3, ...)
   *
   * @generated from field: int64 sequence_number = 2 [deprecated = true];
   * @deprecated
   */
  sequenceNumber = protoInt64.zero;

  /**
   * The actual event.
   *
   * @generated from field: google.devtools.build.v1.BuildEvent event = 3 [deprecated = true];
   * @deprecated
   */
  event?: BuildEvent;

  /**
   * The build event with position info.
   * New publishing clients should use this field rather than the 3 above.
   *
   * @generated from field: google.devtools.build.v1.OrderedBuildEvent ordered_build_event = 4;
   */
  orderedBuildEvent?: OrderedBuildEvent;

  /**
   * The keywords to be attached to the notification which notifies the start
   * of a new build event stream. BES only reads this field when sequence_number
   * or ordered_build_event.sequence_number is 1 in this message. If this field
   * is empty, BES will not publish notification messages for this stream.
   *
   * @generated from field: repeated string notification_keywords = 5;
   */
  notificationKeywords: string[] = [];

  constructor(data?: PartialMessage<PublishBuildToolEventStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.build.v1.PublishBuildToolEventStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_id", kind: "message", T: StreamId },
    { no: 2, name: "sequence_number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "event", kind: "message", T: BuildEvent },
    { no: 4, name: "ordered_build_event", kind: "message", T: OrderedBuildEvent },
    { no: 5, name: "notification_keywords", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishBuildToolEventStreamRequest {
    return new PublishBuildToolEventStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishBuildToolEventStreamRequest {
    return new PublishBuildToolEventStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishBuildToolEventStreamRequest {
    return new PublishBuildToolEventStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishBuildToolEventStreamRequest | PlainMessage<PublishBuildToolEventStreamRequest> | undefined, b: PublishBuildToolEventStreamRequest | PlainMessage<PublishBuildToolEventStreamRequest> | undefined): boolean {
    return proto3.util.equals(PublishBuildToolEventStreamRequest, a, b);
  }
}

