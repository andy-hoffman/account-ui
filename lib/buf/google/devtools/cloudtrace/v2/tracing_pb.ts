// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/devtools/cloudtrace/v2/tracing.proto (package google.devtools.cloudtrace.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Span } from "./trace_pb.js";

/**
 * The request message for the `BatchWriteSpans` method.
 *
 * @generated from message google.devtools.cloudtrace.v2.BatchWriteSpansRequest
 */
export class BatchWriteSpansRequest extends Message<BatchWriteSpansRequest> {
  /**
   * Required. Name of the project where the spans belong. The format is
   * `projects/PROJECT_ID`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * A collection of spans.
   *
   * @generated from field: repeated google.devtools.cloudtrace.v2.Span spans = 2;
   */
  spans: Span[] = [];

  constructor(data?: PartialMessage<BatchWriteSpansRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudtrace.v2.BatchWriteSpansRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "spans", kind: "message", T: Span, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchWriteSpansRequest {
    return new BatchWriteSpansRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchWriteSpansRequest {
    return new BatchWriteSpansRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchWriteSpansRequest {
    return new BatchWriteSpansRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchWriteSpansRequest | PlainMessage<BatchWriteSpansRequest> | undefined, b: BatchWriteSpansRequest | PlainMessage<BatchWriteSpansRequest> | undefined): boolean {
    return proto3.util.equals(BatchWriteSpansRequest, a, b);
  }
}

