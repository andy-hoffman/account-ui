// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/devtools/cloudbuild/v1/cloudbuild.proto (package google.devtools.cloudbuild.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * StorageSource describes the location of the source in an archive file in
 * Google Cloud Storage.
 *
 * @generated from message google.devtools.cloudbuild.v1.StorageSource
 */
export class StorageSource extends Message<StorageSource> {
  /**
   * Google Cloud Storage bucket containing source (see
   * [Bucket Name
   * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
   *
   * @generated from field: string bucket = 1;
   */
  bucket = "";

  /**
   * Google Cloud Storage object containing source.
   *
   * This object must be a gzipped archive file (.tar.gz) containing source to
   * build.
   *
   * @generated from field: string object = 2;
   */
  object = "";

  /**
   * Google Cloud Storage generation for the object. If the generation is
   * omitted, the latest generation will be used.
   *
   * @generated from field: int64 generation = 3;
   */
  generation = protoInt64.zero;

  constructor(data?: PartialMessage<StorageSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.StorageSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "generation", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageSource {
    return new StorageSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageSource {
    return new StorageSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageSource {
    return new StorageSource().fromJsonString(jsonString, options);
  }

  static equals(a: StorageSource | PlainMessage<StorageSource> | undefined, b: StorageSource | PlainMessage<StorageSource> | undefined): boolean {
    return proto3.util.equals(StorageSource, a, b);
  }
}

/**
 * RepoSource describes the location of the source in a Google Cloud Source
 * Repository.
 *
 * @generated from message google.devtools.cloudbuild.v1.RepoSource
 */
export class RepoSource extends Message<RepoSource> {
  /**
   * ID of the project that owns the repo. If omitted, the project ID requesting
   * the build is assumed.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * Name of the repo. If omitted, the name "default" is assumed.
   *
   * @generated from field: string repo_name = 2;
   */
  repoName = "";

  /**
   * A revision within the source repository must be specified in
   * one of these ways.
   *
   * @generated from oneof google.devtools.cloudbuild.v1.RepoSource.revision
   */
  revision: {
    /**
     * Name of the branch to build.
     *
     * @generated from field: string branch_name = 3;
     */
    value: string;
    case: "branchName";
  } | {
    /**
     * Name of the tag to build.
     *
     * @generated from field: string tag_name = 4;
     */
    value: string;
    case: "tagName";
  } | {
    /**
     * Explicit commit SHA to build.
     *
     * @generated from field: string commit_sha = 5;
     */
    value: string;
    case: "commitSha";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RepoSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.RepoSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repo_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "revision" },
    { no: 4, name: "tag_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "revision" },
    { no: 5, name: "commit_sha", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "revision" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RepoSource {
    return new RepoSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RepoSource {
    return new RepoSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RepoSource {
    return new RepoSource().fromJsonString(jsonString, options);
  }

  static equals(a: RepoSource | PlainMessage<RepoSource> | undefined, b: RepoSource | PlainMessage<RepoSource> | undefined): boolean {
    return proto3.util.equals(RepoSource, a, b);
  }
}

/**
 * Source describes the location of the source in a supported storage
 * service.
 *
 * @generated from message google.devtools.cloudbuild.v1.Source
 */
export class Source extends Message<Source> {
  /**
   * Describes location of source.
   *
   * @generated from oneof google.devtools.cloudbuild.v1.Source.source
   */
  source: {
    /**
     * If provided, get the source from this location in in Google Cloud
     * Storage.
     *
     * @generated from field: google.devtools.cloudbuild.v1.StorageSource storage_source = 2;
     */
    value: StorageSource;
    case: "storageSource";
  } | {
    /**
     * If provided, get source from this location in a Cloud Repo.
     *
     * @generated from field: google.devtools.cloudbuild.v1.RepoSource repo_source = 3;
     */
    value: RepoSource;
    case: "repoSource";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Source>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.Source";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "storage_source", kind: "message", T: StorageSource, oneof: "source" },
    { no: 3, name: "repo_source", kind: "message", T: RepoSource, oneof: "source" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Source {
    return new Source().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Source {
    return new Source().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Source {
    return new Source().fromJsonString(jsonString, options);
  }

  static equals(a: Source | PlainMessage<Source> | undefined, b: Source | PlainMessage<Source> | undefined): boolean {
    return proto3.util.equals(Source, a, b);
  }
}

/**
 * BuiltImage describes an image built by the pipeline.
 *
 * @generated from message google.devtools.cloudbuild.v1.BuiltImage
 */
export class BuiltImage extends Message<BuiltImage> {
  /**
   * Name used to push the container image to Google Container Registry, as
   * presented to `docker push`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Docker Registry 2.0 digest.
   *
   * @generated from field: string digest = 3;
   */
  digest = "";

  constructor(data?: PartialMessage<BuiltImage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.BuiltImage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuiltImage {
    return new BuiltImage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuiltImage {
    return new BuiltImage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuiltImage {
    return new BuiltImage().fromJsonString(jsonString, options);
  }

  static equals(a: BuiltImage | PlainMessage<BuiltImage> | undefined, b: BuiltImage | PlainMessage<BuiltImage> | undefined): boolean {
    return proto3.util.equals(BuiltImage, a, b);
  }
}

/**
 * BuildStep describes a step to perform in the build pipeline.
 *
 * @generated from message google.devtools.cloudbuild.v1.BuildStep
 */
export class BuildStep extends Message<BuildStep> {
  /**
   * The name of the container image that will run this particular build step.
   *
   * If the image is already available in the host's Docker daemon's cache, it
   * will be run directly. If not, the host will attempt to pull the image
   * first, using the builder service account's credentials if necessary.
   *
   * The Docker daemon's cache will already have the latest versions of all of
   * the officially supported build steps
   * ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
   * The Docker daemon will also have cached many of the layers for some popular
   * images, like "ubuntu", "debian", but they will be refreshed at the time you
   * attempt to use them.
   *
   * If you built an image in a previous build step, it will be stored in the
   * host's Docker daemon's cache and is available to use as the name for a
   * later build step.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * A list of environment variable definitions to be used when running a step.
   *
   * The elements are of the form "KEY=VALUE" for the environment variable "KEY"
   * being given the value "VALUE".
   *
   * @generated from field: repeated string env = 2;
   */
  env: string[] = [];

  /**
   * A list of arguments that will be presented to the step when it is started.
   *
   * If the image used to run the step's container has an entrypoint, these args
   * will be used as arguments to that entrypoint. If the image does not define
   * an entrypoint, the first element in args will be used as the entrypoint,
   * and the remainder will be used as arguments.
   *
   * @generated from field: repeated string args = 3;
   */
  args: string[] = [];

  /**
   * Working directory (relative to project source root) to use when running
   * this operation's container.
   *
   * @generated from field: string dir = 4;
   */
  dir = "";

  /**
   * Optional unique identifier for this build step, used in wait_for to
   * reference this build step as a dependency.
   *
   * @generated from field: string id = 5;
   */
  id = "";

  /**
   * The ID(s) of the step(s) that this build step depends on.
   * This build step will not start until all the build steps in wait_for
   * have completed successfully. If wait_for is empty, this build step will
   * start when all previous build steps in the Build.Steps list have completed
   * successfully.
   *
   * @generated from field: repeated string wait_for = 6;
   */
  waitFor: string[] = [];

  /**
   * Optional entrypoint to be used instead of the build step image's default
   * If unset, the image's default will be used.
   *
   * @generated from field: string entrypoint = 7;
   */
  entrypoint = "";

  /**
   * A list of environment variables which are encrypted using a Cloud KMS
   * crypto key. These values must be specified in the build's secrets.
   *
   * @generated from field: repeated string secret_env = 8;
   */
  secretEnv: string[] = [];

  /**
   * List of volumes to mount into the build step.
   *
   * Each volume will be created as an empty volume prior to execution of the
   * build step. Upon completion of the build, volumes and their contents will
   * be discarded.
   *
   * Using a named volume in only one step is not valid as it is indicative
   * of a mis-configured build request.
   *
   * @generated from field: repeated google.devtools.cloudbuild.v1.Volume volumes = 9;
   */
  volumes: Volume[] = [];

  constructor(data?: PartialMessage<BuildStep>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.BuildStep";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "env", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "dir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "wait_for", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "entrypoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "secret_env", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "volumes", kind: "message", T: Volume, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildStep {
    return new BuildStep().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildStep {
    return new BuildStep().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildStep {
    return new BuildStep().fromJsonString(jsonString, options);
  }

  static equals(a: BuildStep | PlainMessage<BuildStep> | undefined, b: BuildStep | PlainMessage<BuildStep> | undefined): boolean {
    return proto3.util.equals(BuildStep, a, b);
  }
}

/**
 * Volume describes a Docker container volume which is mounted into build steps
 * in order to persist files across build step execution.
 *
 * @generated from message google.devtools.cloudbuild.v1.Volume
 */
export class Volume extends Message<Volume> {
  /**
   * Name of the volume to mount.
   *
   * Volume names must be unique per build step and must be valid names for
   * Docker volumes. Each named volume must be used by at least two build steps.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Path at which to mount the volume.
   *
   * Paths must be absolute and cannot conflict with other volume paths on the
   * same build step or with certain reserved volume paths.
   *
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<Volume>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.Volume";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Volume {
    return new Volume().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Volume {
    return new Volume().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Volume {
    return new Volume().fromJsonString(jsonString, options);
  }

  static equals(a: Volume | PlainMessage<Volume> | undefined, b: Volume | PlainMessage<Volume> | undefined): boolean {
    return proto3.util.equals(Volume, a, b);
  }
}

/**
 * Results describes the artifacts created by the build pipeline.
 *
 * @generated from message google.devtools.cloudbuild.v1.Results
 */
export class Results extends Message<Results> {
  /**
   * Images that were built as a part of the build.
   *
   * @generated from field: repeated google.devtools.cloudbuild.v1.BuiltImage images = 2;
   */
  images: BuiltImage[] = [];

  /**
   * List of build step digests, in order corresponding to build step indices.
   *
   * @generated from field: repeated string build_step_images = 3;
   */
  buildStepImages: string[] = [];

  constructor(data?: PartialMessage<Results>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.Results";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "images", kind: "message", T: BuiltImage, repeated: true },
    { no: 3, name: "build_step_images", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Results {
    return new Results().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Results {
    return new Results().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Results {
    return new Results().fromJsonString(jsonString, options);
  }

  static equals(a: Results | PlainMessage<Results> | undefined, b: Results | PlainMessage<Results> | undefined): boolean {
    return proto3.util.equals(Results, a, b);
  }
}

/**
 * A build resource in the Container Builder API.
 *
 * At a high level, a Build describes where to find source code, how to build
 * it (for example, the builder image to run on the source), and what tag to
 * apply to the built image when it is pushed to Google Container Registry.
 *
 * Fields can include the following variables which will be expanded when the
 * build is created:
 *
 * - $PROJECT_ID: the project ID of the build.
 * - $BUILD_ID: the autogenerated ID of the build.
 * - $REPO_NAME: the source repository name specified by RepoSource.
 * - $BRANCH_NAME: the branch name specified by RepoSource.
 * - $TAG_NAME: the tag name specified by RepoSource.
 * - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or
 *   resolved from the specified branch or tag.
 *
 * @generated from message google.devtools.cloudbuild.v1.Build
 */
export class Build extends Message<Build> {
  /**
   * Unique identifier of the build.
   * @OutputOnly
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * ID of the project.
   * @OutputOnly.
   *
   * @generated from field: string project_id = 16;
   */
  projectId = "";

  /**
   * Status of the build.
   * @OutputOnly
   *
   * @generated from field: google.devtools.cloudbuild.v1.Build.Status status = 2;
   */
  status = Build_Status.STATUS_UNKNOWN;

  /**
   * Customer-readable message about the current status.
   * @OutputOnly
   *
   * @generated from field: string status_detail = 24;
   */
  statusDetail = "";

  /**
   * Describes where to find the source files to build.
   *
   * @generated from field: google.devtools.cloudbuild.v1.Source source = 3;
   */
  source?: Source;

  /**
   * Describes the operations to be performed on the workspace.
   *
   * @generated from field: repeated google.devtools.cloudbuild.v1.BuildStep steps = 11;
   */
  steps: BuildStep[] = [];

  /**
   * Results of the build.
   * @OutputOnly
   *
   * @generated from field: google.devtools.cloudbuild.v1.Results results = 10;
   */
  results?: Results;

  /**
   * Time at which the request to create the build was received.
   * @OutputOnly
   *
   * @generated from field: google.protobuf.Timestamp create_time = 6;
   */
  createTime?: Timestamp;

  /**
   * Time at which execution of the build was started.
   * @OutputOnly
   *
   * @generated from field: google.protobuf.Timestamp start_time = 7;
   */
  startTime?: Timestamp;

  /**
   * Time at which execution of the build was finished.
   *
   * The difference between finish_time and start_time is the duration of the
   * build's execution.
   * @OutputOnly
   *
   * @generated from field: google.protobuf.Timestamp finish_time = 8;
   */
  finishTime?: Timestamp;

  /**
   * Amount of time that this build should be allowed to run, to second
   * granularity. If this amount of time elapses, work on the build will cease
   * and the build status will be TIMEOUT.
   *
   * Default time is ten minutes.
   *
   * @generated from field: google.protobuf.Duration timeout = 12;
   */
  timeout?: Duration;

  /**
   * A list of images to be pushed upon the successful completion of all build
   * steps.
   *
   * The images will be pushed using the builder service account's credentials.
   *
   * The digests of the pushed images will be stored in the Build resource's
   * results field.
   *
   * If any of the images fail to be pushed, the build is marked FAILURE.
   *
   * @generated from field: repeated string images = 13;
   */
  images: string[] = [];

  /**
   * Google Cloud Storage bucket where logs should be written (see
   * [Bucket Name
   * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
   * Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
   *
   * @generated from field: string logs_bucket = 19;
   */
  logsBucket = "";

  /**
   * A permanent fixed identifier for source.
   * @OutputOnly
   *
   * @generated from field: google.devtools.cloudbuild.v1.SourceProvenance source_provenance = 21;
   */
  sourceProvenance?: SourceProvenance;

  /**
   * The ID of the BuildTrigger that triggered this build, if it was
   * triggered automatically.
   * @OutputOnly
   *
   * @generated from field: string build_trigger_id = 22;
   */
  buildTriggerId = "";

  /**
   * Special options for this build.
   *
   * @generated from field: google.devtools.cloudbuild.v1.BuildOptions options = 23;
   */
  options?: BuildOptions;

  /**
   * URL to logs for this build in Google Cloud Logging.
   * @OutputOnly
   *
   * @generated from field: string log_url = 25;
   */
  logUrl = "";

  /**
   * Substitutions data for Build resource.
   *
   * @generated from field: map<string, string> substitutions = 29;
   */
  substitutions: { [key: string]: string } = {};

  /**
   * Tags for annotation of a Build. These are not docker tags.
   *
   * @generated from field: repeated string tags = 31;
   */
  tags: string[] = [];

  /**
   * Secrets to decrypt using Cloud KMS.
   *
   * @generated from field: repeated google.devtools.cloudbuild.v1.Secret secrets = 32;
   */
  secrets: Secret[] = [];

  constructor(data?: PartialMessage<Build>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.Build";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(Build_Status) },
    { no: 24, name: "status_detail", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "source", kind: "message", T: Source },
    { no: 11, name: "steps", kind: "message", T: BuildStep, repeated: true },
    { no: 10, name: "results", kind: "message", T: Results },
    { no: 6, name: "create_time", kind: "message", T: Timestamp },
    { no: 7, name: "start_time", kind: "message", T: Timestamp },
    { no: 8, name: "finish_time", kind: "message", T: Timestamp },
    { no: 12, name: "timeout", kind: "message", T: Duration },
    { no: 13, name: "images", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 19, name: "logs_bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "source_provenance", kind: "message", T: SourceProvenance },
    { no: 22, name: "build_trigger_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "options", kind: "message", T: BuildOptions },
    { no: 25, name: "log_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 29, name: "substitutions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 31, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 32, name: "secrets", kind: "message", T: Secret, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Build {
    return new Build().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Build {
    return new Build().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Build {
    return new Build().fromJsonString(jsonString, options);
  }

  static equals(a: Build | PlainMessage<Build> | undefined, b: Build | PlainMessage<Build> | undefined): boolean {
    return proto3.util.equals(Build, a, b);
  }
}

/**
 * Possible status of a build.
 *
 * @generated from enum google.devtools.cloudbuild.v1.Build.Status
 */
export enum Build_Status {
  /**
   * Status of the build is unknown.
   *
   * @generated from enum value: STATUS_UNKNOWN = 0;
   */
  STATUS_UNKNOWN = 0,

  /**
   * Build is queued; work has not yet begun.
   *
   * @generated from enum value: QUEUED = 1;
   */
  QUEUED = 1,

  /**
   * Build is being executed.
   *
   * @generated from enum value: WORKING = 2;
   */
  WORKING = 2,

  /**
   * Build finished successfully.
   *
   * @generated from enum value: SUCCESS = 3;
   */
  SUCCESS = 3,

  /**
   * Build failed to complete successfully.
   *
   * @generated from enum value: FAILURE = 4;
   */
  FAILURE = 4,

  /**
   * Build failed due to an internal cause.
   *
   * @generated from enum value: INTERNAL_ERROR = 5;
   */
  INTERNAL_ERROR = 5,

  /**
   * Build took longer than was allowed.
   *
   * @generated from enum value: TIMEOUT = 6;
   */
  TIMEOUT = 6,

  /**
   * Build was canceled by a user.
   *
   * @generated from enum value: CANCELLED = 7;
   */
  CANCELLED = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(Build_Status)
proto3.util.setEnumType(Build_Status, "google.devtools.cloudbuild.v1.Build.Status", [
  { no: 0, name: "STATUS_UNKNOWN" },
  { no: 1, name: "QUEUED" },
  { no: 2, name: "WORKING" },
  { no: 3, name: "SUCCESS" },
  { no: 4, name: "FAILURE" },
  { no: 5, name: "INTERNAL_ERROR" },
  { no: 6, name: "TIMEOUT" },
  { no: 7, name: "CANCELLED" },
]);

/**
 * Metadata for build operations.
 *
 * @generated from message google.devtools.cloudbuild.v1.BuildOperationMetadata
 */
export class BuildOperationMetadata extends Message<BuildOperationMetadata> {
  /**
   * The build that the operation is tracking.
   *
   * @generated from field: google.devtools.cloudbuild.v1.Build build = 1;
   */
  build?: Build;

  constructor(data?: PartialMessage<BuildOperationMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.BuildOperationMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build", kind: "message", T: Build },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildOperationMetadata {
    return new BuildOperationMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildOperationMetadata {
    return new BuildOperationMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildOperationMetadata {
    return new BuildOperationMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: BuildOperationMetadata | PlainMessage<BuildOperationMetadata> | undefined, b: BuildOperationMetadata | PlainMessage<BuildOperationMetadata> | undefined): boolean {
    return proto3.util.equals(BuildOperationMetadata, a, b);
  }
}

/**
 * Provenance of the source. Ways to find the original source, or verify that
 * some source was used for this build.
 *
 * @generated from message google.devtools.cloudbuild.v1.SourceProvenance
 */
export class SourceProvenance extends Message<SourceProvenance> {
  /**
   * A copy of the build's source.storage_source, if exists, with any
   * generations resolved.
   *
   * @generated from field: google.devtools.cloudbuild.v1.StorageSource resolved_storage_source = 3;
   */
  resolvedStorageSource?: StorageSource;

  /**
   * A copy of the build's source.repo_source, if exists, with any
   * revisions resolved.
   *
   * @generated from field: google.devtools.cloudbuild.v1.RepoSource resolved_repo_source = 6;
   */
  resolvedRepoSource?: RepoSource;

  /**
   * Hash(es) of the build source, which can be used to verify that the original
   * source integrity was maintained in the build. Note that FileHashes will
   * only be populated if BuildOptions has requested a SourceProvenanceHash.
   *
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   *
   * If the build source came in a single package such as a gzipped tarfile
   * (.tar.gz), the FileHash will be for the single path to that file.
   * @OutputOnly
   *
   * @generated from field: map<string, google.devtools.cloudbuild.v1.FileHashes> file_hashes = 4;
   */
  fileHashes: { [key: string]: FileHashes } = {};

  constructor(data?: PartialMessage<SourceProvenance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.SourceProvenance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "resolved_storage_source", kind: "message", T: StorageSource },
    { no: 6, name: "resolved_repo_source", kind: "message", T: RepoSource },
    { no: 4, name: "file_hashes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: FileHashes} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SourceProvenance {
    return new SourceProvenance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SourceProvenance {
    return new SourceProvenance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SourceProvenance {
    return new SourceProvenance().fromJsonString(jsonString, options);
  }

  static equals(a: SourceProvenance | PlainMessage<SourceProvenance> | undefined, b: SourceProvenance | PlainMessage<SourceProvenance> | undefined): boolean {
    return proto3.util.equals(SourceProvenance, a, b);
  }
}

/**
 * Container message for hashes of byte content of files, used in
 * SourceProvenance messages to verify integrity of source input to the build.
 *
 * @generated from message google.devtools.cloudbuild.v1.FileHashes
 */
export class FileHashes extends Message<FileHashes> {
  /**
   * Collection of file hashes.
   *
   * @generated from field: repeated google.devtools.cloudbuild.v1.Hash file_hash = 1;
   */
  fileHash: Hash[] = [];

  constructor(data?: PartialMessage<FileHashes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.FileHashes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_hash", kind: "message", T: Hash, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileHashes {
    return new FileHashes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileHashes {
    return new FileHashes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileHashes {
    return new FileHashes().fromJsonString(jsonString, options);
  }

  static equals(a: FileHashes | PlainMessage<FileHashes> | undefined, b: FileHashes | PlainMessage<FileHashes> | undefined): boolean {
    return proto3.util.equals(FileHashes, a, b);
  }
}

/**
 * Container message for hash values.
 *
 * @generated from message google.devtools.cloudbuild.v1.Hash
 */
export class Hash extends Message<Hash> {
  /**
   * The type of hash that was performed.
   *
   * @generated from field: google.devtools.cloudbuild.v1.Hash.HashType type = 1;
   */
  type = Hash_HashType.NONE;

  /**
   * The hash value.
   *
   * @generated from field: bytes value = 2;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<Hash>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.Hash";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(Hash_HashType) },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Hash {
    return new Hash().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Hash {
    return new Hash().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Hash {
    return new Hash().fromJsonString(jsonString, options);
  }

  static equals(a: Hash | PlainMessage<Hash> | undefined, b: Hash | PlainMessage<Hash> | undefined): boolean {
    return proto3.util.equals(Hash, a, b);
  }
}

/**
 * Specifies the hash algorithm, if any.
 *
 * @generated from enum google.devtools.cloudbuild.v1.Hash.HashType
 */
export enum Hash_HashType {
  /**
   * No hash requested.
   *
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * Use a sha256 hash.
   *
   * @generated from enum value: SHA256 = 1;
   */
  SHA256 = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Hash_HashType)
proto3.util.setEnumType(Hash_HashType, "google.devtools.cloudbuild.v1.Hash.HashType", [
  { no: 0, name: "NONE" },
  { no: 1, name: "SHA256" },
]);

/**
 * Secret pairs a set of secret environment variables containing encrypted
 * values with the Cloud KMS key to use to decrypt the value.
 *
 * @generated from message google.devtools.cloudbuild.v1.Secret
 */
export class Secret extends Message<Secret> {
  /**
   * Cloud KMS key name to use to decrypt these envs.
   *
   * @generated from field: string kms_key_name = 1;
   */
  kmsKeyName = "";

  /**
   * Map of environment variable name to its encrypted value.
   *
   * Secret environment variables must be unique across all of a build's
   * secrets, and must be used by at least one build step. Values can be at most
   * 1 KB in size. There can be at most ten secret values across all of a
   * build's secrets.
   *
   * @generated from field: map<string, bytes> secret_env = 3;
   */
  secretEnv: { [key: string]: Uint8Array } = {};

  constructor(data?: PartialMessage<Secret>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.Secret";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kms_key_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "secret_env", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Secret {
    return new Secret().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Secret {
    return new Secret().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Secret {
    return new Secret().fromJsonString(jsonString, options);
  }

  static equals(a: Secret | PlainMessage<Secret> | undefined, b: Secret | PlainMessage<Secret> | undefined): boolean {
    return proto3.util.equals(Secret, a, b);
  }
}

/**
 * Request to create a new build.
 *
 * @generated from message google.devtools.cloudbuild.v1.CreateBuildRequest
 */
export class CreateBuildRequest extends Message<CreateBuildRequest> {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * Build resource to create.
   *
   * @generated from field: google.devtools.cloudbuild.v1.Build build = 2;
   */
  build?: Build;

  constructor(data?: PartialMessage<CreateBuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.CreateBuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "build", kind: "message", T: Build },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBuildRequest {
    return new CreateBuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBuildRequest {
    return new CreateBuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBuildRequest {
    return new CreateBuildRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBuildRequest | PlainMessage<CreateBuildRequest> | undefined, b: CreateBuildRequest | PlainMessage<CreateBuildRequest> | undefined): boolean {
    return proto3.util.equals(CreateBuildRequest, a, b);
  }
}

/**
 * Request to get a build.
 *
 * @generated from message google.devtools.cloudbuild.v1.GetBuildRequest
 */
export class GetBuildRequest extends Message<GetBuildRequest> {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * ID of the build.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetBuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.GetBuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBuildRequest {
    return new GetBuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBuildRequest {
    return new GetBuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBuildRequest {
    return new GetBuildRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBuildRequest | PlainMessage<GetBuildRequest> | undefined, b: GetBuildRequest | PlainMessage<GetBuildRequest> | undefined): boolean {
    return proto3.util.equals(GetBuildRequest, a, b);
  }
}

/**
 * Request to list builds.
 *
 * @generated from message google.devtools.cloudbuild.v1.ListBuildsRequest
 */
export class ListBuildsRequest extends Message<ListBuildsRequest> {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * Number of results to return in the list.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * Token to provide to skip to a particular spot in the list.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * The raw filter text to constrain the results.
   *
   * @generated from field: string filter = 8;
   */
  filter = "";

  constructor(data?: PartialMessage<ListBuildsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.ListBuildsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBuildsRequest {
    return new ListBuildsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBuildsRequest {
    return new ListBuildsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBuildsRequest {
    return new ListBuildsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListBuildsRequest | PlainMessage<ListBuildsRequest> | undefined, b: ListBuildsRequest | PlainMessage<ListBuildsRequest> | undefined): boolean {
    return proto3.util.equals(ListBuildsRequest, a, b);
  }
}

/**
 * Response including listed builds.
 *
 * @generated from message google.devtools.cloudbuild.v1.ListBuildsResponse
 */
export class ListBuildsResponse extends Message<ListBuildsResponse> {
  /**
   * Builds will be sorted by create_time, descending.
   *
   * @generated from field: repeated google.devtools.cloudbuild.v1.Build builds = 1;
   */
  builds: Build[] = [];

  /**
   * Token to receive the next page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListBuildsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.ListBuildsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "builds", kind: "message", T: Build, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBuildsResponse {
    return new ListBuildsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBuildsResponse {
    return new ListBuildsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBuildsResponse {
    return new ListBuildsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListBuildsResponse | PlainMessage<ListBuildsResponse> | undefined, b: ListBuildsResponse | PlainMessage<ListBuildsResponse> | undefined): boolean {
    return proto3.util.equals(ListBuildsResponse, a, b);
  }
}

/**
 * Request to cancel an ongoing build.
 *
 * @generated from message google.devtools.cloudbuild.v1.CancelBuildRequest
 */
export class CancelBuildRequest extends Message<CancelBuildRequest> {
  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * ID of the build.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<CancelBuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.CancelBuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelBuildRequest {
    return new CancelBuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelBuildRequest {
    return new CancelBuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelBuildRequest {
    return new CancelBuildRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelBuildRequest | PlainMessage<CancelBuildRequest> | undefined, b: CancelBuildRequest | PlainMessage<CancelBuildRequest> | undefined): boolean {
    return proto3.util.equals(CancelBuildRequest, a, b);
  }
}

/**
 * Configuration for an automated build in response to source repository
 * changes.
 *
 * @generated from message google.devtools.cloudbuild.v1.BuildTrigger
 */
export class BuildTrigger extends Message<BuildTrigger> {
  /**
   * Unique identifier of the trigger.
   *
   * @OutputOnly
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Human-readable description of this trigger.
   *
   * @generated from field: string description = 10;
   */
  description = "";

  /**
   * Template describing the types of source changes to trigger a build.
   *
   * Branch and tag names in trigger templates are interpreted as regular
   * expressions. Any branch or tag change that matches that regular expression
   * will trigger a build.
   *
   * @generated from field: google.devtools.cloudbuild.v1.RepoSource trigger_template = 7;
   */
  triggerTemplate?: RepoSource;

  /**
   * Template describing the Build request to make when the trigger is matched.
   *
   * @generated from oneof google.devtools.cloudbuild.v1.BuildTrigger.build_template
   */
  buildTemplate: {
    /**
     * Contents of the build template.
     *
     * @generated from field: google.devtools.cloudbuild.v1.Build build = 4;
     */
    value: Build;
    case: "build";
  } | {
    /**
     * Path, from the source root, to a file whose contents is used for the
     * template.
     *
     * @generated from field: string filename = 8;
     */
    value: string;
    case: "filename";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Time when the trigger was created.
   *
   * @OutputOnly
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  /**
   * If true, the trigger will never result in a build.
   *
   * @generated from field: bool disabled = 9;
   */
  disabled = false;

  /**
   * Substitutions data for Build resource.
   *
   * @generated from field: map<string, string> substitutions = 11;
   */
  substitutions: { [key: string]: string } = {};

  constructor(data?: PartialMessage<BuildTrigger>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.BuildTrigger";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "trigger_template", kind: "message", T: RepoSource },
    { no: 4, name: "build", kind: "message", T: Build, oneof: "build_template" },
    { no: 8, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "build_template" },
    { no: 5, name: "create_time", kind: "message", T: Timestamp },
    { no: 9, name: "disabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "substitutions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildTrigger {
    return new BuildTrigger().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildTrigger {
    return new BuildTrigger().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildTrigger {
    return new BuildTrigger().fromJsonString(jsonString, options);
  }

  static equals(a: BuildTrigger | PlainMessage<BuildTrigger> | undefined, b: BuildTrigger | PlainMessage<BuildTrigger> | undefined): boolean {
    return proto3.util.equals(BuildTrigger, a, b);
  }
}

/**
 * Request to create a new BuildTrigger.
 *
 * @generated from message google.devtools.cloudbuild.v1.CreateBuildTriggerRequest
 */
export class CreateBuildTriggerRequest extends Message<CreateBuildTriggerRequest> {
  /**
   * ID of the project for which to configure automatic builds.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * BuildTrigger to create.
   *
   * @generated from field: google.devtools.cloudbuild.v1.BuildTrigger trigger = 2;
   */
  trigger?: BuildTrigger;

  constructor(data?: PartialMessage<CreateBuildTriggerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.CreateBuildTriggerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "trigger", kind: "message", T: BuildTrigger },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateBuildTriggerRequest {
    return new CreateBuildTriggerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateBuildTriggerRequest {
    return new CreateBuildTriggerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateBuildTriggerRequest {
    return new CreateBuildTriggerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateBuildTriggerRequest | PlainMessage<CreateBuildTriggerRequest> | undefined, b: CreateBuildTriggerRequest | PlainMessage<CreateBuildTriggerRequest> | undefined): boolean {
    return proto3.util.equals(CreateBuildTriggerRequest, a, b);
  }
}

/**
 * Returns the BuildTrigger with the specified ID.
 *
 * @generated from message google.devtools.cloudbuild.v1.GetBuildTriggerRequest
 */
export class GetBuildTriggerRequest extends Message<GetBuildTriggerRequest> {
  /**
   * ID of the project that owns the trigger.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * ID of the BuildTrigger to get.
   *
   * @generated from field: string trigger_id = 2;
   */
  triggerId = "";

  constructor(data?: PartialMessage<GetBuildTriggerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.GetBuildTriggerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "trigger_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBuildTriggerRequest {
    return new GetBuildTriggerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBuildTriggerRequest {
    return new GetBuildTriggerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBuildTriggerRequest {
    return new GetBuildTriggerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBuildTriggerRequest | PlainMessage<GetBuildTriggerRequest> | undefined, b: GetBuildTriggerRequest | PlainMessage<GetBuildTriggerRequest> | undefined): boolean {
    return proto3.util.equals(GetBuildTriggerRequest, a, b);
  }
}

/**
 * Request to list existing BuildTriggers.
 *
 * @generated from message google.devtools.cloudbuild.v1.ListBuildTriggersRequest
 */
export class ListBuildTriggersRequest extends Message<ListBuildTriggersRequest> {
  /**
   * ID of the project for which to list BuildTriggers.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  constructor(data?: PartialMessage<ListBuildTriggersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.ListBuildTriggersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBuildTriggersRequest {
    return new ListBuildTriggersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBuildTriggersRequest {
    return new ListBuildTriggersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBuildTriggersRequest {
    return new ListBuildTriggersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListBuildTriggersRequest | PlainMessage<ListBuildTriggersRequest> | undefined, b: ListBuildTriggersRequest | PlainMessage<ListBuildTriggersRequest> | undefined): boolean {
    return proto3.util.equals(ListBuildTriggersRequest, a, b);
  }
}

/**
 * Response containing existing BuildTriggers.
 *
 * @generated from message google.devtools.cloudbuild.v1.ListBuildTriggersResponse
 */
export class ListBuildTriggersResponse extends Message<ListBuildTriggersResponse> {
  /**
   * BuildTriggers for the project, sorted by create_time descending.
   *
   * @generated from field: repeated google.devtools.cloudbuild.v1.BuildTrigger triggers = 1;
   */
  triggers: BuildTrigger[] = [];

  constructor(data?: PartialMessage<ListBuildTriggersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.ListBuildTriggersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "triggers", kind: "message", T: BuildTrigger, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBuildTriggersResponse {
    return new ListBuildTriggersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBuildTriggersResponse {
    return new ListBuildTriggersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBuildTriggersResponse {
    return new ListBuildTriggersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListBuildTriggersResponse | PlainMessage<ListBuildTriggersResponse> | undefined, b: ListBuildTriggersResponse | PlainMessage<ListBuildTriggersResponse> | undefined): boolean {
    return proto3.util.equals(ListBuildTriggersResponse, a, b);
  }
}

/**
 * Request to delete a BuildTrigger.
 *
 * @generated from message google.devtools.cloudbuild.v1.DeleteBuildTriggerRequest
 */
export class DeleteBuildTriggerRequest extends Message<DeleteBuildTriggerRequest> {
  /**
   * ID of the project that owns the trigger.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * ID of the BuildTrigger to delete.
   *
   * @generated from field: string trigger_id = 2;
   */
  triggerId = "";

  constructor(data?: PartialMessage<DeleteBuildTriggerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.DeleteBuildTriggerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "trigger_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBuildTriggerRequest {
    return new DeleteBuildTriggerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBuildTriggerRequest {
    return new DeleteBuildTriggerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteBuildTriggerRequest {
    return new DeleteBuildTriggerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteBuildTriggerRequest | PlainMessage<DeleteBuildTriggerRequest> | undefined, b: DeleteBuildTriggerRequest | PlainMessage<DeleteBuildTriggerRequest> | undefined): boolean {
    return proto3.util.equals(DeleteBuildTriggerRequest, a, b);
  }
}

/**
 * Request to update an existing BuildTrigger.
 *
 * @generated from message google.devtools.cloudbuild.v1.UpdateBuildTriggerRequest
 */
export class UpdateBuildTriggerRequest extends Message<UpdateBuildTriggerRequest> {
  /**
   * ID of the project that owns the trigger.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * ID of the BuildTrigger to update.
   *
   * @generated from field: string trigger_id = 2;
   */
  triggerId = "";

  /**
   * BuildTrigger to update.
   *
   * @generated from field: google.devtools.cloudbuild.v1.BuildTrigger trigger = 3;
   */
  trigger?: BuildTrigger;

  constructor(data?: PartialMessage<UpdateBuildTriggerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.UpdateBuildTriggerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "trigger_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "trigger", kind: "message", T: BuildTrigger },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBuildTriggerRequest {
    return new UpdateBuildTriggerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBuildTriggerRequest {
    return new UpdateBuildTriggerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBuildTriggerRequest {
    return new UpdateBuildTriggerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateBuildTriggerRequest | PlainMessage<UpdateBuildTriggerRequest> | undefined, b: UpdateBuildTriggerRequest | PlainMessage<UpdateBuildTriggerRequest> | undefined): boolean {
    return proto3.util.equals(UpdateBuildTriggerRequest, a, b);
  }
}

/**
 * Optional arguments to enable specific features of builds.
 *
 * @generated from message google.devtools.cloudbuild.v1.BuildOptions
 */
export class BuildOptions extends Message<BuildOptions> {
  /**
   * Requested hash for SourceProvenance.
   *
   * @generated from field: repeated google.devtools.cloudbuild.v1.Hash.HashType source_provenance_hash = 1;
   */
  sourceProvenanceHash: Hash_HashType[] = [];

  /**
   * Requested verifiability options.
   *
   * @generated from field: google.devtools.cloudbuild.v1.BuildOptions.VerifyOption requested_verify_option = 2;
   */
  requestedVerifyOption = BuildOptions_VerifyOption.NOT_VERIFIED;

  /**
   * SubstitutionOption to allow unmatch substitutions.
   *
   * @generated from field: google.devtools.cloudbuild.v1.BuildOptions.SubstitutionOption substitution_option = 4;
   */
  substitutionOption = BuildOptions_SubstitutionOption.MUST_MATCH;

  constructor(data?: PartialMessage<BuildOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.cloudbuild.v1.BuildOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_provenance_hash", kind: "enum", T: proto3.getEnumType(Hash_HashType), repeated: true },
    { no: 2, name: "requested_verify_option", kind: "enum", T: proto3.getEnumType(BuildOptions_VerifyOption) },
    { no: 4, name: "substitution_option", kind: "enum", T: proto3.getEnumType(BuildOptions_SubstitutionOption) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildOptions {
    return new BuildOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildOptions {
    return new BuildOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildOptions {
    return new BuildOptions().fromJsonString(jsonString, options);
  }

  static equals(a: BuildOptions | PlainMessage<BuildOptions> | undefined, b: BuildOptions | PlainMessage<BuildOptions> | undefined): boolean {
    return proto3.util.equals(BuildOptions, a, b);
  }
}

/**
 * Specifies the manner in which the build should be verified, if at all.
 *
 * @generated from enum google.devtools.cloudbuild.v1.BuildOptions.VerifyOption
 */
export enum BuildOptions_VerifyOption {
  /**
   * Not a verifiable build. (default)
   *
   * @generated from enum value: NOT_VERIFIED = 0;
   */
  NOT_VERIFIED = 0,

  /**
   * Verified build.
   *
   * @generated from enum value: VERIFIED = 1;
   */
  VERIFIED = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(BuildOptions_VerifyOption)
proto3.util.setEnumType(BuildOptions_VerifyOption, "google.devtools.cloudbuild.v1.BuildOptions.VerifyOption", [
  { no: 0, name: "NOT_VERIFIED" },
  { no: 1, name: "VERIFIED" },
]);

/**
 * Specifies the behavior when there is an error in the substitution checks.
 *
 * @generated from enum google.devtools.cloudbuild.v1.BuildOptions.SubstitutionOption
 */
export enum BuildOptions_SubstitutionOption {
  /**
   * Fails the build if error in substitutions checks, like missing
   * a substitution in the template or in the map.
   *
   * @generated from enum value: MUST_MATCH = 0;
   */
  MUST_MATCH = 0,

  /**
   * Do not fail the build if error in substitutions checks.
   *
   * @generated from enum value: ALLOW_LOOSE = 1;
   */
  ALLOW_LOOSE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(BuildOptions_SubstitutionOption)
proto3.util.setEnumType(BuildOptions_SubstitutionOption, "google.devtools.cloudbuild.v1.BuildOptions.SubstitutionOption", [
  { no: 0, name: "MUST_MATCH" },
  { no: 1, name: "ALLOW_LOOSE" },
]);

