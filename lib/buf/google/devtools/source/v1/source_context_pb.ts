// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/devtools/source/v1/source_context.proto (package google.devtools.source.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * A SourceContext is a reference to a tree of files. A SourceContext together
 * with a path point to a unique revision of a single file or directory.
 *
 * @generated from message google.devtools.source.v1.SourceContext
 */
export class SourceContext extends Message<SourceContext> {
  /**
   * A SourceContext can refer any one of the following types of repositories.
   *
   * @generated from oneof google.devtools.source.v1.SourceContext.context
   */
  context: {
    /**
     * A SourceContext referring to a revision in a cloud repo.
     *
     * @generated from field: google.devtools.source.v1.CloudRepoSourceContext cloud_repo = 1;
     */
    value: CloudRepoSourceContext;
    case: "cloudRepo";
  } | {
    /**
     * A SourceContext referring to a snapshot in a cloud workspace.
     *
     * @generated from field: google.devtools.source.v1.CloudWorkspaceSourceContext cloud_workspace = 2;
     */
    value: CloudWorkspaceSourceContext;
    case: "cloudWorkspace";
  } | {
    /**
     * A SourceContext referring to a Gerrit project.
     *
     * @generated from field: google.devtools.source.v1.GerritSourceContext gerrit = 3;
     */
    value: GerritSourceContext;
    case: "gerrit";
  } | {
    /**
     * A SourceContext referring to any third party Git repo (e.g. GitHub).
     *
     * @generated from field: google.devtools.source.v1.GitSourceContext git = 6;
     */
    value: GitSourceContext;
    case: "git";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SourceContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.source.v1.SourceContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cloud_repo", kind: "message", T: CloudRepoSourceContext, oneof: "context" },
    { no: 2, name: "cloud_workspace", kind: "message", T: CloudWorkspaceSourceContext, oneof: "context" },
    { no: 3, name: "gerrit", kind: "message", T: GerritSourceContext, oneof: "context" },
    { no: 6, name: "git", kind: "message", T: GitSourceContext, oneof: "context" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SourceContext {
    return new SourceContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SourceContext {
    return new SourceContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SourceContext {
    return new SourceContext().fromJsonString(jsonString, options);
  }

  static equals(a: SourceContext | PlainMessage<SourceContext> | undefined, b: SourceContext | PlainMessage<SourceContext> | undefined): boolean {
    return proto3.util.equals(SourceContext, a, b);
  }
}

/**
 * An ExtendedSourceContext is a SourceContext combined with additional
 * details describing the context.
 *
 * @generated from message google.devtools.source.v1.ExtendedSourceContext
 */
export class ExtendedSourceContext extends Message<ExtendedSourceContext> {
  /**
   * Any source context.
   *
   * @generated from field: google.devtools.source.v1.SourceContext context = 1;
   */
  context?: SourceContext;

  /**
   * Labels with user defined metadata.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ExtendedSourceContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.source.v1.ExtendedSourceContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "message", T: SourceContext },
    { no: 2, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExtendedSourceContext {
    return new ExtendedSourceContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExtendedSourceContext {
    return new ExtendedSourceContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExtendedSourceContext {
    return new ExtendedSourceContext().fromJsonString(jsonString, options);
  }

  static equals(a: ExtendedSourceContext | PlainMessage<ExtendedSourceContext> | undefined, b: ExtendedSourceContext | PlainMessage<ExtendedSourceContext> | undefined): boolean {
    return proto3.util.equals(ExtendedSourceContext, a, b);
  }
}

/**
 * An alias to a repo revision.
 *
 * @generated from message google.devtools.source.v1.AliasContext
 */
export class AliasContext extends Message<AliasContext> {
  /**
   * The alias kind.
   *
   * @generated from field: google.devtools.source.v1.AliasContext.Kind kind = 1;
   */
  kind = AliasContext_Kind.ANY;

  /**
   * The alias name.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<AliasContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.source.v1.AliasContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "enum", T: proto3.getEnumType(AliasContext_Kind) },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AliasContext {
    return new AliasContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AliasContext {
    return new AliasContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AliasContext {
    return new AliasContext().fromJsonString(jsonString, options);
  }

  static equals(a: AliasContext | PlainMessage<AliasContext> | undefined, b: AliasContext | PlainMessage<AliasContext> | undefined): boolean {
    return proto3.util.equals(AliasContext, a, b);
  }
}

/**
 * The type of an Alias.
 *
 * @generated from enum google.devtools.source.v1.AliasContext.Kind
 */
export enum AliasContext_Kind {
  /**
   * Do not use.
   *
   * @generated from enum value: ANY = 0;
   */
  ANY = 0,

  /**
   * Git tag
   *
   * @generated from enum value: FIXED = 1;
   */
  FIXED = 1,

  /**
   * Git branch
   *
   * @generated from enum value: MOVABLE = 2;
   */
  MOVABLE = 2,

  /**
   * OTHER is used to specify non-standard aliases, those not of the kinds
   * above. For example, if a Git repo has a ref named "refs/foo/bar", it
   * is considered to be of kind OTHER.
   *
   * @generated from enum value: OTHER = 4;
   */
  OTHER = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(AliasContext_Kind)
proto3.util.setEnumType(AliasContext_Kind, "google.devtools.source.v1.AliasContext.Kind", [
  { no: 0, name: "ANY" },
  { no: 1, name: "FIXED" },
  { no: 2, name: "MOVABLE" },
  { no: 4, name: "OTHER" },
]);

/**
 * A CloudRepoSourceContext denotes a particular revision in a cloud
 * repo (a repo hosted by the Google Cloud Platform).
 *
 * @generated from message google.devtools.source.v1.CloudRepoSourceContext
 */
export class CloudRepoSourceContext extends Message<CloudRepoSourceContext> {
  /**
   * The ID of the repo.
   *
   * @generated from field: google.devtools.source.v1.RepoId repo_id = 1;
   */
  repoId?: RepoId;

  /**
   * A revision in a cloud repository can be identified by either its revision
   * ID or its Alias.
   *
   * @generated from oneof google.devtools.source.v1.CloudRepoSourceContext.revision
   */
  revision: {
    /**
     * A revision ID.
     *
     * @generated from field: string revision_id = 2;
     */
    value: string;
    case: "revisionId";
  } | {
    /**
     * The name of an alias (branch, tag, etc.).
     *
     * @generated from field: string alias_name = 3;
     */
    value: string;
    case: "aliasName";
  } | {
    /**
     * An alias, which may be a branch or tag.
     *
     * @generated from field: google.devtools.source.v1.AliasContext alias_context = 4;
     */
    value: AliasContext;
    case: "aliasContext";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CloudRepoSourceContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.source.v1.CloudRepoSourceContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_id", kind: "message", T: RepoId },
    { no: 2, name: "revision_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "revision" },
    { no: 3, name: "alias_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "revision" },
    { no: 4, name: "alias_context", kind: "message", T: AliasContext, oneof: "revision" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloudRepoSourceContext {
    return new CloudRepoSourceContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloudRepoSourceContext {
    return new CloudRepoSourceContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloudRepoSourceContext {
    return new CloudRepoSourceContext().fromJsonString(jsonString, options);
  }

  static equals(a: CloudRepoSourceContext | PlainMessage<CloudRepoSourceContext> | undefined, b: CloudRepoSourceContext | PlainMessage<CloudRepoSourceContext> | undefined): boolean {
    return proto3.util.equals(CloudRepoSourceContext, a, b);
  }
}

/**
 * A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.
 *
 * @generated from message google.devtools.source.v1.CloudWorkspaceSourceContext
 */
export class CloudWorkspaceSourceContext extends Message<CloudWorkspaceSourceContext> {
  /**
   * The ID of the workspace.
   *
   * @generated from field: google.devtools.source.v1.CloudWorkspaceId workspace_id = 1;
   */
  workspaceId?: CloudWorkspaceId;

  /**
   * The ID of the snapshot.
   * An empty snapshot_id refers to the most recent snapshot.
   *
   * @generated from field: string snapshot_id = 2;
   */
  snapshotId = "";

  constructor(data?: PartialMessage<CloudWorkspaceSourceContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.source.v1.CloudWorkspaceSourceContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace_id", kind: "message", T: CloudWorkspaceId },
    { no: 2, name: "snapshot_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloudWorkspaceSourceContext {
    return new CloudWorkspaceSourceContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloudWorkspaceSourceContext {
    return new CloudWorkspaceSourceContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloudWorkspaceSourceContext {
    return new CloudWorkspaceSourceContext().fromJsonString(jsonString, options);
  }

  static equals(a: CloudWorkspaceSourceContext | PlainMessage<CloudWorkspaceSourceContext> | undefined, b: CloudWorkspaceSourceContext | PlainMessage<CloudWorkspaceSourceContext> | undefined): boolean {
    return proto3.util.equals(CloudWorkspaceSourceContext, a, b);
  }
}

/**
 * A SourceContext referring to a Gerrit project.
 *
 * @generated from message google.devtools.source.v1.GerritSourceContext
 */
export class GerritSourceContext extends Message<GerritSourceContext> {
  /**
   * The URI of a running Gerrit instance.
   *
   * @generated from field: string host_uri = 1;
   */
  hostUri = "";

  /**
   * The full project name within the host. Projects may be nested, so
   * "project/subproject" is a valid project name.
   * The "repo name" is hostURI/project.
   *
   * @generated from field: string gerrit_project = 2;
   */
  gerritProject = "";

  /**
   * A revision in a Gerrit project can be identified by either its revision ID
   * or its alias.
   *
   * @generated from oneof google.devtools.source.v1.GerritSourceContext.revision
   */
  revision: {
    /**
     * A revision (commit) ID.
     *
     * @generated from field: string revision_id = 3;
     */
    value: string;
    case: "revisionId";
  } | {
    /**
     * The name of an alias (branch, tag, etc.).
     *
     * @generated from field: string alias_name = 4;
     */
    value: string;
    case: "aliasName";
  } | {
    /**
     * An alias, which may be a branch or tag.
     *
     * @generated from field: google.devtools.source.v1.AliasContext alias_context = 5;
     */
    value: AliasContext;
    case: "aliasContext";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GerritSourceContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.source.v1.GerritSourceContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gerrit_project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "revision_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "revision" },
    { no: 4, name: "alias_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "revision" },
    { no: 5, name: "alias_context", kind: "message", T: AliasContext, oneof: "revision" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GerritSourceContext {
    return new GerritSourceContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GerritSourceContext {
    return new GerritSourceContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GerritSourceContext {
    return new GerritSourceContext().fromJsonString(jsonString, options);
  }

  static equals(a: GerritSourceContext | PlainMessage<GerritSourceContext> | undefined, b: GerritSourceContext | PlainMessage<GerritSourceContext> | undefined): boolean {
    return proto3.util.equals(GerritSourceContext, a, b);
  }
}

/**
 * A GitSourceContext denotes a particular revision in a third party Git
 * repository (e.g. GitHub).
 *
 * @generated from message google.devtools.source.v1.GitSourceContext
 */
export class GitSourceContext extends Message<GitSourceContext> {
  /**
   * Git repository URL.
   *
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * Git commit hash.
   * required.
   *
   * @generated from field: string revision_id = 2;
   */
  revisionId = "";

  constructor(data?: PartialMessage<GitSourceContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.source.v1.GitSourceContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "revision_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GitSourceContext {
    return new GitSourceContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GitSourceContext {
    return new GitSourceContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GitSourceContext {
    return new GitSourceContext().fromJsonString(jsonString, options);
  }

  static equals(a: GitSourceContext | PlainMessage<GitSourceContext> | undefined, b: GitSourceContext | PlainMessage<GitSourceContext> | undefined): boolean {
    return proto3.util.equals(GitSourceContext, a, b);
  }
}

/**
 * A unique identifier for a cloud repo.
 *
 * @generated from message google.devtools.source.v1.RepoId
 */
export class RepoId extends Message<RepoId> {
  /**
   * A cloud repository can be identified by either its project ID and
   * repository name combination, or its globally unique identifier.
   *
   * @generated from oneof google.devtools.source.v1.RepoId.id
   */
  id: {
    /**
     * A combination of a project ID and a repo name.
     *
     * @generated from field: google.devtools.source.v1.ProjectRepoId project_repo_id = 1;
     */
    value: ProjectRepoId;
    case: "projectRepoId";
  } | {
    /**
     * A server-assigned, globally unique identifier.
     *
     * @generated from field: string uid = 2;
     */
    value: string;
    case: "uid";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RepoId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.source.v1.RepoId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_repo_id", kind: "message", T: ProjectRepoId, oneof: "id" },
    { no: 2, name: "uid", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "id" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RepoId {
    return new RepoId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RepoId {
    return new RepoId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RepoId {
    return new RepoId().fromJsonString(jsonString, options);
  }

  static equals(a: RepoId | PlainMessage<RepoId> | undefined, b: RepoId | PlainMessage<RepoId> | undefined): boolean {
    return proto3.util.equals(RepoId, a, b);
  }
}

/**
 * Selects a repo using a Google Cloud Platform project ID
 * (e.g. winged-cargo-31) and a repo name within that project.
 *
 * @generated from message google.devtools.source.v1.ProjectRepoId
 */
export class ProjectRepoId extends Message<ProjectRepoId> {
  /**
   * The ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * The name of the repo. Leave empty for the default repo.
   *
   * @generated from field: string repo_name = 2;
   */
  repoName = "";

  constructor(data?: PartialMessage<ProjectRepoId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.source.v1.ProjectRepoId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repo_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectRepoId {
    return new ProjectRepoId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectRepoId {
    return new ProjectRepoId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectRepoId {
    return new ProjectRepoId().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectRepoId | PlainMessage<ProjectRepoId> | undefined, b: ProjectRepoId | PlainMessage<ProjectRepoId> | undefined): boolean {
    return proto3.util.equals(ProjectRepoId, a, b);
  }
}

/**
 * A CloudWorkspaceId is a unique identifier for a cloud workspace.
 * A cloud workspace is a place associated with a repo where modified files
 * can be stored before they are committed.
 *
 * @generated from message google.devtools.source.v1.CloudWorkspaceId
 */
export class CloudWorkspaceId extends Message<CloudWorkspaceId> {
  /**
   * The ID of the repo containing the workspace.
   *
   * @generated from field: google.devtools.source.v1.RepoId repo_id = 1;
   */
  repoId?: RepoId;

  /**
   * The unique name of the workspace within the repo.  This is the name
   * chosen by the client in the Source API's CreateWorkspace method.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<CloudWorkspaceId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.source.v1.CloudWorkspaceId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_id", kind: "message", T: RepoId },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloudWorkspaceId {
    return new CloudWorkspaceId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloudWorkspaceId {
    return new CloudWorkspaceId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloudWorkspaceId {
    return new CloudWorkspaceId().fromJsonString(jsonString, options);
  }

  static equals(a: CloudWorkspaceId | PlainMessage<CloudWorkspaceId> | undefined, b: CloudWorkspaceId | PlainMessage<CloudWorkspaceId> | undefined): boolean {
    return proto3.util.equals(CloudWorkspaceId, a, b);
  }
}

