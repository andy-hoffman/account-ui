// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/devtools/sourcerepo/v1/sourcerepo.proto (package google.devtools.sourcerepo.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * A repository (or repo) is a Git repository storing versioned source content.
 *
 * @generated from message google.devtools.sourcerepo.v1.Repo
 */
export class Repo extends Message<Repo> {
  /**
   * Resource name of the repository, of the form
   * `projects/<project>/repos/<repo>`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The disk usage of the repo, in bytes.
   * Only returned by GetRepo.
   *
   * @generated from field: int64 size = 2;
   */
  size = protoInt64.zero;

  /**
   * URL to clone the repository from Google Cloud Source Repositories.
   *
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * How this repository mirrors a repository managed by another service.
   *
   * @generated from field: google.devtools.sourcerepo.v1.MirrorConfig mirror_config = 4;
   */
  mirrorConfig?: MirrorConfig;

  constructor(data?: PartialMessage<Repo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.sourcerepo.v1.Repo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "mirror_config", kind: "message", T: MirrorConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Repo {
    return new Repo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Repo {
    return new Repo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Repo {
    return new Repo().fromJsonString(jsonString, options);
  }

  static equals(a: Repo | PlainMessage<Repo> | undefined, b: Repo | PlainMessage<Repo> | undefined): boolean {
    return proto3.util.equals(Repo, a, b);
  }
}

/**
 * Configuration to automatically mirror a repository from another
 * hosting service, for example GitHub or BitBucket.
 *
 * @generated from message google.devtools.sourcerepo.v1.MirrorConfig
 */
export class MirrorConfig extends Message<MirrorConfig> {
  /**
   * URL of the main repository at the other hosting service.
   *
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * ID of the webhook listening to updates to trigger mirroring.
   * Removing this webook from the other hosting service will stop
   * Google Cloud Source Repositories from receiving notifications,
   * and thereby disabling mirroring.
   *
   * @generated from field: string webhook_id = 2;
   */
  webhookId = "";

  /**
   * ID of the SSH deploy key at the other hosting service.
   * Removing this key from the other service would deauthorize
   * Google Cloud Source Repositories from mirroring.
   *
   * @generated from field: string deploy_key_id = 3;
   */
  deployKeyId = "";

  constructor(data?: PartialMessage<MirrorConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.sourcerepo.v1.MirrorConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "webhook_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deploy_key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MirrorConfig {
    return new MirrorConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MirrorConfig {
    return new MirrorConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MirrorConfig {
    return new MirrorConfig().fromJsonString(jsonString, options);
  }

  static equals(a: MirrorConfig | PlainMessage<MirrorConfig> | undefined, b: MirrorConfig | PlainMessage<MirrorConfig> | undefined): boolean {
    return proto3.util.equals(MirrorConfig, a, b);
  }
}

/**
 * Request for GetRepo.
 *
 * @generated from message google.devtools.sourcerepo.v1.GetRepoRequest
 */
export class GetRepoRequest extends Message<GetRepoRequest> {
  /**
   * The name of the requested repository. Values are of the form
   * `projects/<project>/repos/<repo>`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetRepoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.sourcerepo.v1.GetRepoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepoRequest {
    return new GetRepoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepoRequest {
    return new GetRepoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepoRequest {
    return new GetRepoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepoRequest | PlainMessage<GetRepoRequest> | undefined, b: GetRepoRequest | PlainMessage<GetRepoRequest> | undefined): boolean {
    return proto3.util.equals(GetRepoRequest, a, b);
  }
}

/**
 * Request for ListRepos.
 *
 * @generated from message google.devtools.sourcerepo.v1.ListReposRequest
 */
export class ListReposRequest extends Message<ListReposRequest> {
  /**
   * The project ID whose repos should be listed. Values are of the form
   * `projects/<project>`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Maximum number of repositories to return; between 1 and 500.
   * If not set or zero, defaults to 100 at the server.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * Resume listing repositories where a prior ListReposResponse
   * left off. This is an opaque token that must be obtained from
   * a recent, prior ListReposResponse's next_page_token field.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListReposRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.sourcerepo.v1.ListReposRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListReposRequest {
    return new ListReposRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListReposRequest {
    return new ListReposRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListReposRequest {
    return new ListReposRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListReposRequest | PlainMessage<ListReposRequest> | undefined, b: ListReposRequest | PlainMessage<ListReposRequest> | undefined): boolean {
    return proto3.util.equals(ListReposRequest, a, b);
  }
}

/**
 * Response for ListRepos.  The size is not set in the returned repositories.
 *
 * @generated from message google.devtools.sourcerepo.v1.ListReposResponse
 */
export class ListReposResponse extends Message<ListReposResponse> {
  /**
   * The listed repos.
   *
   * @generated from field: repeated google.devtools.sourcerepo.v1.Repo repos = 1;
   */
  repos: Repo[] = [];

  /**
   * If non-empty, additional repositories exist within the project. These
   * can be retrieved by including this value in the next ListReposRequest's
   * page_token field.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListReposResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.sourcerepo.v1.ListReposResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repos", kind: "message", T: Repo, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListReposResponse {
    return new ListReposResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListReposResponse {
    return new ListReposResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListReposResponse {
    return new ListReposResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListReposResponse | PlainMessage<ListReposResponse> | undefined, b: ListReposResponse | PlainMessage<ListReposResponse> | undefined): boolean {
    return proto3.util.equals(ListReposResponse, a, b);
  }
}

/**
 * Request for CreateRepo
 *
 * @generated from message google.devtools.sourcerepo.v1.CreateRepoRequest
 */
export class CreateRepoRequest extends Message<CreateRepoRequest> {
  /**
   * The project in which to create the repo. Values are of the form
   * `projects/<project>`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The repo to create.  Only name should be set; setting other fields
   * is an error.  The project in the name should match the parent field.
   *
   * @generated from field: google.devtools.sourcerepo.v1.Repo repo = 2;
   */
  repo?: Repo;

  constructor(data?: PartialMessage<CreateRepoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.sourcerepo.v1.CreateRepoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repo", kind: "message", T: Repo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRepoRequest {
    return new CreateRepoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRepoRequest {
    return new CreateRepoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRepoRequest {
    return new CreateRepoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRepoRequest | PlainMessage<CreateRepoRequest> | undefined, b: CreateRepoRequest | PlainMessage<CreateRepoRequest> | undefined): boolean {
    return proto3.util.equals(CreateRepoRequest, a, b);
  }
}

/**
 * Request for DeleteRepo.
 *
 * @generated from message google.devtools.sourcerepo.v1.DeleteRepoRequest
 */
export class DeleteRepoRequest extends Message<DeleteRepoRequest> {
  /**
   * The name of the repo to delete. Values are of the form
   * `projects/<project>/repos/<repo>`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteRepoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.sourcerepo.v1.DeleteRepoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRepoRequest {
    return new DeleteRepoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRepoRequest {
    return new DeleteRepoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRepoRequest {
    return new DeleteRepoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRepoRequest | PlainMessage<DeleteRepoRequest> | undefined, b: DeleteRepoRequest | PlainMessage<DeleteRepoRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRepoRequest, a, b);
  }
}

