// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/devtools/clouderrorreporting/v1beta1/report_errors_service.proto (package google.devtools.clouderrorreporting.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { ErrorContext, ServiceContext } from "./common_pb.js";

/**
 * A request for reporting an individual error event.
 *
 * @generated from message google.devtools.clouderrorreporting.v1beta1.ReportErrorEventRequest
 */
export class ReportErrorEventRequest extends Message<ReportErrorEventRequest> {
  /**
   * [Required] The resource name of the Google Cloud Platform project. Written
   * as `projects/` plus the
   * [Google Cloud Platform project ID](https://support.google.com/cloud/answer/6158840).
   * Example: `projects/my-project-123`.
   *
   * @generated from field: string project_name = 1;
   */
  projectName = "";

  /**
   * [Required] The error event to be reported.
   *
   * @generated from field: google.devtools.clouderrorreporting.v1beta1.ReportedErrorEvent event = 2;
   */
  event?: ReportedErrorEvent;

  constructor(data?: PartialMessage<ReportErrorEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.clouderrorreporting.v1beta1.ReportErrorEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event", kind: "message", T: ReportedErrorEvent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportErrorEventRequest {
    return new ReportErrorEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportErrorEventRequest {
    return new ReportErrorEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportErrorEventRequest {
    return new ReportErrorEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReportErrorEventRequest | PlainMessage<ReportErrorEventRequest> | undefined, b: ReportErrorEventRequest | PlainMessage<ReportErrorEventRequest> | undefined): boolean {
    return proto3.util.equals(ReportErrorEventRequest, a, b);
  }
}

/**
 * Response for reporting an individual error event.
 * Data may be added to this message in the future.
 *
 * @generated from message google.devtools.clouderrorreporting.v1beta1.ReportErrorEventResponse
 */
export class ReportErrorEventResponse extends Message<ReportErrorEventResponse> {
  constructor(data?: PartialMessage<ReportErrorEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.clouderrorreporting.v1beta1.ReportErrorEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportErrorEventResponse {
    return new ReportErrorEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportErrorEventResponse {
    return new ReportErrorEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportErrorEventResponse {
    return new ReportErrorEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReportErrorEventResponse | PlainMessage<ReportErrorEventResponse> | undefined, b: ReportErrorEventResponse | PlainMessage<ReportErrorEventResponse> | undefined): boolean {
    return proto3.util.equals(ReportErrorEventResponse, a, b);
  }
}

/**
 * An error event which is reported to the Error Reporting system.
 *
 * @generated from message google.devtools.clouderrorreporting.v1beta1.ReportedErrorEvent
 */
export class ReportedErrorEvent extends Message<ReportedErrorEvent> {
  /**
   * [Optional] Time when the event occurred.
   * If not provided, the time when the event was received by the
   * Error Reporting system will be used.
   *
   * @generated from field: google.protobuf.Timestamp event_time = 1;
   */
  eventTime?: Timestamp;

  /**
   * [Required] The service context in which this error has occurred.
   *
   * @generated from field: google.devtools.clouderrorreporting.v1beta1.ServiceContext service_context = 2;
   */
  serviceContext?: ServiceContext;

  /**
   * [Required] A message describing the error. The message can contain an
   * exception stack in one of the supported programming languages and formats.
   * In that case, the message is parsed and detailed exception information
   * is returned when retrieving the error event again.
   *
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * [Optional] A description of the context in which the error occurred.
   *
   * @generated from field: google.devtools.clouderrorreporting.v1beta1.ErrorContext context = 4;
   */
  context?: ErrorContext;

  constructor(data?: PartialMessage<ReportedErrorEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.devtools.clouderrorreporting.v1beta1.ReportedErrorEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_time", kind: "message", T: Timestamp },
    { no: 2, name: "service_context", kind: "message", T: ServiceContext },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "context", kind: "message", T: ErrorContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportedErrorEvent {
    return new ReportedErrorEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportedErrorEvent {
    return new ReportedErrorEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportedErrorEvent {
    return new ReportedErrorEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ReportedErrorEvent | PlainMessage<ReportedErrorEvent> | undefined, b: ReportedErrorEvent | PlainMessage<ReportedErrorEvent> | undefined): boolean {
    return proto3.util.equals(ReportedErrorEvent, a, b);
  }
}

