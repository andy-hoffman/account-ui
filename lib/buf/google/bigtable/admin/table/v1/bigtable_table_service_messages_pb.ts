// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/bigtable/admin/table/v1/bigtable_table_service_messages.proto (package google.bigtable.admin.table.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ColumnFamily, Table } from "./bigtable_table_data_pb.js";

/**
 * @generated from message google.bigtable.admin.table.v1.CreateTableRequest
 */
export class CreateTableRequest extends Message<CreateTableRequest> {
  /**
   * The unique name of the cluster in which to create the new table.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The name by which the new table should be referred to within the cluster,
   * e.g. "foobar" rather than "<cluster_name>/tables/foobar".
   *
   * @generated from field: string table_id = 2;
   */
  tableId = "";

  /**
   * The Table to create. The `name` field of the Table and all of its
   * ColumnFamilies must be left blank, and will be populated in the response.
   *
   * @generated from field: google.bigtable.admin.table.v1.Table table = 3;
   */
  table?: Table;

  /**
   * The optional list of row keys that will be used to initially split the
   * table into several tablets (Tablets are similar to HBase regions).
   * Given two split keys, "s1" and "s2", three tablets will be created,
   * spanning the key ranges: [, s1), [s1, s2), [s2, ).
   *
   * Example:
   *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
   *                 "other", "zz"]
   *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
   *  * Key assignment:
   *    - Tablet 1 [, apple)                => {"a"}.
   *    - Tablet 2 [apple, customer_1)      => {"apple", "custom"}.
   *    - Tablet 3 [customer_1, customer_2) => {"customer_1"}.
   *    - Tablet 4 [customer_2, other)      => {"customer_2"}.
   *    - Tablet 5 [other, )                => {"other", "zz"}.
   *
   * @generated from field: repeated string initial_split_keys = 4;
   */
  initialSplitKeys: string[] = [];

  constructor(data?: PartialMessage<CreateTableRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.table.v1.CreateTableRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "table", kind: "message", T: Table },
    { no: 4, name: "initial_split_keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTableRequest {
    return new CreateTableRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTableRequest {
    return new CreateTableRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTableRequest {
    return new CreateTableRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTableRequest | PlainMessage<CreateTableRequest> | undefined, b: CreateTableRequest | PlainMessage<CreateTableRequest> | undefined): boolean {
    return proto3.util.equals(CreateTableRequest, a, b);
  }
}

/**
 * @generated from message google.bigtable.admin.table.v1.ListTablesRequest
 */
export class ListTablesRequest extends Message<ListTablesRequest> {
  /**
   * The unique name of the cluster for which tables should be listed.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<ListTablesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.table.v1.ListTablesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTablesRequest {
    return new ListTablesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTablesRequest {
    return new ListTablesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTablesRequest {
    return new ListTablesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTablesRequest | PlainMessage<ListTablesRequest> | undefined, b: ListTablesRequest | PlainMessage<ListTablesRequest> | undefined): boolean {
    return proto3.util.equals(ListTablesRequest, a, b);
  }
}

/**
 * @generated from message google.bigtable.admin.table.v1.ListTablesResponse
 */
export class ListTablesResponse extends Message<ListTablesResponse> {
  /**
   * The tables present in the requested cluster.
   * At present, only the names of the tables are populated.
   *
   * @generated from field: repeated google.bigtable.admin.table.v1.Table tables = 1;
   */
  tables: Table[] = [];

  constructor(data?: PartialMessage<ListTablesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.table.v1.ListTablesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tables", kind: "message", T: Table, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTablesResponse {
    return new ListTablesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTablesResponse {
    return new ListTablesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTablesResponse {
    return new ListTablesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTablesResponse | PlainMessage<ListTablesResponse> | undefined, b: ListTablesResponse | PlainMessage<ListTablesResponse> | undefined): boolean {
    return proto3.util.equals(ListTablesResponse, a, b);
  }
}

/**
 * @generated from message google.bigtable.admin.table.v1.GetTableRequest
 */
export class GetTableRequest extends Message<GetTableRequest> {
  /**
   * The unique name of the requested table.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetTableRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.table.v1.GetTableRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTableRequest {
    return new GetTableRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTableRequest {
    return new GetTableRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTableRequest {
    return new GetTableRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTableRequest | PlainMessage<GetTableRequest> | undefined, b: GetTableRequest | PlainMessage<GetTableRequest> | undefined): boolean {
    return proto3.util.equals(GetTableRequest, a, b);
  }
}

/**
 * @generated from message google.bigtable.admin.table.v1.DeleteTableRequest
 */
export class DeleteTableRequest extends Message<DeleteTableRequest> {
  /**
   * The unique name of the table to be deleted.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteTableRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.table.v1.DeleteTableRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTableRequest {
    return new DeleteTableRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTableRequest {
    return new DeleteTableRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTableRequest {
    return new DeleteTableRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTableRequest | PlainMessage<DeleteTableRequest> | undefined, b: DeleteTableRequest | PlainMessage<DeleteTableRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTableRequest, a, b);
  }
}

/**
 * @generated from message google.bigtable.admin.table.v1.RenameTableRequest
 */
export class RenameTableRequest extends Message<RenameTableRequest> {
  /**
   * The current unique name of the table.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The new name by which the table should be referred to within its containing
   * cluster, e.g. "foobar" rather than "<cluster_name>/tables/foobar".
   *
   * @generated from field: string new_id = 2;
   */
  newId = "";

  constructor(data?: PartialMessage<RenameTableRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.table.v1.RenameTableRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameTableRequest {
    return new RenameTableRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameTableRequest {
    return new RenameTableRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameTableRequest {
    return new RenameTableRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenameTableRequest | PlainMessage<RenameTableRequest> | undefined, b: RenameTableRequest | PlainMessage<RenameTableRequest> | undefined): boolean {
    return proto3.util.equals(RenameTableRequest, a, b);
  }
}

/**
 * @generated from message google.bigtable.admin.table.v1.CreateColumnFamilyRequest
 */
export class CreateColumnFamilyRequest extends Message<CreateColumnFamilyRequest> {
  /**
   * The unique name of the table in which to create the new column family.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The name by which the new column family should be referred to within the
   * table, e.g. "foobar" rather than "<table_name>/columnFamilies/foobar".
   *
   * @generated from field: string column_family_id = 2;
   */
  columnFamilyId = "";

  /**
   * The column family to create. The `name` field must be left blank.
   *
   * @generated from field: google.bigtable.admin.table.v1.ColumnFamily column_family = 3;
   */
  columnFamily?: ColumnFamily;

  constructor(data?: PartialMessage<CreateColumnFamilyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.table.v1.CreateColumnFamilyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "column_family_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_family", kind: "message", T: ColumnFamily },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateColumnFamilyRequest {
    return new CreateColumnFamilyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateColumnFamilyRequest {
    return new CreateColumnFamilyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateColumnFamilyRequest {
    return new CreateColumnFamilyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateColumnFamilyRequest | PlainMessage<CreateColumnFamilyRequest> | undefined, b: CreateColumnFamilyRequest | PlainMessage<CreateColumnFamilyRequest> | undefined): boolean {
    return proto3.util.equals(CreateColumnFamilyRequest, a, b);
  }
}

/**
 * @generated from message google.bigtable.admin.table.v1.DeleteColumnFamilyRequest
 */
export class DeleteColumnFamilyRequest extends Message<DeleteColumnFamilyRequest> {
  /**
   * The unique name of the column family to be deleted.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteColumnFamilyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.table.v1.DeleteColumnFamilyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteColumnFamilyRequest {
    return new DeleteColumnFamilyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteColumnFamilyRequest {
    return new DeleteColumnFamilyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteColumnFamilyRequest {
    return new DeleteColumnFamilyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteColumnFamilyRequest | PlainMessage<DeleteColumnFamilyRequest> | undefined, b: DeleteColumnFamilyRequest | PlainMessage<DeleteColumnFamilyRequest> | undefined): boolean {
    return proto3.util.equals(DeleteColumnFamilyRequest, a, b);
  }
}

/**
 * @generated from message google.bigtable.admin.table.v1.BulkDeleteRowsRequest
 */
export class BulkDeleteRowsRequest extends Message<BulkDeleteRowsRequest> {
  /**
   * The unique name of the table on which to perform the bulk delete
   *
   * @generated from field: string table_name = 1;
   */
  tableName = "";

  /**
   * @generated from oneof google.bigtable.admin.table.v1.BulkDeleteRowsRequest.target
   */
  target: {
    /**
     * Delete all rows that start with this row key prefix. Prefix cannot be
     * zero length.
     *
     * @generated from field: bytes row_key_prefix = 2;
     */
    value: Uint8Array;
    case: "rowKeyPrefix";
  } | {
    /**
     * Delete all rows in the table. Setting this to false is a no-op.
     *
     * @generated from field: bool delete_all_data_from_table = 3;
     */
    value: boolean;
    case: "deleteAllDataFromTable";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<BulkDeleteRowsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.table.v1.BulkDeleteRowsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "row_key_prefix", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "target" },
    { no: 3, name: "delete_all_data_from_table", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "target" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BulkDeleteRowsRequest {
    return new BulkDeleteRowsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BulkDeleteRowsRequest {
    return new BulkDeleteRowsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BulkDeleteRowsRequest {
    return new BulkDeleteRowsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BulkDeleteRowsRequest | PlainMessage<BulkDeleteRowsRequest> | undefined, b: BulkDeleteRowsRequest | PlainMessage<BulkDeleteRowsRequest> | undefined): boolean {
    return proto3.util.equals(BulkDeleteRowsRequest, a, b);
  }
}

