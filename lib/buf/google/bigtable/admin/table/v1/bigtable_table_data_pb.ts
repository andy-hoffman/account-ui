// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/bigtable/admin/table/v1/bigtable_table_data.proto (package google.bigtable.admin.table.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";
import { Operation } from "../../../../longrunning/operations_pb.js";

/**
 * A collection of user data indexed by row, column, and timestamp.
 * Each table is served using the resources of its parent cluster.
 *
 * @generated from message google.bigtable.admin.table.v1.Table
 */
export class Table extends Message<Table> {
  /**
   * A unique identifier of the form
   * <cluster_name>/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * If this Table is in the process of being created, the Operation used to
   * track its progress. As long as this operation is present, the Table will
   * not accept any Table Admin or Read/Write requests.
   *
   * @generated from field: google.longrunning.Operation current_operation = 2;
   */
  currentOperation?: Operation;

  /**
   * The column families configured for this table, mapped by column family id.
   *
   * @generated from field: map<string, google.bigtable.admin.table.v1.ColumnFamily> column_families = 3;
   */
  columnFamilies: { [key: string]: ColumnFamily } = {};

  /**
   * The granularity (e.g. MILLIS, MICROS) at which timestamps are stored in
   * this table. Timestamps not matching the granularity will be rejected.
   * Cannot be changed once the table is created.
   *
   * @generated from field: google.bigtable.admin.table.v1.Table.TimestampGranularity granularity = 4;
   */
  granularity = Table_TimestampGranularity.MILLIS;

  constructor(data?: PartialMessage<Table>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.table.v1.Table";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "current_operation", kind: "message", T: Operation },
    { no: 3, name: "column_families", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ColumnFamily} },
    { no: 4, name: "granularity", kind: "enum", T: proto3.getEnumType(Table_TimestampGranularity) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Table {
    return new Table().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Table {
    return new Table().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Table {
    return new Table().fromJsonString(jsonString, options);
  }

  static equals(a: Table | PlainMessage<Table> | undefined, b: Table | PlainMessage<Table> | undefined): boolean {
    return proto3.util.equals(Table, a, b);
  }
}

/**
 * @generated from enum google.bigtable.admin.table.v1.Table.TimestampGranularity
 */
export enum Table_TimestampGranularity {
  /**
   * @generated from enum value: MILLIS = 0;
   */
  MILLIS = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(Table_TimestampGranularity)
proto3.util.setEnumType(Table_TimestampGranularity, "google.bigtable.admin.table.v1.Table.TimestampGranularity", [
  { no: 0, name: "MILLIS" },
]);

/**
 * A set of columns within a table which share a common configuration.
 *
 * @generated from message google.bigtable.admin.table.v1.ColumnFamily
 */
export class ColumnFamily extends Message<ColumnFamily> {
  /**
   * A unique identifier of the form <table_name>/columnFamilies/[-_.a-zA-Z0-9]+
   * The last segment is the same as the "name" field in
   * google.bigtable.v1.Family.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Garbage collection expression specified by the following grammar:
   *   GC = EXPR
   *      | "" ;
   *   EXPR = EXPR, "||", EXPR              (* lowest precedence *)
   *        | EXPR, "&&", EXPR
   *        | "(", EXPR, ")"                (* highest precedence *)
   *        | PROP ;
   *   PROP = "version() >", NUM32
   *        | "age() >", NUM64, [ UNIT ] ;
   *   NUM32 = non-zero-digit { digit } ;    (* # NUM32 <= 2^32 - 1 *)
   *   NUM64 = non-zero-digit { digit } ;    (* # NUM64 <= 2^63 - 1 *)
   *   UNIT =  "d" | "h" | "m"  (* d=days, h=hours, m=minutes, else micros *)
   * GC expressions can be up to 500 characters in length
   *
   * The different types of PROP are defined as follows:
   *   version() - cell index, counting from most recent and starting at 1
   *   age() - age of the cell (current time minus cell timestamp)
   *
   * Example: "version() > 3 || (age() > 3d && version() > 1)"
   *   drop cells beyond the most recent three, and drop cells older than three
   *   days unless they're the most recent cell in the row/column
   *
   * Garbage collection executes opportunistically in the background, and so
   * it's possible for reads to return a cell even if it matches the active GC
   * expression for its family.
   *
   * @generated from field: string gc_expression = 2;
   */
  gcExpression = "";

  /**
   * Garbage collection rule specified as a protobuf.
   * Supersedes `gc_expression`.
   * Must serialize to at most 500 bytes.
   *
   * NOTE: Garbage collection executes opportunistically in the background, and
   * so it's possible for reads to return a cell even if it matches the active
   * GC expression for its family.
   *
   * @generated from field: google.bigtable.admin.table.v1.GcRule gc_rule = 3;
   */
  gcRule?: GcRule;

  constructor(data?: PartialMessage<ColumnFamily>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.table.v1.ColumnFamily";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gc_expression", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gc_rule", kind: "message", T: GcRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnFamily {
    return new ColumnFamily().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnFamily {
    return new ColumnFamily().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnFamily {
    return new ColumnFamily().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnFamily | PlainMessage<ColumnFamily> | undefined, b: ColumnFamily | PlainMessage<ColumnFamily> | undefined): boolean {
    return proto3.util.equals(ColumnFamily, a, b);
  }
}

/**
 * Rule for determining which cells to delete during garbage collection.
 *
 * @generated from message google.bigtable.admin.table.v1.GcRule
 */
export class GcRule extends Message<GcRule> {
  /**
   * @generated from oneof google.bigtable.admin.table.v1.GcRule.rule
   */
  rule: {
    /**
     * Delete all cells in a column except the most recent N.
     *
     * @generated from field: int32 max_num_versions = 1;
     */
    value: number;
    case: "maxNumVersions";
  } | {
    /**
     * Delete cells in a column older than the given age.
     * Values must be at least one millisecond, and will be truncated to
     * microsecond granularity.
     *
     * @generated from field: google.protobuf.Duration max_age = 2;
     */
    value: Duration;
    case: "maxAge";
  } | {
    /**
     * Delete cells that would be deleted by every nested rule.
     *
     * @generated from field: google.bigtable.admin.table.v1.GcRule.Intersection intersection = 3;
     */
    value: GcRule_Intersection;
    case: "intersection";
  } | {
    /**
     * Delete cells that would be deleted by any nested rule.
     *
     * @generated from field: google.bigtable.admin.table.v1.GcRule.Union union = 4;
     */
    value: GcRule_Union;
    case: "union";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GcRule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.table.v1.GcRule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_num_versions", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "rule" },
    { no: 2, name: "max_age", kind: "message", T: Duration, oneof: "rule" },
    { no: 3, name: "intersection", kind: "message", T: GcRule_Intersection, oneof: "rule" },
    { no: 4, name: "union", kind: "message", T: GcRule_Union, oneof: "rule" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GcRule {
    return new GcRule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GcRule {
    return new GcRule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GcRule {
    return new GcRule().fromJsonString(jsonString, options);
  }

  static equals(a: GcRule | PlainMessage<GcRule> | undefined, b: GcRule | PlainMessage<GcRule> | undefined): boolean {
    return proto3.util.equals(GcRule, a, b);
  }
}

/**
 * A GcRule which deletes cells matching all of the given rules.
 *
 * @generated from message google.bigtable.admin.table.v1.GcRule.Intersection
 */
export class GcRule_Intersection extends Message<GcRule_Intersection> {
  /**
   * Only delete cells which would be deleted by every element of `rules`.
   *
   * @generated from field: repeated google.bigtable.admin.table.v1.GcRule rules = 1;
   */
  rules: GcRule[] = [];

  constructor(data?: PartialMessage<GcRule_Intersection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.table.v1.GcRule.Intersection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rules", kind: "message", T: GcRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GcRule_Intersection {
    return new GcRule_Intersection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GcRule_Intersection {
    return new GcRule_Intersection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GcRule_Intersection {
    return new GcRule_Intersection().fromJsonString(jsonString, options);
  }

  static equals(a: GcRule_Intersection | PlainMessage<GcRule_Intersection> | undefined, b: GcRule_Intersection | PlainMessage<GcRule_Intersection> | undefined): boolean {
    return proto3.util.equals(GcRule_Intersection, a, b);
  }
}

/**
 * A GcRule which deletes cells matching any of the given rules.
 *
 * @generated from message google.bigtable.admin.table.v1.GcRule.Union
 */
export class GcRule_Union extends Message<GcRule_Union> {
  /**
   * Delete cells which would be deleted by any element of `rules`.
   *
   * @generated from field: repeated google.bigtable.admin.table.v1.GcRule rules = 1;
   */
  rules: GcRule[] = [];

  constructor(data?: PartialMessage<GcRule_Union>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.table.v1.GcRule.Union";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rules", kind: "message", T: GcRule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GcRule_Union {
    return new GcRule_Union().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GcRule_Union {
    return new GcRule_Union().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GcRule_Union {
    return new GcRule_Union().fromJsonString(jsonString, options);
  }

  static equals(a: GcRule_Union | PlainMessage<GcRule_Union> | undefined, b: GcRule_Union | PlainMessage<GcRule_Union> | undefined): boolean {
    return proto3.util.equals(GcRule_Union, a, b);
  }
}

