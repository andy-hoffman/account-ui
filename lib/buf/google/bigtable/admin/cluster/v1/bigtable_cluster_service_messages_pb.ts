// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/bigtable/admin/cluster/v1/bigtable_cluster_service_messages.proto (package google.bigtable.admin.cluster.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Cluster, Zone } from "./bigtable_cluster_data_pb.js";

/**
 * Request message for BigtableClusterService.ListZones.
 *
 * @generated from message google.bigtable.admin.cluster.v1.ListZonesRequest
 */
export class ListZonesRequest extends Message<ListZonesRequest> {
  /**
   * The unique name of the project for which a list of supported zones is
   * requested.
   * Values are of the form projects/<project>
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<ListZonesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.cluster.v1.ListZonesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListZonesRequest {
    return new ListZonesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListZonesRequest {
    return new ListZonesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListZonesRequest {
    return new ListZonesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListZonesRequest | PlainMessage<ListZonesRequest> | undefined, b: ListZonesRequest | PlainMessage<ListZonesRequest> | undefined): boolean {
    return proto3.util.equals(ListZonesRequest, a, b);
  }
}

/**
 * Response message for BigtableClusterService.ListZones.
 *
 * @generated from message google.bigtable.admin.cluster.v1.ListZonesResponse
 */
export class ListZonesResponse extends Message<ListZonesResponse> {
  /**
   * The list of requested zones.
   *
   * @generated from field: repeated google.bigtable.admin.cluster.v1.Zone zones = 1;
   */
  zones: Zone[] = [];

  constructor(data?: PartialMessage<ListZonesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.cluster.v1.ListZonesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "zones", kind: "message", T: Zone, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListZonesResponse {
    return new ListZonesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListZonesResponse {
    return new ListZonesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListZonesResponse {
    return new ListZonesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListZonesResponse | PlainMessage<ListZonesResponse> | undefined, b: ListZonesResponse | PlainMessage<ListZonesResponse> | undefined): boolean {
    return proto3.util.equals(ListZonesResponse, a, b);
  }
}

/**
 * Request message for BigtableClusterService.GetCluster.
 *
 * @generated from message google.bigtable.admin.cluster.v1.GetClusterRequest
 */
export class GetClusterRequest extends Message<GetClusterRequest> {
  /**
   * The unique name of the requested cluster.
   * Values are of the form projects/<project>/zones/<zone>/clusters/<cluster>
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetClusterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.cluster.v1.GetClusterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterRequest {
    return new GetClusterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterRequest {
    return new GetClusterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterRequest {
    return new GetClusterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterRequest | PlainMessage<GetClusterRequest> | undefined, b: GetClusterRequest | PlainMessage<GetClusterRequest> | undefined): boolean {
    return proto3.util.equals(GetClusterRequest, a, b);
  }
}

/**
 * Request message for BigtableClusterService.ListClusters.
 *
 * @generated from message google.bigtable.admin.cluster.v1.ListClustersRequest
 */
export class ListClustersRequest extends Message<ListClustersRequest> {
  /**
   * The unique name of the project for which a list of clusters is requested.
   * Values are of the form projects/<project>
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<ListClustersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.cluster.v1.ListClustersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListClustersRequest {
    return new ListClustersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListClustersRequest {
    return new ListClustersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListClustersRequest {
    return new ListClustersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListClustersRequest | PlainMessage<ListClustersRequest> | undefined, b: ListClustersRequest | PlainMessage<ListClustersRequest> | undefined): boolean {
    return proto3.util.equals(ListClustersRequest, a, b);
  }
}

/**
 * Response message for BigtableClusterService.ListClusters.
 *
 * @generated from message google.bigtable.admin.cluster.v1.ListClustersResponse
 */
export class ListClustersResponse extends Message<ListClustersResponse> {
  /**
   * The list of requested Clusters.
   *
   * @generated from field: repeated google.bigtable.admin.cluster.v1.Cluster clusters = 1;
   */
  clusters: Cluster[] = [];

  /**
   * The zones for which clusters could not be retrieved.
   *
   * @generated from field: repeated google.bigtable.admin.cluster.v1.Zone failed_zones = 2;
   */
  failedZones: Zone[] = [];

  constructor(data?: PartialMessage<ListClustersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.cluster.v1.ListClustersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusters", kind: "message", T: Cluster, repeated: true },
    { no: 2, name: "failed_zones", kind: "message", T: Zone, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListClustersResponse {
    return new ListClustersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListClustersResponse {
    return new ListClustersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListClustersResponse {
    return new ListClustersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListClustersResponse | PlainMessage<ListClustersResponse> | undefined, b: ListClustersResponse | PlainMessage<ListClustersResponse> | undefined): boolean {
    return proto3.util.equals(ListClustersResponse, a, b);
  }
}

/**
 * Request message for BigtableClusterService.CreateCluster.
 *
 * @generated from message google.bigtable.admin.cluster.v1.CreateClusterRequest
 */
export class CreateClusterRequest extends Message<CreateClusterRequest> {
  /**
   * The unique name of the zone in which to create the cluster.
   * Values are of the form projects/<project>/zones/<zone>
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The id to be used when referring to the new cluster within its zone,
   * e.g. just the "test-cluster" section of the full name
   * "projects/<project>/zones/<zone>/clusters/test-cluster".
   *
   * @generated from field: string cluster_id = 2;
   */
  clusterId = "";

  /**
   * The cluster to create.
   * The "name", "delete_time", and "current_operation" fields must be left
   * blank.
   *
   * @generated from field: google.bigtable.admin.cluster.v1.Cluster cluster = 3;
   */
  cluster?: Cluster;

  constructor(data?: PartialMessage<CreateClusterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.cluster.v1.CreateClusterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cluster", kind: "message", T: Cluster },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateClusterRequest {
    return new CreateClusterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateClusterRequest {
    return new CreateClusterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateClusterRequest {
    return new CreateClusterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateClusterRequest | PlainMessage<CreateClusterRequest> | undefined, b: CreateClusterRequest | PlainMessage<CreateClusterRequest> | undefined): boolean {
    return proto3.util.equals(CreateClusterRequest, a, b);
  }
}

/**
 * Metadata type for the operation returned by
 * BigtableClusterService.CreateCluster.
 *
 * @generated from message google.bigtable.admin.cluster.v1.CreateClusterMetadata
 */
export class CreateClusterMetadata extends Message<CreateClusterMetadata> {
  /**
   * The request which prompted the creation of this operation.
   *
   * @generated from field: google.bigtable.admin.cluster.v1.CreateClusterRequest original_request = 1;
   */
  originalRequest?: CreateClusterRequest;

  /**
   * The time at which original_request was received.
   *
   * @generated from field: google.protobuf.Timestamp request_time = 2;
   */
  requestTime?: Timestamp;

  /**
   * The time at which this operation failed or was completed successfully.
   *
   * @generated from field: google.protobuf.Timestamp finish_time = 3;
   */
  finishTime?: Timestamp;

  constructor(data?: PartialMessage<CreateClusterMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.cluster.v1.CreateClusterMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "original_request", kind: "message", T: CreateClusterRequest },
    { no: 2, name: "request_time", kind: "message", T: Timestamp },
    { no: 3, name: "finish_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateClusterMetadata {
    return new CreateClusterMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateClusterMetadata {
    return new CreateClusterMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateClusterMetadata {
    return new CreateClusterMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: CreateClusterMetadata | PlainMessage<CreateClusterMetadata> | undefined, b: CreateClusterMetadata | PlainMessage<CreateClusterMetadata> | undefined): boolean {
    return proto3.util.equals(CreateClusterMetadata, a, b);
  }
}

/**
 * Metadata type for the operation returned by
 * BigtableClusterService.UpdateCluster.
 *
 * @generated from message google.bigtable.admin.cluster.v1.UpdateClusterMetadata
 */
export class UpdateClusterMetadata extends Message<UpdateClusterMetadata> {
  /**
   * The request which prompted the creation of this operation.
   *
   * @generated from field: google.bigtable.admin.cluster.v1.Cluster original_request = 1;
   */
  originalRequest?: Cluster;

  /**
   * The time at which original_request was received.
   *
   * @generated from field: google.protobuf.Timestamp request_time = 2;
   */
  requestTime?: Timestamp;

  /**
   * The time at which this operation was cancelled. If set, this operation is
   * in the process of undoing itself (which is guaranteed to succeed) and
   * cannot be cancelled again.
   *
   * @generated from field: google.protobuf.Timestamp cancel_time = 3;
   */
  cancelTime?: Timestamp;

  /**
   * The time at which this operation failed or was completed successfully.
   *
   * @generated from field: google.protobuf.Timestamp finish_time = 4;
   */
  finishTime?: Timestamp;

  constructor(data?: PartialMessage<UpdateClusterMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.cluster.v1.UpdateClusterMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "original_request", kind: "message", T: Cluster },
    { no: 2, name: "request_time", kind: "message", T: Timestamp },
    { no: 3, name: "cancel_time", kind: "message", T: Timestamp },
    { no: 4, name: "finish_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateClusterMetadata {
    return new UpdateClusterMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateClusterMetadata {
    return new UpdateClusterMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateClusterMetadata {
    return new UpdateClusterMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateClusterMetadata | PlainMessage<UpdateClusterMetadata> | undefined, b: UpdateClusterMetadata | PlainMessage<UpdateClusterMetadata> | undefined): boolean {
    return proto3.util.equals(UpdateClusterMetadata, a, b);
  }
}

/**
 * Request message for BigtableClusterService.DeleteCluster.
 *
 * @generated from message google.bigtable.admin.cluster.v1.DeleteClusterRequest
 */
export class DeleteClusterRequest extends Message<DeleteClusterRequest> {
  /**
   * The unique name of the cluster to be deleted.
   * Values are of the form projects/<project>/zones/<zone>/clusters/<cluster>
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteClusterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.cluster.v1.DeleteClusterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteClusterRequest {
    return new DeleteClusterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteClusterRequest {
    return new DeleteClusterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteClusterRequest {
    return new DeleteClusterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteClusterRequest | PlainMessage<DeleteClusterRequest> | undefined, b: DeleteClusterRequest | PlainMessage<DeleteClusterRequest> | undefined): boolean {
    return proto3.util.equals(DeleteClusterRequest, a, b);
  }
}

/**
 * Request message for BigtableClusterService.UndeleteCluster.
 *
 * @generated from message google.bigtable.admin.cluster.v1.UndeleteClusterRequest
 */
export class UndeleteClusterRequest extends Message<UndeleteClusterRequest> {
  /**
   * The unique name of the cluster to be un-deleted.
   * Values are of the form projects/<project>/zones/<zone>/clusters/<cluster>
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<UndeleteClusterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.cluster.v1.UndeleteClusterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndeleteClusterRequest {
    return new UndeleteClusterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndeleteClusterRequest {
    return new UndeleteClusterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndeleteClusterRequest {
    return new UndeleteClusterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UndeleteClusterRequest | PlainMessage<UndeleteClusterRequest> | undefined, b: UndeleteClusterRequest | PlainMessage<UndeleteClusterRequest> | undefined): boolean {
    return proto3.util.equals(UndeleteClusterRequest, a, b);
  }
}

/**
 * Metadata type for the operation returned by
 * BigtableClusterService.UndeleteCluster.
 *
 * @generated from message google.bigtable.admin.cluster.v1.UndeleteClusterMetadata
 */
export class UndeleteClusterMetadata extends Message<UndeleteClusterMetadata> {
  /**
   * The time at which the original request was received.
   *
   * @generated from field: google.protobuf.Timestamp request_time = 1;
   */
  requestTime?: Timestamp;

  /**
   * The time at which this operation failed or was completed successfully.
   *
   * @generated from field: google.protobuf.Timestamp finish_time = 2;
   */
  finishTime?: Timestamp;

  constructor(data?: PartialMessage<UndeleteClusterMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.cluster.v1.UndeleteClusterMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_time", kind: "message", T: Timestamp },
    { no: 2, name: "finish_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndeleteClusterMetadata {
    return new UndeleteClusterMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndeleteClusterMetadata {
    return new UndeleteClusterMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndeleteClusterMetadata {
    return new UndeleteClusterMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: UndeleteClusterMetadata | PlainMessage<UndeleteClusterMetadata> | undefined, b: UndeleteClusterMetadata | PlainMessage<UndeleteClusterMetadata> | undefined): boolean {
    return proto3.util.equals(UndeleteClusterMetadata, a, b);
  }
}

/**
 * Metadata type for operations initiated by the V2 BigtableAdmin service.
 * More complete information for such operations is available via the V2 API.
 *
 * @generated from message google.bigtable.admin.cluster.v1.V2OperationMetadata
 */
export class V2OperationMetadata extends Message<V2OperationMetadata> {
  constructor(data?: PartialMessage<V2OperationMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.cluster.v1.V2OperationMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): V2OperationMetadata {
    return new V2OperationMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): V2OperationMetadata {
    return new V2OperationMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): V2OperationMetadata {
    return new V2OperationMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: V2OperationMetadata | PlainMessage<V2OperationMetadata> | undefined, b: V2OperationMetadata | PlainMessage<V2OperationMetadata> | undefined): boolean {
    return proto3.util.equals(V2OperationMetadata, a, b);
  }
}

