// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/bigtable/admin/v2/bigtable_table_admin.proto (package google.bigtable.admin.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ColumnFamily, Table, Table_View } from "./table_pb.js";

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.CreateTable][google.bigtable.admin.v2.BigtableTableAdmin.CreateTable]
 *
 * @generated from message google.bigtable.admin.v2.CreateTableRequest
 */
export class CreateTableRequest extends Message<CreateTableRequest> {
  /**
   * The unique name of the instance in which to create the table.
   * Values are of the form `projects/<project>/instances/<instance>`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The name by which the new table should be referred to within the parent
   * instance, e.g., `foobar` rather than `<parent>/tables/foobar`.
   *
   * @generated from field: string table_id = 2;
   */
  tableId = "";

  /**
   * The Table to create.
   *
   * @generated from field: google.bigtable.admin.v2.Table table = 3;
   */
  table?: Table;

  /**
   * The optional list of row keys that will be used to initially split the
   * table into several tablets (tablets are similar to HBase regions).
   * Given two split keys, `s1` and `s2`, three tablets will be created,
   * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
   *
   * Example:
   *
   * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
   *                `"other", "zz"]`
   * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
   * * Key assignment:
   *     - Tablet 1 `[, apple)                => {"a"}.`
   *     - Tablet 2 `[apple, customer_1)      => {"apple", "custom"}.`
   *     - Tablet 3 `[customer_1, customer_2) => {"customer_1"}.`
   *     - Tablet 4 `[customer_2, other)      => {"customer_2"}.`
   *     - Tablet 5 `[other, )                => {"other", "zz"}.`
   *
   * @generated from field: repeated google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;
   */
  initialSplits: CreateTableRequest_Split[] = [];

  constructor(data?: PartialMessage<CreateTableRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.CreateTableRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "table", kind: "message", T: Table },
    { no: 4, name: "initial_splits", kind: "message", T: CreateTableRequest_Split, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTableRequest {
    return new CreateTableRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTableRequest {
    return new CreateTableRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTableRequest {
    return new CreateTableRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTableRequest | PlainMessage<CreateTableRequest> | undefined, b: CreateTableRequest | PlainMessage<CreateTableRequest> | undefined): boolean {
    return proto3.util.equals(CreateTableRequest, a, b);
  }
}

/**
 * An initial split point for a newly created table.
 *
 * @generated from message google.bigtable.admin.v2.CreateTableRequest.Split
 */
export class CreateTableRequest_Split extends Message<CreateTableRequest_Split> {
  /**
   * Row key to use as an initial tablet boundary.
   *
   * @generated from field: bytes key = 1;
   */
  key = new Uint8Array(0);

  constructor(data?: PartialMessage<CreateTableRequest_Split>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.CreateTableRequest.Split";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTableRequest_Split {
    return new CreateTableRequest_Split().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTableRequest_Split {
    return new CreateTableRequest_Split().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTableRequest_Split {
    return new CreateTableRequest_Split().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTableRequest_Split | PlainMessage<CreateTableRequest_Split> | undefined, b: CreateTableRequest_Split | PlainMessage<CreateTableRequest_Split> | undefined): boolean {
    return proto3.util.equals(CreateTableRequest_Split, a, b);
  }
}

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.DropRowRange][google.bigtable.admin.v2.BigtableTableAdmin.DropRowRange]
 *
 * @generated from message google.bigtable.admin.v2.DropRowRangeRequest
 */
export class DropRowRangeRequest extends Message<DropRowRangeRequest> {
  /**
   * The unique name of the table on which to drop a range of rows.
   * Values are of the form
   * `projects/<project>/instances/<instance>/tables/<table>`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Delete all rows or by prefix.
   *
   * @generated from oneof google.bigtable.admin.v2.DropRowRangeRequest.target
   */
  target: {
    /**
     * Delete all rows that start with this row key prefix. Prefix cannot be
     * zero length.
     *
     * @generated from field: bytes row_key_prefix = 2;
     */
    value: Uint8Array;
    case: "rowKeyPrefix";
  } | {
    /**
     * Delete all rows in the table. Setting this to false is a no-op.
     *
     * @generated from field: bool delete_all_data_from_table = 3;
     */
    value: boolean;
    case: "deleteAllDataFromTable";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DropRowRangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.DropRowRangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "row_key_prefix", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "target" },
    { no: 3, name: "delete_all_data_from_table", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "target" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DropRowRangeRequest {
    return new DropRowRangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DropRowRangeRequest {
    return new DropRowRangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DropRowRangeRequest {
    return new DropRowRangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DropRowRangeRequest | PlainMessage<DropRowRangeRequest> | undefined, b: DropRowRangeRequest | PlainMessage<DropRowRangeRequest> | undefined): boolean {
    return proto3.util.equals(DropRowRangeRequest, a, b);
  }
}

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.ListTables][google.bigtable.admin.v2.BigtableTableAdmin.ListTables]
 *
 * @generated from message google.bigtable.admin.v2.ListTablesRequest
 */
export class ListTablesRequest extends Message<ListTablesRequest> {
  /**
   * The unique name of the instance for which tables should be listed.
   * Values are of the form `projects/<project>/instances/<instance>`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The view to be applied to the returned tables' fields.
   * Defaults to `NAME_ONLY` if unspecified; no others are currently supported.
   *
   * @generated from field: google.bigtable.admin.v2.Table.View view = 2;
   */
  view = Table_View.VIEW_UNSPECIFIED;

  /**
   * The value of `next_page_token` returned by a previous call.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListTablesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.ListTablesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "view", kind: "enum", T: proto3.getEnumType(Table_View) },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTablesRequest {
    return new ListTablesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTablesRequest {
    return new ListTablesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTablesRequest {
    return new ListTablesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTablesRequest | PlainMessage<ListTablesRequest> | undefined, b: ListTablesRequest | PlainMessage<ListTablesRequest> | undefined): boolean {
    return proto3.util.equals(ListTablesRequest, a, b);
  }
}

/**
 * Response message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.ListTables][google.bigtable.admin.v2.BigtableTableAdmin.ListTables]
 *
 * @generated from message google.bigtable.admin.v2.ListTablesResponse
 */
export class ListTablesResponse extends Message<ListTablesResponse> {
  /**
   * The tables present in the requested instance.
   *
   * @generated from field: repeated google.bigtable.admin.v2.Table tables = 1;
   */
  tables: Table[] = [];

  /**
   * Set if not all tables could be returned in a single response.
   * Pass this value to `page_token` in another request to get the next
   * page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListTablesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.ListTablesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tables", kind: "message", T: Table, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTablesResponse {
    return new ListTablesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTablesResponse {
    return new ListTablesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTablesResponse {
    return new ListTablesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTablesResponse | PlainMessage<ListTablesResponse> | undefined, b: ListTablesResponse | PlainMessage<ListTablesResponse> | undefined): boolean {
    return proto3.util.equals(ListTablesResponse, a, b);
  }
}

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.GetTable][google.bigtable.admin.v2.BigtableTableAdmin.GetTable]
 *
 * @generated from message google.bigtable.admin.v2.GetTableRequest
 */
export class GetTableRequest extends Message<GetTableRequest> {
  /**
   * The unique name of the requested table.
   * Values are of the form
   * `projects/<project>/instances/<instance>/tables/<table>`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The view to be applied to the returned table's fields.
   * Defaults to `SCHEMA_VIEW` if unspecified.
   *
   * @generated from field: google.bigtable.admin.v2.Table.View view = 2;
   */
  view = Table_View.VIEW_UNSPECIFIED;

  constructor(data?: PartialMessage<GetTableRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.GetTableRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "view", kind: "enum", T: proto3.getEnumType(Table_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTableRequest {
    return new GetTableRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTableRequest {
    return new GetTableRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTableRequest {
    return new GetTableRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTableRequest | PlainMessage<GetTableRequest> | undefined, b: GetTableRequest | PlainMessage<GetTableRequest> | undefined): boolean {
    return proto3.util.equals(GetTableRequest, a, b);
  }
}

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.DeleteTable][google.bigtable.admin.v2.BigtableTableAdmin.DeleteTable]
 *
 * @generated from message google.bigtable.admin.v2.DeleteTableRequest
 */
export class DeleteTableRequest extends Message<DeleteTableRequest> {
  /**
   * The unique name of the table to be deleted.
   * Values are of the form
   * `projects/<project>/instances/<instance>/tables/<table>`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteTableRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.DeleteTableRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTableRequest {
    return new DeleteTableRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTableRequest {
    return new DeleteTableRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTableRequest {
    return new DeleteTableRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTableRequest | PlainMessage<DeleteTableRequest> | undefined, b: DeleteTableRequest | PlainMessage<DeleteTableRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTableRequest, a, b);
  }
}

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.ModifyColumnFamilies][google.bigtable.admin.v2.BigtableTableAdmin.ModifyColumnFamilies]
 *
 * @generated from message google.bigtable.admin.v2.ModifyColumnFamiliesRequest
 */
export class ModifyColumnFamiliesRequest extends Message<ModifyColumnFamiliesRequest> {
  /**
   * The unique name of the table whose families should be modified.
   * Values are of the form
   * `projects/<project>/instances/<instance>/tables/<table>`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Modifications to be atomically applied to the specified table's families.
   * Entries are applied in order, meaning that earlier modifications can be
   * masked by later ones (in the case of repeated updates to the same family,
   * for example).
   *
   * @generated from field: repeated google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;
   */
  modifications: ModifyColumnFamiliesRequest_Modification[] = [];

  constructor(data?: PartialMessage<ModifyColumnFamiliesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.ModifyColumnFamiliesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "modifications", kind: "message", T: ModifyColumnFamiliesRequest_Modification, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModifyColumnFamiliesRequest {
    return new ModifyColumnFamiliesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModifyColumnFamiliesRequest {
    return new ModifyColumnFamiliesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModifyColumnFamiliesRequest {
    return new ModifyColumnFamiliesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ModifyColumnFamiliesRequest | PlainMessage<ModifyColumnFamiliesRequest> | undefined, b: ModifyColumnFamiliesRequest | PlainMessage<ModifyColumnFamiliesRequest> | undefined): boolean {
    return proto3.util.equals(ModifyColumnFamiliesRequest, a, b);
  }
}

/**
 * A create, update, or delete of a particular column family.
 *
 * @generated from message google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification
 */
export class ModifyColumnFamiliesRequest_Modification extends Message<ModifyColumnFamiliesRequest_Modification> {
  /**
   * The ID of the column family to be modified.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Column familiy modifications.
   *
   * @generated from oneof google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.mod
   */
  mod: {
    /**
     * Create a new column family with the specified schema, or fail if
     * one already exists with the given ID.
     *
     * @generated from field: google.bigtable.admin.v2.ColumnFamily create = 2;
     */
    value: ColumnFamily;
    case: "create";
  } | {
    /**
     * Update an existing column family to the specified schema, or fail
     * if no column family exists with the given ID.
     *
     * @generated from field: google.bigtable.admin.v2.ColumnFamily update = 3;
     */
    value: ColumnFamily;
    case: "update";
  } | {
    /**
     * Drop (delete) the column family with the given ID, or fail if no such
     * family exists.
     *
     * @generated from field: bool drop = 4;
     */
    value: boolean;
    case: "drop";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ModifyColumnFamiliesRequest_Modification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "create", kind: "message", T: ColumnFamily, oneof: "mod" },
    { no: 3, name: "update", kind: "message", T: ColumnFamily, oneof: "mod" },
    { no: 4, name: "drop", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "mod" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModifyColumnFamiliesRequest_Modification {
    return new ModifyColumnFamiliesRequest_Modification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModifyColumnFamiliesRequest_Modification {
    return new ModifyColumnFamiliesRequest_Modification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModifyColumnFamiliesRequest_Modification {
    return new ModifyColumnFamiliesRequest_Modification().fromJsonString(jsonString, options);
  }

  static equals(a: ModifyColumnFamiliesRequest_Modification | PlainMessage<ModifyColumnFamiliesRequest_Modification> | undefined, b: ModifyColumnFamiliesRequest_Modification | PlainMessage<ModifyColumnFamiliesRequest_Modification> | undefined): boolean {
    return proto3.util.equals(ModifyColumnFamiliesRequest_Modification, a, b);
  }
}

