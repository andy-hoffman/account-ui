// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/bigtable/admin/v2/bigtable_instance_admin.proto (package google.bigtable.admin.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Cluster, Instance } from "./instance_pb.js";

/**
 * Request message for BigtableInstanceAdmin.CreateInstance.
 *
 * @generated from message google.bigtable.admin.v2.CreateInstanceRequest
 */
export class CreateInstanceRequest extends Message<CreateInstanceRequest> {
  /**
   * The unique name of the project in which to create the new instance.
   * Values are of the form `projects/<project>`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The ID to be used when referring to the new instance within its project,
   * e.g., just `myinstance` rather than
   * `projects/myproject/instances/myinstance`.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId = "";

  /**
   * The instance to create.
   * Fields marked `OutputOnly` must be left blank.
   *
   * @generated from field: google.bigtable.admin.v2.Instance instance = 3;
   */
  instance?: Instance;

  /**
   * The clusters to be created within the instance, mapped by desired
   * cluster ID, e.g., just `mycluster` rather than
   * `projects/myproject/instances/myinstance/clusters/mycluster`.
   * Fields marked `OutputOnly` must be left blank.
   * Currently exactly one cluster must be specified.
   *
   * @generated from field: map<string, google.bigtable.admin.v2.Cluster> clusters = 4;
   */
  clusters: { [key: string]: Cluster } = {};

  constructor(data?: PartialMessage<CreateInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.CreateInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "instance", kind: "message", T: Instance },
    { no: 4, name: "clusters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Cluster} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceRequest | PlainMessage<CreateInstanceRequest> | undefined, b: CreateInstanceRequest | PlainMessage<CreateInstanceRequest> | undefined): boolean {
    return proto3.util.equals(CreateInstanceRequest, a, b);
  }
}

/**
 * Request message for BigtableInstanceAdmin.GetInstance.
 *
 * @generated from message google.bigtable.admin.v2.GetInstanceRequest
 */
export class GetInstanceRequest extends Message<GetInstanceRequest> {
  /**
   * The unique name of the requested instance. Values are of the form
   * `projects/<project>/instances/<instance>`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.GetInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceRequest | PlainMessage<GetInstanceRequest> | undefined, b: GetInstanceRequest | PlainMessage<GetInstanceRequest> | undefined): boolean {
    return proto3.util.equals(GetInstanceRequest, a, b);
  }
}

/**
 * Request message for BigtableInstanceAdmin.ListInstances.
 *
 * @generated from message google.bigtable.admin.v2.ListInstancesRequest
 */
export class ListInstancesRequest extends Message<ListInstancesRequest> {
  /**
   * The unique name of the project for which a list of instances is requested.
   * Values are of the form `projects/<project>`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The value of `next_page_token` returned by a previous call.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListInstancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.ListInstancesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined, b: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined): boolean {
    return proto3.util.equals(ListInstancesRequest, a, b);
  }
}

/**
 * Response message for BigtableInstanceAdmin.ListInstances.
 *
 * @generated from message google.bigtable.admin.v2.ListInstancesResponse
 */
export class ListInstancesResponse extends Message<ListInstancesResponse> {
  /**
   * The list of requested instances.
   *
   * @generated from field: repeated google.bigtable.admin.v2.Instance instances = 1;
   */
  instances: Instance[] = [];

  /**
   * Locations from which Instance information could not be retrieved,
   * due to an outage or some other transient condition.
   * Instances whose Clusters are all in one of the failed locations
   * may be missing from `instances`, and Instances with at least one
   * Cluster in a failed location may only have partial information returned.
   *
   * @generated from field: repeated string failed_locations = 2;
   */
  failedLocations: string[] = [];

  /**
   * Set if not all instances could be returned in a single response.
   * Pass this value to `page_token` in another request to get the next
   * page of results.
   *
   * @generated from field: string next_page_token = 3;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListInstancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.ListInstancesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "message", T: Instance, repeated: true },
    { no: 2, name: "failed_locations", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined, b: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined): boolean {
    return proto3.util.equals(ListInstancesResponse, a, b);
  }
}

/**
 * Request message for BigtableInstanceAdmin.DeleteInstance.
 *
 * @generated from message google.bigtable.admin.v2.DeleteInstanceRequest
 */
export class DeleteInstanceRequest extends Message<DeleteInstanceRequest> {
  /**
   * The unique name of the instance to be deleted.
   * Values are of the form `projects/<project>/instances/<instance>`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.DeleteInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteInstanceRequest | PlainMessage<DeleteInstanceRequest> | undefined, b: DeleteInstanceRequest | PlainMessage<DeleteInstanceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteInstanceRequest, a, b);
  }
}

/**
 * Request message for BigtableInstanceAdmin.CreateCluster.
 *
 * @generated from message google.bigtable.admin.v2.CreateClusterRequest
 */
export class CreateClusterRequest extends Message<CreateClusterRequest> {
  /**
   * The unique name of the instance in which to create the new cluster.
   * Values are of the form
   * `projects/<project>/instances/<instance>`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The ID to be used when referring to the new cluster within its instance,
   * e.g., just `mycluster` rather than
   * `projects/myproject/instances/myinstance/clusters/mycluster`.
   *
   * @generated from field: string cluster_id = 2;
   */
  clusterId = "";

  /**
   * The cluster to be created.
   * Fields marked `OutputOnly` must be left blank.
   *
   * @generated from field: google.bigtable.admin.v2.Cluster cluster = 3;
   */
  cluster?: Cluster;

  constructor(data?: PartialMessage<CreateClusterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.CreateClusterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cluster", kind: "message", T: Cluster },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateClusterRequest {
    return new CreateClusterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateClusterRequest {
    return new CreateClusterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateClusterRequest {
    return new CreateClusterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateClusterRequest | PlainMessage<CreateClusterRequest> | undefined, b: CreateClusterRequest | PlainMessage<CreateClusterRequest> | undefined): boolean {
    return proto3.util.equals(CreateClusterRequest, a, b);
  }
}

/**
 * Request message for BigtableInstanceAdmin.GetCluster.
 *
 * @generated from message google.bigtable.admin.v2.GetClusterRequest
 */
export class GetClusterRequest extends Message<GetClusterRequest> {
  /**
   * The unique name of the requested cluster. Values are of the form
   * `projects/<project>/instances/<instance>/clusters/<cluster>`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetClusterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.GetClusterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterRequest {
    return new GetClusterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterRequest {
    return new GetClusterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterRequest {
    return new GetClusterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterRequest | PlainMessage<GetClusterRequest> | undefined, b: GetClusterRequest | PlainMessage<GetClusterRequest> | undefined): boolean {
    return proto3.util.equals(GetClusterRequest, a, b);
  }
}

/**
 * Request message for BigtableInstanceAdmin.ListClusters.
 *
 * @generated from message google.bigtable.admin.v2.ListClustersRequest
 */
export class ListClustersRequest extends Message<ListClustersRequest> {
  /**
   * The unique name of the instance for which a list of clusters is requested.
   * Values are of the form `projects/<project>/instances/<instance>`.
   * Use `<instance> = '-'` to list Clusters for all Instances in a project,
   * e.g., `projects/myproject/instances/-`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The value of `next_page_token` returned by a previous call.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListClustersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.ListClustersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListClustersRequest {
    return new ListClustersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListClustersRequest {
    return new ListClustersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListClustersRequest {
    return new ListClustersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListClustersRequest | PlainMessage<ListClustersRequest> | undefined, b: ListClustersRequest | PlainMessage<ListClustersRequest> | undefined): boolean {
    return proto3.util.equals(ListClustersRequest, a, b);
  }
}

/**
 * Response message for BigtableInstanceAdmin.ListClusters.
 *
 * @generated from message google.bigtable.admin.v2.ListClustersResponse
 */
export class ListClustersResponse extends Message<ListClustersResponse> {
  /**
   * The list of requested clusters.
   *
   * @generated from field: repeated google.bigtable.admin.v2.Cluster clusters = 1;
   */
  clusters: Cluster[] = [];

  /**
   * Locations from which Cluster information could not be retrieved,
   * due to an outage or some other transient condition.
   * Clusters from these locations may be missing from `clusters`,
   * or may only have partial information returned.
   *
   * @generated from field: repeated string failed_locations = 2;
   */
  failedLocations: string[] = [];

  /**
   * Set if not all clusters could be returned in a single response.
   * Pass this value to `page_token` in another request to get the next
   * page of results.
   *
   * @generated from field: string next_page_token = 3;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListClustersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.ListClustersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusters", kind: "message", T: Cluster, repeated: true },
    { no: 2, name: "failed_locations", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListClustersResponse {
    return new ListClustersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListClustersResponse {
    return new ListClustersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListClustersResponse {
    return new ListClustersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListClustersResponse | PlainMessage<ListClustersResponse> | undefined, b: ListClustersResponse | PlainMessage<ListClustersResponse> | undefined): boolean {
    return proto3.util.equals(ListClustersResponse, a, b);
  }
}

/**
 * Request message for BigtableInstanceAdmin.DeleteCluster.
 *
 * @generated from message google.bigtable.admin.v2.DeleteClusterRequest
 */
export class DeleteClusterRequest extends Message<DeleteClusterRequest> {
  /**
   * The unique name of the cluster to be deleted. Values are of the form
   * `projects/<project>/instances/<instance>/clusters/<cluster>`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteClusterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.DeleteClusterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteClusterRequest {
    return new DeleteClusterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteClusterRequest {
    return new DeleteClusterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteClusterRequest {
    return new DeleteClusterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteClusterRequest | PlainMessage<DeleteClusterRequest> | undefined, b: DeleteClusterRequest | PlainMessage<DeleteClusterRequest> | undefined): boolean {
    return proto3.util.equals(DeleteClusterRequest, a, b);
  }
}

/**
 * The metadata for the Operation returned by CreateInstance.
 *
 * @generated from message google.bigtable.admin.v2.CreateInstanceMetadata
 */
export class CreateInstanceMetadata extends Message<CreateInstanceMetadata> {
  /**
   * The request that prompted the initiation of this CreateInstance operation.
   *
   * @generated from field: google.bigtable.admin.v2.CreateInstanceRequest original_request = 1;
   */
  originalRequest?: CreateInstanceRequest;

  /**
   * The time at which the original request was received.
   *
   * @generated from field: google.protobuf.Timestamp request_time = 2;
   */
  requestTime?: Timestamp;

  /**
   * The time at which the operation failed or was completed successfully.
   *
   * @generated from field: google.protobuf.Timestamp finish_time = 3;
   */
  finishTime?: Timestamp;

  constructor(data?: PartialMessage<CreateInstanceMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.CreateInstanceMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "original_request", kind: "message", T: CreateInstanceRequest },
    { no: 2, name: "request_time", kind: "message", T: Timestamp },
    { no: 3, name: "finish_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceMetadata {
    return new CreateInstanceMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceMetadata {
    return new CreateInstanceMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceMetadata {
    return new CreateInstanceMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceMetadata | PlainMessage<CreateInstanceMetadata> | undefined, b: CreateInstanceMetadata | PlainMessage<CreateInstanceMetadata> | undefined): boolean {
    return proto3.util.equals(CreateInstanceMetadata, a, b);
  }
}

/**
 * The metadata for the Operation returned by CreateCluster.
 *
 * @generated from message google.bigtable.admin.v2.CreateClusterMetadata
 */
export class CreateClusterMetadata extends Message<CreateClusterMetadata> {
  /**
   * The request that prompted the initiation of this CreateCluster operation.
   *
   * @generated from field: google.bigtable.admin.v2.CreateClusterRequest original_request = 1;
   */
  originalRequest?: CreateClusterRequest;

  /**
   * The time at which the original request was received.
   *
   * @generated from field: google.protobuf.Timestamp request_time = 2;
   */
  requestTime?: Timestamp;

  /**
   * The time at which the operation failed or was completed successfully.
   *
   * @generated from field: google.protobuf.Timestamp finish_time = 3;
   */
  finishTime?: Timestamp;

  constructor(data?: PartialMessage<CreateClusterMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.CreateClusterMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "original_request", kind: "message", T: CreateClusterRequest },
    { no: 2, name: "request_time", kind: "message", T: Timestamp },
    { no: 3, name: "finish_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateClusterMetadata {
    return new CreateClusterMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateClusterMetadata {
    return new CreateClusterMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateClusterMetadata {
    return new CreateClusterMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: CreateClusterMetadata | PlainMessage<CreateClusterMetadata> | undefined, b: CreateClusterMetadata | PlainMessage<CreateClusterMetadata> | undefined): boolean {
    return proto3.util.equals(CreateClusterMetadata, a, b);
  }
}

/**
 * The metadata for the Operation returned by UpdateCluster.
 *
 * @generated from message google.bigtable.admin.v2.UpdateClusterMetadata
 */
export class UpdateClusterMetadata extends Message<UpdateClusterMetadata> {
  /**
   * The request that prompted the initiation of this UpdateCluster operation.
   *
   * @generated from field: google.bigtable.admin.v2.Cluster original_request = 1;
   */
  originalRequest?: Cluster;

  /**
   * The time at which the original request was received.
   *
   * @generated from field: google.protobuf.Timestamp request_time = 2;
   */
  requestTime?: Timestamp;

  /**
   * The time at which the operation failed or was completed successfully.
   *
   * @generated from field: google.protobuf.Timestamp finish_time = 3;
   */
  finishTime?: Timestamp;

  constructor(data?: PartialMessage<UpdateClusterMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.bigtable.admin.v2.UpdateClusterMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "original_request", kind: "message", T: Cluster },
    { no: 2, name: "request_time", kind: "message", T: Timestamp },
    { no: 3, name: "finish_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateClusterMetadata {
    return new UpdateClusterMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateClusterMetadata {
    return new UpdateClusterMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateClusterMetadata {
    return new UpdateClusterMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateClusterMetadata | PlainMessage<UpdateClusterMetadata> | undefined, b: UpdateClusterMetadata | PlainMessage<UpdateClusterMetadata> | undefined): boolean {
    return proto3.util.equals(UpdateClusterMetadata, a, b);
  }
}

