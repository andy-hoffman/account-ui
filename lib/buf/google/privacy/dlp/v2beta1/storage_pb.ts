// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/privacy/dlp/v2beta1/storage.proto (package google.privacy.dlp.v2beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Type of information detected by the API.
 *
 * @generated from message google.privacy.dlp.v2beta1.InfoType
 */
export class InfoType extends Message<InfoType> {
  /**
   * Name of the information type.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<InfoType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.InfoType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InfoType {
    return new InfoType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InfoType {
    return new InfoType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InfoType {
    return new InfoType().fromJsonString(jsonString, options);
  }

  static equals(a: InfoType | PlainMessage<InfoType> | undefined, b: InfoType | PlainMessage<InfoType> | undefined): boolean {
    return proto3.util.equals(InfoType, a, b);
  }
}

/**
 * General identifier of a data field in a storage service.
 *
 * @generated from message google.privacy.dlp.v2beta1.FieldId
 */
export class FieldId extends Message<FieldId> {
  /**
   * Name describing the field.
   *
   * @generated from field: string column_name = 1;
   */
  columnName = "";

  constructor(data?: PartialMessage<FieldId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.FieldId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FieldId {
    return new FieldId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FieldId {
    return new FieldId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FieldId {
    return new FieldId().fromJsonString(jsonString, options);
  }

  static equals(a: FieldId | PlainMessage<FieldId> | undefined, b: FieldId | PlainMessage<FieldId> | undefined): boolean {
    return proto3.util.equals(FieldId, a, b);
  }
}

/**
 * Datastore partition ID.
 * A partition ID identifies a grouping of entities. The grouping is always
 * by project and namespace, however the namespace ID may be empty.
 *
 * A partition ID contains several dimensions:
 * project ID and namespace ID.
 *
 * @generated from message google.privacy.dlp.v2beta1.PartitionId
 */
export class PartitionId extends Message<PartitionId> {
  /**
   * The ID of the project to which the entities belong.
   *
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * If not empty, the ID of the namespace to which the entities belong.
   *
   * @generated from field: string namespace_id = 4;
   */
  namespaceId = "";

  constructor(data?: PartialMessage<PartitionId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.PartitionId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "namespace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PartitionId {
    return new PartitionId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PartitionId {
    return new PartitionId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PartitionId {
    return new PartitionId().fromJsonString(jsonString, options);
  }

  static equals(a: PartitionId | PlainMessage<PartitionId> | undefined, b: PartitionId | PlainMessage<PartitionId> | undefined): boolean {
    return proto3.util.equals(PartitionId, a, b);
  }
}

/**
 * A representation of a Datastore kind.
 *
 * @generated from message google.privacy.dlp.v2beta1.KindExpression
 */
export class KindExpression extends Message<KindExpression> {
  /**
   * The name of the kind.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<KindExpression>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.KindExpression";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KindExpression {
    return new KindExpression().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KindExpression {
    return new KindExpression().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KindExpression {
    return new KindExpression().fromJsonString(jsonString, options);
  }

  static equals(a: KindExpression | PlainMessage<KindExpression> | undefined, b: KindExpression | PlainMessage<KindExpression> | undefined): boolean {
    return proto3.util.equals(KindExpression, a, b);
  }
}

/**
 * A reference to a property relative to the Datastore kind expressions.
 *
 * @generated from message google.privacy.dlp.v2beta1.PropertyReference
 */
export class PropertyReference extends Message<PropertyReference> {
  /**
   * The name of the property.
   * If name includes "."s, it may be interpreted as a property name path.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<PropertyReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.PropertyReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PropertyReference {
    return new PropertyReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PropertyReference {
    return new PropertyReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PropertyReference {
    return new PropertyReference().fromJsonString(jsonString, options);
  }

  static equals(a: PropertyReference | PlainMessage<PropertyReference> | undefined, b: PropertyReference | PlainMessage<PropertyReference> | undefined): boolean {
    return proto3.util.equals(PropertyReference, a, b);
  }
}

/**
 * A representation of a Datastore property in a projection.
 *
 * @generated from message google.privacy.dlp.v2beta1.Projection
 */
export class Projection extends Message<Projection> {
  /**
   * The property to project.
   *
   * @generated from field: google.privacy.dlp.v2beta1.PropertyReference property = 1;
   */
  property?: PropertyReference;

  constructor(data?: PartialMessage<Projection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.Projection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "property", kind: "message", T: PropertyReference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Projection {
    return new Projection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Projection {
    return new Projection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Projection {
    return new Projection().fromJsonString(jsonString, options);
  }

  static equals(a: Projection | PlainMessage<Projection> | undefined, b: Projection | PlainMessage<Projection> | undefined): boolean {
    return proto3.util.equals(Projection, a, b);
  }
}

/**
 * Options defining a data set within Google Cloud Datastore.
 *
 * @generated from message google.privacy.dlp.v2beta1.DatastoreOptions
 */
export class DatastoreOptions extends Message<DatastoreOptions> {
  /**
   * A partition ID identifies a grouping of entities. The grouping is always
   * by project and namespace, however the namespace ID may be empty.
   *
   * @generated from field: google.privacy.dlp.v2beta1.PartitionId partition_id = 1;
   */
  partitionId?: PartitionId;

  /**
   * The kind to process.
   *
   * @generated from field: google.privacy.dlp.v2beta1.KindExpression kind = 2;
   */
  kind?: KindExpression;

  /**
   * Properties to scan. If none are specified, all properties will be scanned
   * by default.
   *
   * @generated from field: repeated google.privacy.dlp.v2beta1.Projection projection = 3;
   */
  projection: Projection[] = [];

  constructor(data?: PartialMessage<DatastoreOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.DatastoreOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "partition_id", kind: "message", T: PartitionId },
    { no: 2, name: "kind", kind: "message", T: KindExpression },
    { no: 3, name: "projection", kind: "message", T: Projection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatastoreOptions {
    return new DatastoreOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatastoreOptions {
    return new DatastoreOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatastoreOptions {
    return new DatastoreOptions().fromJsonString(jsonString, options);
  }

  static equals(a: DatastoreOptions | PlainMessage<DatastoreOptions> | undefined, b: DatastoreOptions | PlainMessage<DatastoreOptions> | undefined): boolean {
    return proto3.util.equals(DatastoreOptions, a, b);
  }
}

/**
 * Options defining a file or a set of files (path ending with *) within
 * a Google Cloud Storage bucket.
 *
 * @generated from message google.privacy.dlp.v2beta1.CloudStorageOptions
 */
export class CloudStorageOptions extends Message<CloudStorageOptions> {
  /**
   * @generated from field: google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet file_set = 1;
   */
  fileSet?: CloudStorageOptions_FileSet;

  constructor(data?: PartialMessage<CloudStorageOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.CloudStorageOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_set", kind: "message", T: CloudStorageOptions_FileSet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloudStorageOptions {
    return new CloudStorageOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloudStorageOptions {
    return new CloudStorageOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloudStorageOptions {
    return new CloudStorageOptions().fromJsonString(jsonString, options);
  }

  static equals(a: CloudStorageOptions | PlainMessage<CloudStorageOptions> | undefined, b: CloudStorageOptions | PlainMessage<CloudStorageOptions> | undefined): boolean {
    return proto3.util.equals(CloudStorageOptions, a, b);
  }
}

/**
 * Set of files to scan.
 *
 * @generated from message google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet
 */
export class CloudStorageOptions_FileSet extends Message<CloudStorageOptions_FileSet> {
  /**
   * The url, in the format `gs://<bucket>/<path>`. Trailing wildcard in the
   * path is allowed.
   *
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<CloudStorageOptions_FileSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloudStorageOptions_FileSet {
    return new CloudStorageOptions_FileSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloudStorageOptions_FileSet {
    return new CloudStorageOptions_FileSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloudStorageOptions_FileSet {
    return new CloudStorageOptions_FileSet().fromJsonString(jsonString, options);
  }

  static equals(a: CloudStorageOptions_FileSet | PlainMessage<CloudStorageOptions_FileSet> | undefined, b: CloudStorageOptions_FileSet | PlainMessage<CloudStorageOptions_FileSet> | undefined): boolean {
    return proto3.util.equals(CloudStorageOptions_FileSet, a, b);
  }
}

/**
 * A location in Cloud Storage.
 *
 * @generated from message google.privacy.dlp.v2beta1.CloudStoragePath
 */
export class CloudStoragePath extends Message<CloudStoragePath> {
  /**
   * The url, in the format of `gs://bucket/<path>`.
   *
   * @generated from field: string path = 1;
   */
  path = "";

  constructor(data?: PartialMessage<CloudStoragePath>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.CloudStoragePath";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloudStoragePath {
    return new CloudStoragePath().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloudStoragePath {
    return new CloudStoragePath().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloudStoragePath {
    return new CloudStoragePath().fromJsonString(jsonString, options);
  }

  static equals(a: CloudStoragePath | PlainMessage<CloudStoragePath> | undefined, b: CloudStoragePath | PlainMessage<CloudStoragePath> | undefined): boolean {
    return proto3.util.equals(CloudStoragePath, a, b);
  }
}

/**
 * Options defining BigQuery table and row identifiers.
 *
 * @generated from message google.privacy.dlp.v2beta1.BigQueryOptions
 */
export class BigQueryOptions extends Message<BigQueryOptions> {
  /**
   * Complete BigQuery table reference.
   *
   * @generated from field: google.privacy.dlp.v2beta1.BigQueryTable table_reference = 1;
   */
  tableReference?: BigQueryTable;

  /**
   * References to fields uniquely identifying rows within the table.
   * Nested fields in the format, like `person.birthdate.year`, are allowed.
   *
   * @generated from field: repeated google.privacy.dlp.v2beta1.FieldId identifying_fields = 2;
   */
  identifyingFields: FieldId[] = [];

  constructor(data?: PartialMessage<BigQueryOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.BigQueryOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table_reference", kind: "message", T: BigQueryTable },
    { no: 2, name: "identifying_fields", kind: "message", T: FieldId, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryOptions {
    return new BigQueryOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryOptions {
    return new BigQueryOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryOptions {
    return new BigQueryOptions().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryOptions | PlainMessage<BigQueryOptions> | undefined, b: BigQueryOptions | PlainMessage<BigQueryOptions> | undefined): boolean {
    return proto3.util.equals(BigQueryOptions, a, b);
  }
}

/**
 * Shared message indicating Cloud storage type.
 *
 * @generated from message google.privacy.dlp.v2beta1.StorageConfig
 */
export class StorageConfig extends Message<StorageConfig> {
  /**
   * @generated from oneof google.privacy.dlp.v2beta1.StorageConfig.type
   */
  type: {
    /**
     * Google Cloud Datastore options specification.
     *
     * @generated from field: google.privacy.dlp.v2beta1.DatastoreOptions datastore_options = 2;
     */
    value: DatastoreOptions;
    case: "datastoreOptions";
  } | {
    /**
     * Google Cloud Storage options specification.
     *
     * @generated from field: google.privacy.dlp.v2beta1.CloudStorageOptions cloud_storage_options = 3;
     */
    value: CloudStorageOptions;
    case: "cloudStorageOptions";
  } | {
    /**
     * BigQuery options specification.
     *
     * @generated from field: google.privacy.dlp.v2beta1.BigQueryOptions big_query_options = 4;
     */
    value: BigQueryOptions;
    case: "bigQueryOptions";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StorageConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.StorageConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "datastore_options", kind: "message", T: DatastoreOptions, oneof: "type" },
    { no: 3, name: "cloud_storage_options", kind: "message", T: CloudStorageOptions, oneof: "type" },
    { no: 4, name: "big_query_options", kind: "message", T: BigQueryOptions, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageConfig {
    return new StorageConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageConfig {
    return new StorageConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageConfig {
    return new StorageConfig().fromJsonString(jsonString, options);
  }

  static equals(a: StorageConfig | PlainMessage<StorageConfig> | undefined, b: StorageConfig | PlainMessage<StorageConfig> | undefined): boolean {
    return proto3.util.equals(StorageConfig, a, b);
  }
}

/**
 * Record key for a finding in a Cloud Storage file.
 *
 * @generated from message google.privacy.dlp.v2beta1.CloudStorageKey
 */
export class CloudStorageKey extends Message<CloudStorageKey> {
  /**
   * Path to the file.
   *
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  /**
   * Byte offset of the referenced data in the file.
   *
   * @generated from field: int64 start_offset = 2;
   */
  startOffset = protoInt64.zero;

  constructor(data?: PartialMessage<CloudStorageKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.CloudStorageKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloudStorageKey {
    return new CloudStorageKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloudStorageKey {
    return new CloudStorageKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloudStorageKey {
    return new CloudStorageKey().fromJsonString(jsonString, options);
  }

  static equals(a: CloudStorageKey | PlainMessage<CloudStorageKey> | undefined, b: CloudStorageKey | PlainMessage<CloudStorageKey> | undefined): boolean {
    return proto3.util.equals(CloudStorageKey, a, b);
  }
}

/**
 * Record key for a finding in Cloud Datastore.
 *
 * @generated from message google.privacy.dlp.v2beta1.DatastoreKey
 */
export class DatastoreKey extends Message<DatastoreKey> {
  /**
   * Datastore entity key.
   *
   * @generated from field: google.privacy.dlp.v2beta1.Key entity_key = 1;
   */
  entityKey?: Key;

  constructor(data?: PartialMessage<DatastoreKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.DatastoreKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_key", kind: "message", T: Key },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatastoreKey {
    return new DatastoreKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatastoreKey {
    return new DatastoreKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatastoreKey {
    return new DatastoreKey().fromJsonString(jsonString, options);
  }

  static equals(a: DatastoreKey | PlainMessage<DatastoreKey> | undefined, b: DatastoreKey | PlainMessage<DatastoreKey> | undefined): boolean {
    return proto3.util.equals(DatastoreKey, a, b);
  }
}

/**
 * A unique identifier for a Datastore entity.
 * If a key's partition ID or any of its path kinds or names are
 * reserved/read-only, the key is reserved/read-only.
 * A reserved/read-only key is forbidden in certain documented contexts.
 *
 * @generated from message google.privacy.dlp.v2beta1.Key
 */
export class Key extends Message<Key> {
  /**
   * Entities are partitioned into subsets, currently identified by a project
   * ID and namespace ID.
   * Queries are scoped to a single partition.
   *
   * @generated from field: google.privacy.dlp.v2beta1.PartitionId partition_id = 1;
   */
  partitionId?: PartitionId;

  /**
   * The entity path.
   * An entity path consists of one or more elements composed of a kind and a
   * string or numerical identifier, which identify entities. The first
   * element identifies a _root entity_, the second element identifies
   * a _child_ of the root entity, the third element identifies a child of the
   * second entity, and so forth. The entities identified by all prefixes of
   * the path are called the element's _ancestors_.
   *
   * A path can never be empty, and a path can have at most 100 elements.
   *
   * @generated from field: repeated google.privacy.dlp.v2beta1.Key.PathElement path = 2;
   */
  path: Key_PathElement[] = [];

  constructor(data?: PartialMessage<Key>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.Key";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "partition_id", kind: "message", T: PartitionId },
    { no: 2, name: "path", kind: "message", T: Key_PathElement, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Key {
    return new Key().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Key {
    return new Key().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Key {
    return new Key().fromJsonString(jsonString, options);
  }

  static equals(a: Key | PlainMessage<Key> | undefined, b: Key | PlainMessage<Key> | undefined): boolean {
    return proto3.util.equals(Key, a, b);
  }
}

/**
 * A (kind, ID/name) pair used to construct a key path.
 *
 * If either name or ID is set, the element is complete.
 * If neither is set, the element is incomplete.
 *
 * @generated from message google.privacy.dlp.v2beta1.Key.PathElement
 */
export class Key_PathElement extends Message<Key_PathElement> {
  /**
   * The kind of the entity.
   * A kind matching regex `__.*__` is reserved/read-only.
   * A kind must not contain more than 1500 bytes when UTF-8 encoded.
   * Cannot be `""`.
   *
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * The type of ID.
   *
   * @generated from oneof google.privacy.dlp.v2beta1.Key.PathElement.id_type
   */
  idType: {
    /**
     * The auto-allocated ID of the entity.
     * Never equal to zero. Values less than zero are discouraged and may not
     * be supported in the future.
     *
     * @generated from field: int64 id = 2;
     */
    value: bigint;
    case: "id";
  } | {
    /**
     * The name of the entity.
     * A name matching regex `__.*__` is reserved/read-only.
     * A name must not be more than 1500 bytes when UTF-8 encoded.
     * Cannot be `""`.
     *
     * @generated from field: string name = 3;
     */
    value: string;
    case: "name";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Key_PathElement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.Key.PathElement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "id_type" },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "id_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Key_PathElement {
    return new Key_PathElement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Key_PathElement {
    return new Key_PathElement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Key_PathElement {
    return new Key_PathElement().fromJsonString(jsonString, options);
  }

  static equals(a: Key_PathElement | PlainMessage<Key_PathElement> | undefined, b: Key_PathElement | PlainMessage<Key_PathElement> | undefined): boolean {
    return proto3.util.equals(Key_PathElement, a, b);
  }
}

/**
 * Message for a unique key indicating a record that contains a finding.
 *
 * @generated from message google.privacy.dlp.v2beta1.RecordKey
 */
export class RecordKey extends Message<RecordKey> {
  /**
   * @generated from oneof google.privacy.dlp.v2beta1.RecordKey.type
   */
  type: {
    /**
     * @generated from field: google.privacy.dlp.v2beta1.CloudStorageKey cloud_storage_key = 1;
     */
    value: CloudStorageKey;
    case: "cloudStorageKey";
  } | {
    /**
     * @generated from field: google.privacy.dlp.v2beta1.DatastoreKey datastore_key = 2;
     */
    value: DatastoreKey;
    case: "datastoreKey";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RecordKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.RecordKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cloud_storage_key", kind: "message", T: CloudStorageKey, oneof: "type" },
    { no: 2, name: "datastore_key", kind: "message", T: DatastoreKey, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecordKey {
    return new RecordKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecordKey {
    return new RecordKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecordKey {
    return new RecordKey().fromJsonString(jsonString, options);
  }

  static equals(a: RecordKey | PlainMessage<RecordKey> | undefined, b: RecordKey | PlainMessage<RecordKey> | undefined): boolean {
    return proto3.util.equals(RecordKey, a, b);
  }
}

/**
 * Message defining the location of a BigQuery table. A table is uniquely
 * identified  by its project_id, dataset_id, and table_name. Within a query
 * a table is often referenced with a string in the format of:
 * `<project_id>:<dataset_id>.<table_id>` or
 * `<project_id>.<dataset_id>.<table_id>`.
 *
 * @generated from message google.privacy.dlp.v2beta1.BigQueryTable
 */
export class BigQueryTable extends Message<BigQueryTable> {
  /**
   * The Google Cloud Platform project ID of the project containing the table.
   * If omitted, project ID is inferred from the API call.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * Dataset ID of the table.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * Name of the table.
   *
   * @generated from field: string table_id = 3;
   */
  tableId = "";

  constructor(data?: PartialMessage<BigQueryTable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.BigQueryTable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "table_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryTable {
    return new BigQueryTable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryTable {
    return new BigQueryTable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryTable {
    return new BigQueryTable().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryTable | PlainMessage<BigQueryTable> | undefined, b: BigQueryTable | PlainMessage<BigQueryTable> | undefined): boolean {
    return proto3.util.equals(BigQueryTable, a, b);
  }
}

/**
 * An entity in a dataset is a field or set of fields that correspond to a
 * single person. For example, in medical records the `EntityId` might be
 * a patient identifier, or for financial records it might be an account
 * identifier. This message is used when generalizations or analysis must be
 * consistent across multiple rows pertaining to the same entity.
 *
 * @generated from message google.privacy.dlp.v2beta1.EntityId
 */
export class EntityId extends Message<EntityId> {
  /**
   * Composite key indicating which field contains the entity identifier.
   *
   * @generated from field: google.privacy.dlp.v2beta1.FieldId field = 1;
   */
  field?: FieldId;

  constructor(data?: PartialMessage<EntityId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.privacy.dlp.v2beta1.EntityId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field", kind: "message", T: FieldId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityId {
    return new EntityId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityId {
    return new EntityId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityId {
    return new EntityId().fromJsonString(jsonString, options);
  }

  static equals(a: EntityId | PlainMessage<EntityId> | undefined, b: EntityId | PlainMessage<EntityId> | undefined): boolean {
    return proto3.util.equals(EntityId, a, b);
  }
}

