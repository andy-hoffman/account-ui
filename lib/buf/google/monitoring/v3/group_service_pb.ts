// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/monitoring/v3/group_service.proto (package google.monitoring.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Group } from "./group_pb.js";
import { TimeInterval } from "./common_pb.js";
import { MonitoredResource } from "../../api/monitored_resource_pb.js";

/**
 * The `ListGroup` request.
 *
 * @generated from message google.monitoring.v3.ListGroupsRequest
 */
export class ListGroupsRequest extends Message<ListGroupsRequest> {
  /**
   * The project whose groups are to be listed. The format is
   * `"projects/{project_id_or_number}"`.
   *
   * @generated from field: string name = 7;
   */
  name = "";

  /**
   * An optional filter consisting of a single group name.  The filters limit the
   * groups returned based on their parent-child relationship with the specified
   * group. If no filter is specified, all groups are returned.
   *
   * @generated from oneof google.monitoring.v3.ListGroupsRequest.filter
   */
  filter: {
    /**
     * A group name: `"projects/{project_id_or_number}/groups/{group_id}"`.
     * Returns groups whose `parentName` field contains the group
     * name.  If no groups have this parent, the results are empty.
     *
     * @generated from field: string children_of_group = 2;
     */
    value: string;
    case: "childrenOfGroup";
  } | {
    /**
     * A group name: `"projects/{project_id_or_number}/groups/{group_id}"`.
     * Returns groups that are ancestors of the specified group.
     * The groups are returned in order, starting with the immediate parent and
     * ending with the most distant ancestor.  If the specified group has no
     * immediate parent, the results are empty.
     *
     * @generated from field: string ancestors_of_group = 3;
     */
    value: string;
    case: "ancestorsOfGroup";
  } | {
    /**
     * A group name: `"projects/{project_id_or_number}/groups/{group_id}"`.
     * Returns the descendants of the specified group.  This is a superset of
     * the results returned by the `childrenOfGroup` filter, and includes
     * children-of-children, and so forth.
     *
     * @generated from field: string descendants_of_group = 4;
     */
    value: string;
    case: "descendantsOfGroup";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * A positive number that is the maximum number of results to return.
   *
   * @generated from field: int32 page_size = 5;
   */
  pageSize = 0;

  /**
   * If this field is not empty then it must contain the `nextPageToken` value
   * returned by a previous call to this method.  Using this field causes the
   * method to return additional results from the previous method call.
   *
   * @generated from field: string page_token = 6;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListGroupsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.ListGroupsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 7, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "children_of_group", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "filter" },
    { no: 3, name: "ancestors_of_group", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "filter" },
    { no: 4, name: "descendants_of_group", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "filter" },
    { no: 5, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListGroupsRequest {
    return new ListGroupsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListGroupsRequest {
    return new ListGroupsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListGroupsRequest {
    return new ListGroupsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListGroupsRequest | PlainMessage<ListGroupsRequest> | undefined, b: ListGroupsRequest | PlainMessage<ListGroupsRequest> | undefined): boolean {
    return proto3.util.equals(ListGroupsRequest, a, b);
  }
}

/**
 * The `ListGroups` response.
 *
 * @generated from message google.monitoring.v3.ListGroupsResponse
 */
export class ListGroupsResponse extends Message<ListGroupsResponse> {
  /**
   * The groups that match the specified filters.
   *
   * @generated from field: repeated google.monitoring.v3.Group group = 1;
   */
  group: Group[] = [];

  /**
   * If there are more results than have been returned, then this field is set
   * to a non-empty value.  To see the additional results,
   * use that value as `pageToken` in the next call to this method.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListGroupsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.ListGroupsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "group", kind: "message", T: Group, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListGroupsResponse {
    return new ListGroupsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListGroupsResponse {
    return new ListGroupsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListGroupsResponse {
    return new ListGroupsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListGroupsResponse | PlainMessage<ListGroupsResponse> | undefined, b: ListGroupsResponse | PlainMessage<ListGroupsResponse> | undefined): boolean {
    return proto3.util.equals(ListGroupsResponse, a, b);
  }
}

/**
 * The `GetGroup` request.
 *
 * @generated from message google.monitoring.v3.GetGroupRequest
 */
export class GetGroupRequest extends Message<GetGroupRequest> {
  /**
   * The group to retrieve. The format is
   * `"projects/{project_id_or_number}/groups/{group_id}"`.
   *
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<GetGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.GetGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGroupRequest {
    return new GetGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGroupRequest {
    return new GetGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGroupRequest {
    return new GetGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGroupRequest | PlainMessage<GetGroupRequest> | undefined, b: GetGroupRequest | PlainMessage<GetGroupRequest> | undefined): boolean {
    return proto3.util.equals(GetGroupRequest, a, b);
  }
}

/**
 * The `CreateGroup` request.
 *
 * @generated from message google.monitoring.v3.CreateGroupRequest
 */
export class CreateGroupRequest extends Message<CreateGroupRequest> {
  /**
   * The project in which to create the group. The format is
   * `"projects/{project_id_or_number}"`.
   *
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * A group definition. It is an error to define the `name` field because
   * the system assigns the name.
   *
   * @generated from field: google.monitoring.v3.Group group = 2;
   */
  group?: Group;

  /**
   * If true, validate this request but do not create the group.
   *
   * @generated from field: bool validate_only = 3;
   */
  validateOnly = false;

  constructor(data?: PartialMessage<CreateGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.CreateGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group", kind: "message", T: Group },
    { no: 3, name: "validate_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateGroupRequest {
    return new CreateGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateGroupRequest {
    return new CreateGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateGroupRequest {
    return new CreateGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateGroupRequest | PlainMessage<CreateGroupRequest> | undefined, b: CreateGroupRequest | PlainMessage<CreateGroupRequest> | undefined): boolean {
    return proto3.util.equals(CreateGroupRequest, a, b);
  }
}

/**
 * The `UpdateGroup` request.
 *
 * @generated from message google.monitoring.v3.UpdateGroupRequest
 */
export class UpdateGroupRequest extends Message<UpdateGroupRequest> {
  /**
   * The new definition of the group.  All fields of the existing group,
   * excepting `name`, are replaced with the corresponding fields of this group.
   *
   * @generated from field: google.monitoring.v3.Group group = 2;
   */
  group?: Group;

  /**
   * If true, validate this request but do not update the existing group.
   *
   * @generated from field: bool validate_only = 3;
   */
  validateOnly = false;

  constructor(data?: PartialMessage<UpdateGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.UpdateGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "group", kind: "message", T: Group },
    { no: 3, name: "validate_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateGroupRequest {
    return new UpdateGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateGroupRequest {
    return new UpdateGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateGroupRequest {
    return new UpdateGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateGroupRequest | PlainMessage<UpdateGroupRequest> | undefined, b: UpdateGroupRequest | PlainMessage<UpdateGroupRequest> | undefined): boolean {
    return proto3.util.equals(UpdateGroupRequest, a, b);
  }
}

/**
 * The `DeleteGroup` request. You can only delete a group if it has no children.
 *
 * @generated from message google.monitoring.v3.DeleteGroupRequest
 */
export class DeleteGroupRequest extends Message<DeleteGroupRequest> {
  /**
   * The group to delete. The format is
   * `"projects/{project_id_or_number}/groups/{group_id}"`.
   *
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.DeleteGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteGroupRequest {
    return new DeleteGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteGroupRequest {
    return new DeleteGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteGroupRequest {
    return new DeleteGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteGroupRequest | PlainMessage<DeleteGroupRequest> | undefined, b: DeleteGroupRequest | PlainMessage<DeleteGroupRequest> | undefined): boolean {
    return proto3.util.equals(DeleteGroupRequest, a, b);
  }
}

/**
 * The `ListGroupMembers` request.
 *
 * @generated from message google.monitoring.v3.ListGroupMembersRequest
 */
export class ListGroupMembersRequest extends Message<ListGroupMembersRequest> {
  /**
   * The group whose members are listed. The format is
   * `"projects/{project_id_or_number}/groups/{group_id}"`.
   *
   * @generated from field: string name = 7;
   */
  name = "";

  /**
   * A positive number that is the maximum number of results to return.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  /**
   * If this field is not empty then it must contain the `nextPageToken` value
   * returned by a previous call to this method.  Using this field causes the
   * method to return additional results from the previous method call.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  /**
   * An optional [list filter](/monitoring/api/learn_more#filtering) describing
   * the members to be returned.  The filter may reference the type, labels, and
   * metadata of monitored resources that comprise the group.
   * For example, to return only resources representing Compute Engine VM
   * instances, use this filter:
   *
   *     resource.type = "gce_instance"
   *
   * @generated from field: string filter = 5;
   */
  filter = "";

  /**
   * An optional time interval for which results should be returned. Only
   * members that were part of the group during the specified interval are
   * included in the response.  If no interval is provided then the group
   * membership over the last minute is returned.
   *
   * @generated from field: google.monitoring.v3.TimeInterval interval = 6;
   */
  interval?: TimeInterval;

  constructor(data?: PartialMessage<ListGroupMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.ListGroupMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 7, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "interval", kind: "message", T: TimeInterval },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListGroupMembersRequest {
    return new ListGroupMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListGroupMembersRequest {
    return new ListGroupMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListGroupMembersRequest {
    return new ListGroupMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListGroupMembersRequest | PlainMessage<ListGroupMembersRequest> | undefined, b: ListGroupMembersRequest | PlainMessage<ListGroupMembersRequest> | undefined): boolean {
    return proto3.util.equals(ListGroupMembersRequest, a, b);
  }
}

/**
 * The `ListGroupMembers` response.
 *
 * @generated from message google.monitoring.v3.ListGroupMembersResponse
 */
export class ListGroupMembersResponse extends Message<ListGroupMembersResponse> {
  /**
   * A set of monitored resources in the group.
   *
   * @generated from field: repeated google.api.MonitoredResource members = 1;
   */
  members: MonitoredResource[] = [];

  /**
   * If there are more results than have been returned, then this field is
   * set to a non-empty value.  To see the additional results, use that value as
   * `pageToken` in the next call to this method.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  /**
   * The total number of elements matching this request.
   *
   * @generated from field: int32 total_size = 3;
   */
  totalSize = 0;

  constructor(data?: PartialMessage<ListGroupMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.ListGroupMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: MonitoredResource, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "total_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListGroupMembersResponse {
    return new ListGroupMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListGroupMembersResponse {
    return new ListGroupMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListGroupMembersResponse {
    return new ListGroupMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListGroupMembersResponse | PlainMessage<ListGroupMembersResponse> | undefined, b: ListGroupMembersResponse | PlainMessage<ListGroupMembersResponse> | undefined): boolean {
    return proto3.util.equals(ListGroupMembersResponse, a, b);
  }
}

