// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/appengine/logging/v1/request_log.proto (package google.appengine.logging.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { LogSeverity } from "../../../logging/type/log_severity_pb.js";

/**
 * Application log line emitted while processing a request.
 *
 * @generated from message google.appengine.logging.v1.LogLine
 */
export class LogLine extends Message<LogLine> {
  /**
   * Approximate time when this log entry was made.
   *
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  /**
   * Severity of this log entry.
   *
   * @generated from field: google.logging.type.LogSeverity severity = 2;
   */
  severity = LogSeverity.DEFAULT;

  /**
   * App-provided log message.
   *
   * @generated from field: string log_message = 3;
   */
  logMessage = "";

  /**
   * Where in the source code this log message was written.
   *
   * @generated from field: google.appengine.logging.v1.SourceLocation source_location = 4;
   */
  sourceLocation?: SourceLocation;

  constructor(data?: PartialMessage<LogLine>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.appengine.logging.v1.LogLine";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "message", T: Timestamp },
    { no: 2, name: "severity", kind: "enum", T: proto3.getEnumType(LogSeverity) },
    { no: 3, name: "log_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "source_location", kind: "message", T: SourceLocation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogLine {
    return new LogLine().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogLine {
    return new LogLine().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogLine {
    return new LogLine().fromJsonString(jsonString, options);
  }

  static equals(a: LogLine | PlainMessage<LogLine> | undefined, b: LogLine | PlainMessage<LogLine> | undefined): boolean {
    return proto3.util.equals(LogLine, a, b);
  }
}

/**
 * Specifies a location in a source code file.
 *
 * @generated from message google.appengine.logging.v1.SourceLocation
 */
export class SourceLocation extends Message<SourceLocation> {
  /**
   * Source file name. Depending on the runtime environment, this might be a
   * simple name or a fully-qualified name.
   *
   * @generated from field: string file = 1;
   */
  file = "";

  /**
   * Line within the source file.
   *
   * @generated from field: int64 line = 2;
   */
  line = protoInt64.zero;

  /**
   * Human-readable name of the function or method being invoked, with optional
   * context such as the class or package name. This information is used in
   * contexts such as the logs viewer, where a file and line number are less
   * meaningful. The format can vary by language. For example:
   * `qual.if.ied.Class.method` (Java), `dir/package.func` (Go), `function`
   * (Python).
   *
   * @generated from field: string function_name = 3;
   */
  functionName = "";

  constructor(data?: PartialMessage<SourceLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.appengine.logging.v1.SourceLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "line", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "function_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SourceLocation {
    return new SourceLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SourceLocation {
    return new SourceLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SourceLocation {
    return new SourceLocation().fromJsonString(jsonString, options);
  }

  static equals(a: SourceLocation | PlainMessage<SourceLocation> | undefined, b: SourceLocation | PlainMessage<SourceLocation> | undefined): boolean {
    return proto3.util.equals(SourceLocation, a, b);
  }
}

/**
 * A reference to a particular snapshot of the source tree used to build and
 * deploy an application.
 *
 * @generated from message google.appengine.logging.v1.SourceReference
 */
export class SourceReference extends Message<SourceReference> {
  /**
   * Optional. A URI string identifying the repository.
   * Example: "https://github.com/GoogleCloudPlatform/kubernetes.git"
   *
   * @generated from field: string repository = 1;
   */
  repository = "";

  /**
   * The canonical and persistent identifier of the deployed revision.
   * Example (git): "0035781c50ec7aa23385dc841529ce8a4b70db1b"
   *
   * @generated from field: string revision_id = 2;
   */
  revisionId = "";

  constructor(data?: PartialMessage<SourceReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.appengine.logging.v1.SourceReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repository", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "revision_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SourceReference {
    return new SourceReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SourceReference {
    return new SourceReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SourceReference {
    return new SourceReference().fromJsonString(jsonString, options);
  }

  static equals(a: SourceReference | PlainMessage<SourceReference> | undefined, b: SourceReference | PlainMessage<SourceReference> | undefined): boolean {
    return proto3.util.equals(SourceReference, a, b);
  }
}

/**
 * Complete log information about a single HTTP request to an App Engine
 * application.
 *
 * @generated from message google.appengine.logging.v1.RequestLog
 */
export class RequestLog extends Message<RequestLog> {
  /**
   * Application that handled this request.
   *
   * @generated from field: string app_id = 1;
   */
  appId = "";

  /**
   * Module of the application that handled this request.
   *
   * @generated from field: string module_id = 37;
   */
  moduleId = "";

  /**
   * Version of the application that handled this request.
   *
   * @generated from field: string version_id = 2;
   */
  versionId = "";

  /**
   * Globally unique identifier for a request, which is based on the request
   * start time.  Request IDs for requests which started later will compare
   * greater as strings than those for requests which started earlier.
   *
   * @generated from field: string request_id = 3;
   */
  requestId = "";

  /**
   * Origin IP address.
   *
   * @generated from field: string ip = 4;
   */
  ip = "";

  /**
   * Time when the request started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 6;
   */
  startTime?: Timestamp;

  /**
   * Time when the request finished.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 7;
   */
  endTime?: Timestamp;

  /**
   * Latency of the request.
   *
   * @generated from field: google.protobuf.Duration latency = 8;
   */
  latency?: Duration;

  /**
   * Number of CPU megacycles used to process request.
   *
   * @generated from field: int64 mega_cycles = 9;
   */
  megaCycles = protoInt64.zero;

  /**
   * Request method. Example: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`, `"DELETE"`.
   *
   * @generated from field: string method = 10;
   */
  method = "";

  /**
   * Contains the path and query portion of the URL that was requested. For
   * example, if the URL was "http://example.com/app?name=val", the resource
   * would be "/app?name=val".  The fragment identifier, which is identified by
   * the `#` character, is not included.
   *
   * @generated from field: string resource = 11;
   */
  resource = "";

  /**
   * HTTP version of request. Example: `"HTTP/1.1"`.
   *
   * @generated from field: string http_version = 12;
   */
  httpVersion = "";

  /**
   * HTTP response status code. Example: 200, 404.
   *
   * @generated from field: int32 status = 13;
   */
  status = 0;

  /**
   * Size in bytes sent back to client by request.
   *
   * @generated from field: int64 response_size = 14;
   */
  responseSize = protoInt64.zero;

  /**
   * Referrer URL of request.
   *
   * @generated from field: string referrer = 15;
   */
  referrer = "";

  /**
   * User agent that made the request.
   *
   * @generated from field: string user_agent = 16;
   */
  userAgent = "";

  /**
   * The logged-in user who made the request.
   *
   * Most likely, this is the part of the user's email before the `@` sign.  The
   * field value is the same for different requests from the same user, but
   * different users can have similar names.  This information is also
   * available to the application via the App Engine Users API.
   *
   * This field will be populated starting with App Engine 1.9.21.
   *
   * @generated from field: string nickname = 40;
   */
  nickname = "";

  /**
   * File or class that handled the request.
   *
   * @generated from field: string url_map_entry = 17;
   */
  urlMapEntry = "";

  /**
   * Internet host and port number of the resource being requested.
   *
   * @generated from field: string host = 20;
   */
  host = "";

  /**
   * An indication of the relative cost of serving this request.
   *
   * @generated from field: double cost = 21;
   */
  cost = 0;

  /**
   * Queue name of the request, in the case of an offline request.
   *
   * @generated from field: string task_queue_name = 22;
   */
  taskQueueName = "";

  /**
   * Task name of the request, in the case of an offline request.
   *
   * @generated from field: string task_name = 23;
   */
  taskName = "";

  /**
   * Whether this was a loading request for the instance.
   *
   * @generated from field: bool was_loading_request = 24;
   */
  wasLoadingRequest = false;

  /**
   * Time this request spent in the pending request queue.
   *
   * @generated from field: google.protobuf.Duration pending_time = 25;
   */
  pendingTime?: Duration;

  /**
   * If the instance processing this request belongs to a manually scaled
   * module, then this is the 0-based index of the instance. Otherwise, this
   * value is -1.
   *
   * @generated from field: int32 instance_index = 26;
   */
  instanceIndex = 0;

  /**
   * Whether this request is finished or active.
   *
   * @generated from field: bool finished = 27;
   */
  finished = false;

  /**
   * Whether this is the first `RequestLog` entry for this request.  If an
   * active request has several `RequestLog` entries written to Stackdriver
   * Logging, then this field will be set for one of them.
   *
   * @generated from field: bool first = 42;
   */
  first = false;

  /**
   * An identifier for the instance that handled the request.
   *
   * @generated from field: string instance_id = 28;
   */
  instanceId = "";

  /**
   * A list of log lines emitted by the application while serving this request.
   *
   * @generated from field: repeated google.appengine.logging.v1.LogLine line = 29;
   */
  line: LogLine[] = [];

  /**
   * App Engine release version.
   *
   * @generated from field: string app_engine_release = 38;
   */
  appEngineRelease = "";

  /**
   * Stackdriver Trace identifier for this request.
   *
   * @generated from field: string trace_id = 39;
   */
  traceId = "";

  /**
   * Source code for the application that handled this request. There can be
   * more than one source reference per deployed application if source code is
   * distributed among multiple repositories.
   *
   * @generated from field: repeated google.appengine.logging.v1.SourceReference source_reference = 41;
   */
  sourceReference: SourceReference[] = [];

  constructor(data?: PartialMessage<RequestLog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.appengine.logging.v1.RequestLog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 37, name: "module_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "start_time", kind: "message", T: Timestamp },
    { no: 7, name: "end_time", kind: "message", T: Timestamp },
    { no: 8, name: "latency", kind: "message", T: Duration },
    { no: 9, name: "mega_cycles", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "http_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "response_size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "referrer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "user_agent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "nickname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "url_map_entry", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "cost", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 22, name: "task_queue_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "task_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "was_loading_request", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 25, name: "pending_time", kind: "message", T: Duration },
    { no: 26, name: "instance_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 27, name: "finished", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 42, name: "first", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 28, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 29, name: "line", kind: "message", T: LogLine, repeated: true },
    { no: 38, name: "app_engine_release", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 39, name: "trace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 41, name: "source_reference", kind: "message", T: SourceReference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestLog {
    return new RequestLog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestLog {
    return new RequestLog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestLog {
    return new RequestLog().fromJsonString(jsonString, options);
  }

  static equals(a: RequestLog | PlainMessage<RequestLog> | undefined, b: RequestLog | PlainMessage<RequestLog> | undefined): boolean {
    return proto3.util.equals(RequestLog, a, b);
  }
}

