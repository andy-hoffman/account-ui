// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/appengine/v1/service.proto (package google.appengine.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * A Service resource is a logical component of an application that can share
 * state and communicate in a secure fashion with other services.
 * For example, an application that handles customer requests might
 * include separate services to handle tasks such as backend data
 * analysis or API requests from mobile devices. Each service has a
 * collection of versions that define a specific set of code used to
 * implement the functionality of that service.
 *
 * @generated from message google.appengine.v1.Service
 */
export class Service extends Message<Service> {
  /**
   * Full path to the Service resource in the API.
   * Example: `apps/myapp/services/default`.
   *
   * @OutputOnly
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Relative name of the service within the application.
   * Example: `default`.
   *
   * @OutputOnly
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * Mapping that defines fractional HTTP traffic diversion to
   * different versions within the service.
   *
   * @generated from field: google.appengine.v1.TrafficSplit split = 3;
   */
  split?: TrafficSplit;

  constructor(data?: PartialMessage<Service>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.appengine.v1.Service";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "split", kind: "message", T: TrafficSplit },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Service {
    return new Service().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Service {
    return new Service().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Service {
    return new Service().fromJsonString(jsonString, options);
  }

  static equals(a: Service | PlainMessage<Service> | undefined, b: Service | PlainMessage<Service> | undefined): boolean {
    return proto3.util.equals(Service, a, b);
  }
}

/**
 * Traffic routing configuration for versions within a single service. Traffic
 * splits define how traffic directed to the service is assigned to versions.
 *
 * @generated from message google.appengine.v1.TrafficSplit
 */
export class TrafficSplit extends Message<TrafficSplit> {
  /**
   * Mechanism used to determine which version a request is sent to.
   * The traffic selection algorithm will
   * be stable for either type until allocations are changed.
   *
   * @generated from field: google.appengine.v1.TrafficSplit.ShardBy shard_by = 1;
   */
  shardBy = TrafficSplit_ShardBy.UNSPECIFIED;

  /**
   * Mapping from version IDs within the service to fractional
   * (0.000, 1] allocations of traffic for that version. Each version can
   * be specified only once, but some versions in the service may not
   * have any traffic allocation. Services that have traffic allocated
   * cannot be deleted until either the service is deleted or
   * their traffic allocation is removed. Allocations must sum to 1.
   * Up to two decimal place precision is supported for IP-based splits and
   * up to three decimal places is supported for cookie-based splits.
   *
   * @generated from field: map<string, double> allocations = 2;
   */
  allocations: { [key: string]: number } = {};

  constructor(data?: PartialMessage<TrafficSplit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.appengine.v1.TrafficSplit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shard_by", kind: "enum", T: proto3.getEnumType(TrafficSplit_ShardBy) },
    { no: 2, name: "allocations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 1 /* ScalarType.DOUBLE */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrafficSplit {
    return new TrafficSplit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrafficSplit {
    return new TrafficSplit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrafficSplit {
    return new TrafficSplit().fromJsonString(jsonString, options);
  }

  static equals(a: TrafficSplit | PlainMessage<TrafficSplit> | undefined, b: TrafficSplit | PlainMessage<TrafficSplit> | undefined): boolean {
    return proto3.util.equals(TrafficSplit, a, b);
  }
}

/**
 * Available sharding mechanisms.
 *
 * @generated from enum google.appengine.v1.TrafficSplit.ShardBy
 */
export enum TrafficSplit_ShardBy {
  /**
   * Diversion method unspecified.
   *
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Diversion based on a specially named cookie, "GOOGAPPUID." The cookie
   * must be set by the application itself or no diversion will occur.
   *
   * @generated from enum value: COOKIE = 1;
   */
  COOKIE = 1,

  /**
   * Diversion based on applying the modulus operation to a fingerprint
   * of the IP address.
   *
   * @generated from enum value: IP = 2;
   */
  IP = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(TrafficSplit_ShardBy)
proto3.util.setEnumType(TrafficSplit_ShardBy, "google.appengine.v1.TrafficSplit.ShardBy", [
  { no: 0, name: "UNSPECIFIED" },
  { no: 1, name: "COOKIE" },
  { no: 2, name: "IP" },
]);

