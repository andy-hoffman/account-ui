// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/appengine/v1/app_yaml.proto (package google.appengine.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";

/**
 * Actions to take when the user is not logged in.
 *
 * @generated from enum google.appengine.v1.AuthFailAction
 */
export enum AuthFailAction {
  /**
   * Not specified. `AUTH_FAIL_ACTION_REDIRECT` is assumed.
   *
   * @generated from enum value: AUTH_FAIL_ACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Redirects user to "accounts.google.com". The user is redirected back to the
   * application URL after signing in or creating an account.
   *
   * @generated from enum value: AUTH_FAIL_ACTION_REDIRECT = 1;
   */
  REDIRECT = 1,

  /**
   * Rejects request with a `401` HTTP status code and an error
   * message.
   *
   * @generated from enum value: AUTH_FAIL_ACTION_UNAUTHORIZED = 2;
   */
  UNAUTHORIZED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AuthFailAction)
proto3.util.setEnumType(AuthFailAction, "google.appengine.v1.AuthFailAction", [
  { no: 0, name: "AUTH_FAIL_ACTION_UNSPECIFIED" },
  { no: 1, name: "AUTH_FAIL_ACTION_REDIRECT" },
  { no: 2, name: "AUTH_FAIL_ACTION_UNAUTHORIZED" },
]);

/**
 * Methods to restrict access to a URL based on login status.
 *
 * @generated from enum google.appengine.v1.LoginRequirement
 */
export enum LoginRequirement {
  /**
   * Not specified. `LOGIN_OPTIONAL` is assumed.
   *
   * @generated from enum value: LOGIN_UNSPECIFIED = 0;
   */
  LOGIN_UNSPECIFIED = 0,

  /**
   * Does not require that the user is signed in.
   *
   * @generated from enum value: LOGIN_OPTIONAL = 1;
   */
  LOGIN_OPTIONAL = 1,

  /**
   * If the user is not signed in, the `auth_fail_action` is taken.
   * In addition, if the user is not an administrator for the
   * application, they are given an error message regardless of
   * `auth_fail_action`. If the user is an administrator, the handler
   * proceeds.
   *
   * @generated from enum value: LOGIN_ADMIN = 2;
   */
  LOGIN_ADMIN = 2,

  /**
   * If the user has signed in, the handler proceeds normally. Otherwise, the
   * auth_fail_action is taken.
   *
   * @generated from enum value: LOGIN_REQUIRED = 3;
   */
  LOGIN_REQUIRED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(LoginRequirement)
proto3.util.setEnumType(LoginRequirement, "google.appengine.v1.LoginRequirement", [
  { no: 0, name: "LOGIN_UNSPECIFIED" },
  { no: 1, name: "LOGIN_OPTIONAL" },
  { no: 2, name: "LOGIN_ADMIN" },
  { no: 3, name: "LOGIN_REQUIRED" },
]);

/**
 * Methods to enforce security (HTTPS) on a URL.
 *
 * @generated from enum google.appengine.v1.SecurityLevel
 */
export enum SecurityLevel {
  /**
   * Not specified.
   *
   * @generated from enum value: SECURE_UNSPECIFIED = 0;
   */
  SECURE_UNSPECIFIED = 0,

  /**
   * Both HTTP and HTTPS requests with URLs that match the handler succeed
   * without redirects. The application can examine the request to determine
   * which protocol was used, and respond accordingly.
   *
   * @generated from enum value: SECURE_DEFAULT = 0;
   */
  SECURE_DEFAULT = 0,

  /**
   * Requests for a URL that match this handler that use HTTPS are automatically
   * redirected to the HTTP equivalent URL.
   *
   * @generated from enum value: SECURE_NEVER = 1;
   */
  SECURE_NEVER = 1,

  /**
   * Both HTTP and HTTPS requests with URLs that match the handler succeed
   * without redirects. The application can examine the request to determine
   * which protocol was used and respond accordingly.
   *
   * @generated from enum value: SECURE_OPTIONAL = 2;
   */
  SECURE_OPTIONAL = 2,

  /**
   * Requests for a URL that match this handler that do not use HTTPS are
   * automatically redirected to the HTTPS URL with the same path. Query
   * parameters are reserved for the redirect.
   *
   * @generated from enum value: SECURE_ALWAYS = 3;
   */
  SECURE_ALWAYS = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SecurityLevel)
proto3.util.setEnumType(SecurityLevel, "google.appengine.v1.SecurityLevel", [
  { no: 0, name: "SECURE_UNSPECIFIED" },
  { no: 0, name: "SECURE_DEFAULT" },
  { no: 1, name: "SECURE_NEVER" },
  { no: 2, name: "SECURE_OPTIONAL" },
  { no: 3, name: "SECURE_ALWAYS" },
]);

/**
 * [Google Cloud Endpoints](https://cloud.google.com/appengine/docs/python/endpoints/)
 * configuration for API handlers.
 *
 * @generated from message google.appengine.v1.ApiConfigHandler
 */
export class ApiConfigHandler extends Message<ApiConfigHandler> {
  /**
   * Action to take when users access resources that require
   * authentication. Defaults to `redirect`.
   *
   * @generated from field: google.appengine.v1.AuthFailAction auth_fail_action = 1;
   */
  authFailAction = AuthFailAction.UNSPECIFIED;

  /**
   * Level of login required to access this resource. Defaults to
   * `optional`.
   *
   * @generated from field: google.appengine.v1.LoginRequirement login = 2;
   */
  login = LoginRequirement.LOGIN_UNSPECIFIED;

  /**
   * Path to the script from the application root directory.
   *
   * @generated from field: string script = 3;
   */
  script = "";

  /**
   * Security (HTTPS) enforcement for this URL.
   *
   * @generated from field: google.appengine.v1.SecurityLevel security_level = 4;
   */
  securityLevel = SecurityLevel.SECURE_UNSPECIFIED;

  /**
   * URL to serve the endpoint at.
   *
   * @generated from field: string url = 5;
   */
  url = "";

  constructor(data?: PartialMessage<ApiConfigHandler>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.appengine.v1.ApiConfigHandler";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auth_fail_action", kind: "enum", T: proto3.getEnumType(AuthFailAction) },
    { no: 2, name: "login", kind: "enum", T: proto3.getEnumType(LoginRequirement) },
    { no: 3, name: "script", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "security_level", kind: "enum", T: proto3.getEnumType(SecurityLevel) },
    { no: 5, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiConfigHandler {
    return new ApiConfigHandler().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiConfigHandler {
    return new ApiConfigHandler().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiConfigHandler {
    return new ApiConfigHandler().fromJsonString(jsonString, options);
  }

  static equals(a: ApiConfigHandler | PlainMessage<ApiConfigHandler> | undefined, b: ApiConfigHandler | PlainMessage<ApiConfigHandler> | undefined): boolean {
    return proto3.util.equals(ApiConfigHandler, a, b);
  }
}

/**
 * Custom static error page to be served when an error occurs.
 *
 * @generated from message google.appengine.v1.ErrorHandler
 */
export class ErrorHandler extends Message<ErrorHandler> {
  /**
   * Error condition this handler applies to.
   *
   * @generated from field: google.appengine.v1.ErrorHandler.ErrorCode error_code = 1;
   */
  errorCode = ErrorHandler_ErrorCode.UNSPECIFIED;

  /**
   * Static file content to be served for this error.
   *
   * @generated from field: string static_file = 2;
   */
  staticFile = "";

  /**
   * MIME type of file. Defaults to `text/html`.
   *
   * @generated from field: string mime_type = 3;
   */
  mimeType = "";

  constructor(data?: PartialMessage<ErrorHandler>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.appengine.v1.ErrorHandler";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error_code", kind: "enum", T: proto3.getEnumType(ErrorHandler_ErrorCode) },
    { no: 2, name: "static_file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ErrorHandler {
    return new ErrorHandler().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ErrorHandler {
    return new ErrorHandler().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ErrorHandler {
    return new ErrorHandler().fromJsonString(jsonString, options);
  }

  static equals(a: ErrorHandler | PlainMessage<ErrorHandler> | undefined, b: ErrorHandler | PlainMessage<ErrorHandler> | undefined): boolean {
    return proto3.util.equals(ErrorHandler, a, b);
  }
}

/**
 * Error codes.
 *
 * @generated from enum google.appengine.v1.ErrorHandler.ErrorCode
 */
export enum ErrorHandler_ErrorCode {
  /**
   * Not specified. ERROR_CODE_DEFAULT is assumed.
   *
   * @generated from enum value: ERROR_CODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * All other error types.
   *
   * @generated from enum value: ERROR_CODE_DEFAULT = 0;
   */
  DEFAULT = 0,

  /**
   * Application has exceeded a resource quota.
   *
   * @generated from enum value: ERROR_CODE_OVER_QUOTA = 1;
   */
  OVER_QUOTA = 1,

  /**
   * Client blocked by the application's Denial of Service protection
   * configuration.
   *
   * @generated from enum value: ERROR_CODE_DOS_API_DENIAL = 2;
   */
  DOS_API_DENIAL = 2,

  /**
   * Deadline reached before the application responds.
   *
   * @generated from enum value: ERROR_CODE_TIMEOUT = 3;
   */
  TIMEOUT = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ErrorHandler_ErrorCode)
proto3.util.setEnumType(ErrorHandler_ErrorCode, "google.appengine.v1.ErrorHandler.ErrorCode", [
  { no: 0, name: "ERROR_CODE_UNSPECIFIED" },
  { no: 0, name: "ERROR_CODE_DEFAULT" },
  { no: 1, name: "ERROR_CODE_OVER_QUOTA" },
  { no: 2, name: "ERROR_CODE_DOS_API_DENIAL" },
  { no: 3, name: "ERROR_CODE_TIMEOUT" },
]);

/**
 * URL pattern and description of how the URL should be handled. App Engine can
 * handle URLs by executing application code or by serving static files
 * uploaded with the version, such as images, CSS, or JavaScript.
 *
 * @generated from message google.appengine.v1.UrlMap
 */
export class UrlMap extends Message<UrlMap> {
  /**
   * URL prefix. Uses regular expression syntax, which means regexp
   * special characters must be escaped, but should not contain groupings.
   * All URLs that begin with this prefix are handled by this handler, using the
   * portion of the URL after the prefix as part of the file path.
   *
   * @generated from field: string url_regex = 1;
   */
  urlRegex = "";

  /**
   * Type of handler for this URL pattern.
   *
   * @generated from oneof google.appengine.v1.UrlMap.handler_type
   */
  handlerType: {
    /**
     * Returns the contents of a file, such as an image, as the response.
     *
     * @generated from field: google.appengine.v1.StaticFilesHandler static_files = 2;
     */
    value: StaticFilesHandler;
    case: "staticFiles";
  } | {
    /**
     * Executes a script to handle the request that matches this URL
     * pattern.
     *
     * @generated from field: google.appengine.v1.ScriptHandler script = 3;
     */
    value: ScriptHandler;
    case: "script";
  } | {
    /**
     * Uses API Endpoints to handle requests.
     *
     * @generated from field: google.appengine.v1.ApiEndpointHandler api_endpoint = 4;
     */
    value: ApiEndpointHandler;
    case: "apiEndpoint";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Security (HTTPS) enforcement for this URL.
   *
   * @generated from field: google.appengine.v1.SecurityLevel security_level = 5;
   */
  securityLevel = SecurityLevel.SECURE_UNSPECIFIED;

  /**
   * Level of login required to access this resource.
   *
   * @generated from field: google.appengine.v1.LoginRequirement login = 6;
   */
  login = LoginRequirement.LOGIN_UNSPECIFIED;

  /**
   * Action to take when users access resources that require
   * authentication. Defaults to `redirect`.
   *
   * @generated from field: google.appengine.v1.AuthFailAction auth_fail_action = 7;
   */
  authFailAction = AuthFailAction.UNSPECIFIED;

  /**
   * `30x` code to use when performing redirects for the `secure` field.
   * Defaults to `302`.
   *
   * @generated from field: google.appengine.v1.UrlMap.RedirectHttpResponseCode redirect_http_response_code = 8;
   */
  redirectHttpResponseCode = UrlMap_RedirectHttpResponseCode.REDIRECT_HTTP_RESPONSE_CODE_UNSPECIFIED;

  constructor(data?: PartialMessage<UrlMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.appengine.v1.UrlMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url_regex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "static_files", kind: "message", T: StaticFilesHandler, oneof: "handler_type" },
    { no: 3, name: "script", kind: "message", T: ScriptHandler, oneof: "handler_type" },
    { no: 4, name: "api_endpoint", kind: "message", T: ApiEndpointHandler, oneof: "handler_type" },
    { no: 5, name: "security_level", kind: "enum", T: proto3.getEnumType(SecurityLevel) },
    { no: 6, name: "login", kind: "enum", T: proto3.getEnumType(LoginRequirement) },
    { no: 7, name: "auth_fail_action", kind: "enum", T: proto3.getEnumType(AuthFailAction) },
    { no: 8, name: "redirect_http_response_code", kind: "enum", T: proto3.getEnumType(UrlMap_RedirectHttpResponseCode) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UrlMap {
    return new UrlMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UrlMap {
    return new UrlMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UrlMap {
    return new UrlMap().fromJsonString(jsonString, options);
  }

  static equals(a: UrlMap | PlainMessage<UrlMap> | undefined, b: UrlMap | PlainMessage<UrlMap> | undefined): boolean {
    return proto3.util.equals(UrlMap, a, b);
  }
}

/**
 * Redirect codes.
 *
 * @generated from enum google.appengine.v1.UrlMap.RedirectHttpResponseCode
 */
export enum UrlMap_RedirectHttpResponseCode {
  /**
   * Not specified. `302` is assumed.
   *
   * @generated from enum value: REDIRECT_HTTP_RESPONSE_CODE_UNSPECIFIED = 0;
   */
  REDIRECT_HTTP_RESPONSE_CODE_UNSPECIFIED = 0,

  /**
   * `301 Moved Permanently` code.
   *
   * @generated from enum value: REDIRECT_HTTP_RESPONSE_CODE_301 = 1;
   */
  REDIRECT_HTTP_RESPONSE_CODE_301 = 1,

  /**
   * `302 Moved Temporarily` code.
   *
   * @generated from enum value: REDIRECT_HTTP_RESPONSE_CODE_302 = 2;
   */
  REDIRECT_HTTP_RESPONSE_CODE_302 = 2,

  /**
   * `303 See Other` code.
   *
   * @generated from enum value: REDIRECT_HTTP_RESPONSE_CODE_303 = 3;
   */
  REDIRECT_HTTP_RESPONSE_CODE_303 = 3,

  /**
   * `307 Temporary Redirect` code.
   *
   * @generated from enum value: REDIRECT_HTTP_RESPONSE_CODE_307 = 4;
   */
  REDIRECT_HTTP_RESPONSE_CODE_307 = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(UrlMap_RedirectHttpResponseCode)
proto3.util.setEnumType(UrlMap_RedirectHttpResponseCode, "google.appengine.v1.UrlMap.RedirectHttpResponseCode", [
  { no: 0, name: "REDIRECT_HTTP_RESPONSE_CODE_UNSPECIFIED" },
  { no: 1, name: "REDIRECT_HTTP_RESPONSE_CODE_301" },
  { no: 2, name: "REDIRECT_HTTP_RESPONSE_CODE_302" },
  { no: 3, name: "REDIRECT_HTTP_RESPONSE_CODE_303" },
  { no: 4, name: "REDIRECT_HTTP_RESPONSE_CODE_307" },
]);

/**
 * Files served directly to the user for a given URL, such as images, CSS
 * stylesheets, or JavaScript source files. Static file handlers describe which
 * files in the application directory are static files, and which URLs serve
 * them.
 *
 * @generated from message google.appengine.v1.StaticFilesHandler
 */
export class StaticFilesHandler extends Message<StaticFilesHandler> {
  /**
   * Path to the static files matched by the URL pattern, from the
   * application root directory. The path can refer to text matched in groupings
   * in the URL pattern.
   *
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * Regular expression that matches the file paths for all files that should be
   * referenced by this handler.
   *
   * @generated from field: string upload_path_regex = 2;
   */
  uploadPathRegex = "";

  /**
   * HTTP headers to use for all responses from these URLs.
   *
   * @generated from field: map<string, string> http_headers = 3;
   */
  httpHeaders: { [key: string]: string } = {};

  /**
   * MIME type used to serve all files served by this handler.
   *
   * Defaults to file-specific MIME types, which are derived from each file's
   * filename extension.
   *
   * @generated from field: string mime_type = 4;
   */
  mimeType = "";

  /**
   * Time a static file served by this handler should be cached
   * by web proxies and browsers.
   *
   * @generated from field: google.protobuf.Duration expiration = 5;
   */
  expiration?: Duration;

  /**
   * Whether this handler should match the request if the file
   * referenced by the handler does not exist.
   *
   * @generated from field: bool require_matching_file = 6;
   */
  requireMatchingFile = false;

  /**
   * Whether files should also be uploaded as code data. By default, files
   * declared in static file handlers are uploaded as static
   * data and are only served to end users; they cannot be read by the
   * application. If enabled, uploads are charged against both your code and
   * static data storage resource quotas.
   *
   * @generated from field: bool application_readable = 7;
   */
  applicationReadable = false;

  constructor(data?: PartialMessage<StaticFilesHandler>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.appengine.v1.StaticFilesHandler";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "upload_path_regex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "http_headers", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "expiration", kind: "message", T: Duration },
    { no: 6, name: "require_matching_file", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "application_readable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StaticFilesHandler {
    return new StaticFilesHandler().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StaticFilesHandler {
    return new StaticFilesHandler().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StaticFilesHandler {
    return new StaticFilesHandler().fromJsonString(jsonString, options);
  }

  static equals(a: StaticFilesHandler | PlainMessage<StaticFilesHandler> | undefined, b: StaticFilesHandler | PlainMessage<StaticFilesHandler> | undefined): boolean {
    return proto3.util.equals(StaticFilesHandler, a, b);
  }
}

/**
 * Executes a script to handle the request that matches the URL pattern.
 *
 * @generated from message google.appengine.v1.ScriptHandler
 */
export class ScriptHandler extends Message<ScriptHandler> {
  /**
   * Path to the script from the application root directory.
   *
   * @generated from field: string script_path = 1;
   */
  scriptPath = "";

  constructor(data?: PartialMessage<ScriptHandler>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.appengine.v1.ScriptHandler";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "script_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScriptHandler {
    return new ScriptHandler().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScriptHandler {
    return new ScriptHandler().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScriptHandler {
    return new ScriptHandler().fromJsonString(jsonString, options);
  }

  static equals(a: ScriptHandler | PlainMessage<ScriptHandler> | undefined, b: ScriptHandler | PlainMessage<ScriptHandler> | undefined): boolean {
    return proto3.util.equals(ScriptHandler, a, b);
  }
}

/**
 * Uses Google Cloud Endpoints to handle requests.
 *
 * @generated from message google.appengine.v1.ApiEndpointHandler
 */
export class ApiEndpointHandler extends Message<ApiEndpointHandler> {
  /**
   * Path to the script from the application root directory.
   *
   * @generated from field: string script_path = 1;
   */
  scriptPath = "";

  constructor(data?: PartialMessage<ApiEndpointHandler>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.appengine.v1.ApiEndpointHandler";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "script_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiEndpointHandler {
    return new ApiEndpointHandler().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiEndpointHandler {
    return new ApiEndpointHandler().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiEndpointHandler {
    return new ApiEndpointHandler().fromJsonString(jsonString, options);
  }

  static equals(a: ApiEndpointHandler | PlainMessage<ApiEndpointHandler> | undefined, b: ApiEndpointHandler | PlainMessage<ApiEndpointHandler> | undefined): boolean {
    return proto3.util.equals(ApiEndpointHandler, a, b);
  }
}

/**
 * Health checking configuration for VM instances. Unhealthy instances
 * are killed and replaced with new instances. Only applicable for
 * instances in App Engine flexible environment.
 *
 * @generated from message google.appengine.v1.HealthCheck
 */
export class HealthCheck extends Message<HealthCheck> {
  /**
   * Whether to explicitly disable health checks for this instance.
   *
   * @generated from field: bool disable_health_check = 1;
   */
  disableHealthCheck = false;

  /**
   * Host header to send when performing an HTTP health check.
   * Example: "myapp.appspot.com"
   *
   * @generated from field: string host = 2;
   */
  host = "";

  /**
   * Number of consecutive successful health checks required before receiving
   * traffic.
   *
   * @generated from field: uint32 healthy_threshold = 3;
   */
  healthyThreshold = 0;

  /**
   * Number of consecutive failed health checks required before removing
   * traffic.
   *
   * @generated from field: uint32 unhealthy_threshold = 4;
   */
  unhealthyThreshold = 0;

  /**
   * Number of consecutive failed health checks required before an instance is
   * restarted.
   *
   * @generated from field: uint32 restart_threshold = 5;
   */
  restartThreshold = 0;

  /**
   * Interval between health checks.
   *
   * @generated from field: google.protobuf.Duration check_interval = 6;
   */
  checkInterval?: Duration;

  /**
   * Time before the health check is considered failed.
   *
   * @generated from field: google.protobuf.Duration timeout = 7;
   */
  timeout?: Duration;

  constructor(data?: PartialMessage<HealthCheck>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.appengine.v1.HealthCheck";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "disable_health_check", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "healthy_threshold", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "unhealthy_threshold", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "restart_threshold", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "check_interval", kind: "message", T: Duration },
    { no: 7, name: "timeout", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheck {
    return new HealthCheck().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheck {
    return new HealthCheck().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthCheck {
    return new HealthCheck().fromJsonString(jsonString, options);
  }

  static equals(a: HealthCheck | PlainMessage<HealthCheck> | undefined, b: HealthCheck | PlainMessage<HealthCheck> | undefined): boolean {
    return proto3.util.equals(HealthCheck, a, b);
  }
}

/**
 * Third-party Python runtime library that is required by the application.
 *
 * @generated from message google.appengine.v1.Library
 */
export class Library extends Message<Library> {
  /**
   * Name of the library. Example: "django".
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Version of the library to select, or "latest".
   *
   * @generated from field: string version = 2;
   */
  version = "";

  constructor(data?: PartialMessage<Library>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.appengine.v1.Library";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Library {
    return new Library().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Library {
    return new Library().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Library {
    return new Library().fromJsonString(jsonString, options);
  }

  static equals(a: Library | PlainMessage<Library> | undefined, b: Library | PlainMessage<Library> | undefined): boolean {
    return proto3.util.equals(Library, a, b);
  }
}

