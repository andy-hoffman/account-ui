// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/storagetransfer/v1/transfer.proto (package google.storagetransfer.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";
import { TransferJob } from "./transfer_types_pb.js";

/**
 * Request passed to GetGoogleServiceAccount.
 *
 * @generated from message google.storagetransfer.v1.GetGoogleServiceAccountRequest
 */
export class GetGoogleServiceAccountRequest extends Message<GetGoogleServiceAccountRequest> {
  /**
   * The ID of the Google Cloud Platform Console project that the Google service
   * account is associated with.
   * Required.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  constructor(data?: PartialMessage<GetGoogleServiceAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.storagetransfer.v1.GetGoogleServiceAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGoogleServiceAccountRequest {
    return new GetGoogleServiceAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGoogleServiceAccountRequest {
    return new GetGoogleServiceAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGoogleServiceAccountRequest {
    return new GetGoogleServiceAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGoogleServiceAccountRequest | PlainMessage<GetGoogleServiceAccountRequest> | undefined, b: GetGoogleServiceAccountRequest | PlainMessage<GetGoogleServiceAccountRequest> | undefined): boolean {
    return proto3.util.equals(GetGoogleServiceAccountRequest, a, b);
  }
}

/**
 * Request passed to CreateTransferJob.
 *
 * @generated from message google.storagetransfer.v1.CreateTransferJobRequest
 */
export class CreateTransferJobRequest extends Message<CreateTransferJobRequest> {
  /**
   * The job to create.
   * Required.
   *
   * @generated from field: google.storagetransfer.v1.TransferJob transfer_job = 1;
   */
  transferJob?: TransferJob;

  constructor(data?: PartialMessage<CreateTransferJobRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.storagetransfer.v1.CreateTransferJobRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transfer_job", kind: "message", T: TransferJob },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTransferJobRequest {
    return new CreateTransferJobRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTransferJobRequest {
    return new CreateTransferJobRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTransferJobRequest {
    return new CreateTransferJobRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTransferJobRequest | PlainMessage<CreateTransferJobRequest> | undefined, b: CreateTransferJobRequest | PlainMessage<CreateTransferJobRequest> | undefined): boolean {
    return proto3.util.equals(CreateTransferJobRequest, a, b);
  }
}

/**
 * Request passed to UpdateTransferJob.
 *
 * @generated from message google.storagetransfer.v1.UpdateTransferJobRequest
 */
export class UpdateTransferJobRequest extends Message<UpdateTransferJobRequest> {
  /**
   * The name of job to update.
   * Required.
   *
   * @generated from field: string job_name = 1;
   */
  jobName = "";

  /**
   * The ID of the Google Cloud Platform Console project that owns the job.
   * Required.
   *
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * The job to update.
   * Required.
   *
   * @generated from field: google.storagetransfer.v1.TransferJob transfer_job = 3;
   */
  transferJob?: TransferJob;

  /**
   * The field mask of the fields in `transferJob` that are to be updated in
   * this request.  Fields in `transferJob` that can be updated are:
   * `description`, `transferSpec`, and `status`.  To update the `transferSpec`
   * of the job, a complete transfer specification has to be provided. An
   * incomplete specification which misses any required fields will be rejected
   * with the error `INVALID_ARGUMENT`.
   *
   * @generated from field: google.protobuf.FieldMask update_transfer_job_field_mask = 4;
   */
  updateTransferJobFieldMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateTransferJobRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.storagetransfer.v1.UpdateTransferJobRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "transfer_job", kind: "message", T: TransferJob },
    { no: 4, name: "update_transfer_job_field_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTransferJobRequest {
    return new UpdateTransferJobRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTransferJobRequest {
    return new UpdateTransferJobRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTransferJobRequest {
    return new UpdateTransferJobRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTransferJobRequest | PlainMessage<UpdateTransferJobRequest> | undefined, b: UpdateTransferJobRequest | PlainMessage<UpdateTransferJobRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTransferJobRequest, a, b);
  }
}

/**
 * Request passed to GetTransferJob.
 *
 * @generated from message google.storagetransfer.v1.GetTransferJobRequest
 */
export class GetTransferJobRequest extends Message<GetTransferJobRequest> {
  /**
   * The job to get.
   * Required.
   *
   * @generated from field: string job_name = 1;
   */
  jobName = "";

  /**
   * The ID of the Google Cloud Platform Console project that owns the job.
   * Required.
   *
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  constructor(data?: PartialMessage<GetTransferJobRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.storagetransfer.v1.GetTransferJobRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTransferJobRequest {
    return new GetTransferJobRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTransferJobRequest {
    return new GetTransferJobRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTransferJobRequest {
    return new GetTransferJobRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTransferJobRequest | PlainMessage<GetTransferJobRequest> | undefined, b: GetTransferJobRequest | PlainMessage<GetTransferJobRequest> | undefined): boolean {
    return proto3.util.equals(GetTransferJobRequest, a, b);
  }
}

/**
 * `project_id`, `job_names`, and `job_statuses` are query parameters that can
 * be specified when listing transfer jobs.
 *
 * @generated from message google.storagetransfer.v1.ListTransferJobsRequest
 */
export class ListTransferJobsRequest extends Message<ListTransferJobsRequest> {
  /**
   * A list of query parameters specified as JSON text in the form of
   * {"project_id":"my_project_id",
   * "job_names":["jobid1","jobid2",...],
   * "job_statuses":["status1","status2",...]}.
   * Since `job_names` and `job_statuses` support multiple values, their values
   * must be specified with array notation. `project_id` is required. `job_names`
   * and `job_statuses` are optional.  The valid values for `job_statuses` are
   * case-insensitive: `ENABLED`, `DISABLED`, and `DELETED`.
   *
   * @generated from field: string filter = 1;
   */
  filter = "";

  /**
   * The list page size. The max allowed value is 256.
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize = 0;

  /**
   * The list page token.
   *
   * @generated from field: string page_token = 5;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListTransferJobsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.storagetransfer.v1.ListTransferJobsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTransferJobsRequest {
    return new ListTransferJobsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTransferJobsRequest {
    return new ListTransferJobsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTransferJobsRequest {
    return new ListTransferJobsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTransferJobsRequest | PlainMessage<ListTransferJobsRequest> | undefined, b: ListTransferJobsRequest | PlainMessage<ListTransferJobsRequest> | undefined): boolean {
    return proto3.util.equals(ListTransferJobsRequest, a, b);
  }
}

/**
 * Response from ListTransferJobs.
 *
 * @generated from message google.storagetransfer.v1.ListTransferJobsResponse
 */
export class ListTransferJobsResponse extends Message<ListTransferJobsResponse> {
  /**
   * A list of transfer jobs.
   *
   * @generated from field: repeated google.storagetransfer.v1.TransferJob transfer_jobs = 1;
   */
  transferJobs: TransferJob[] = [];

  /**
   * The list next page token.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListTransferJobsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.storagetransfer.v1.ListTransferJobsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transfer_jobs", kind: "message", T: TransferJob, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTransferJobsResponse {
    return new ListTransferJobsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTransferJobsResponse {
    return new ListTransferJobsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTransferJobsResponse {
    return new ListTransferJobsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTransferJobsResponse | PlainMessage<ListTransferJobsResponse> | undefined, b: ListTransferJobsResponse | PlainMessage<ListTransferJobsResponse> | undefined): boolean {
    return proto3.util.equals(ListTransferJobsResponse, a, b);
  }
}

/**
 * Request passed to PauseTransferOperation.
 *
 * @generated from message google.storagetransfer.v1.PauseTransferOperationRequest
 */
export class PauseTransferOperationRequest extends Message<PauseTransferOperationRequest> {
  /**
   * The name of the transfer operation.
   * Required.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<PauseTransferOperationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.storagetransfer.v1.PauseTransferOperationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PauseTransferOperationRequest {
    return new PauseTransferOperationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PauseTransferOperationRequest {
    return new PauseTransferOperationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PauseTransferOperationRequest {
    return new PauseTransferOperationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PauseTransferOperationRequest | PlainMessage<PauseTransferOperationRequest> | undefined, b: PauseTransferOperationRequest | PlainMessage<PauseTransferOperationRequest> | undefined): boolean {
    return proto3.util.equals(PauseTransferOperationRequest, a, b);
  }
}

/**
 * Request passed to ResumeTransferOperation.
 *
 * @generated from message google.storagetransfer.v1.ResumeTransferOperationRequest
 */
export class ResumeTransferOperationRequest extends Message<ResumeTransferOperationRequest> {
  /**
   * The name of the transfer operation.
   * Required.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<ResumeTransferOperationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.storagetransfer.v1.ResumeTransferOperationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResumeTransferOperationRequest {
    return new ResumeTransferOperationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResumeTransferOperationRequest {
    return new ResumeTransferOperationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResumeTransferOperationRequest {
    return new ResumeTransferOperationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResumeTransferOperationRequest | PlainMessage<ResumeTransferOperationRequest> | undefined, b: ResumeTransferOperationRequest | PlainMessage<ResumeTransferOperationRequest> | undefined): boolean {
    return proto3.util.equals(ResumeTransferOperationRequest, a, b);
  }
}

