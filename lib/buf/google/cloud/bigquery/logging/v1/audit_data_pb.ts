// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/cloud/bigquery/logging/v1/audit_data.proto (package google.cloud.bigquery.logging.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Status } from "../../../../rpc/status_pb.js";

/**
 * BigQuery request and response messages for audit log.
 * Note: `Table.schema` has been deprecated in favor of `Table.schemaJson`.
 * `Table.schema` may continue to be present in your logs during this
 * transition.
 *
 * @generated from message google.cloud.bigquery.logging.v1.AuditData
 */
export class AuditData extends Message<AuditData> {
  /**
   * Request data for each BigQuery method.
   *
   * @generated from oneof google.cloud.bigquery.logging.v1.AuditData.request
   */
  request: {
    /**
     * Table insert request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.TableInsertRequest table_insert_request = 1;
     */
    value: TableInsertRequest;
    case: "tableInsertRequest";
  } | {
    /**
     * Table update request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.TableUpdateRequest table_update_request = 16;
     */
    value: TableUpdateRequest;
    case: "tableUpdateRequest";
  } | {
    /**
     * Dataset list request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.DatasetListRequest dataset_list_request = 2;
     */
    value: DatasetListRequest;
    case: "datasetListRequest";
  } | {
    /**
     * Dataset insert request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.DatasetInsertRequest dataset_insert_request = 3;
     */
    value: DatasetInsertRequest;
    case: "datasetInsertRequest";
  } | {
    /**
     * Dataset update request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.DatasetUpdateRequest dataset_update_request = 4;
     */
    value: DatasetUpdateRequest;
    case: "datasetUpdateRequest";
  } | {
    /**
     * Job insert request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobInsertRequest job_insert_request = 5;
     */
    value: JobInsertRequest;
    case: "jobInsertRequest";
  } | {
    /**
     * Job query request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobQueryRequest job_query_request = 6;
     */
    value: JobQueryRequest;
    case: "jobQueryRequest";
  } | {
    /**
     * Job get query results request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest job_get_query_results_request = 7;
     */
    value: JobGetQueryResultsRequest;
    case: "jobGetQueryResultsRequest";
  } | {
    /**
     * Table data-list request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.TableDataListRequest table_data_list_request = 8;
     */
    value: TableDataListRequest;
    case: "tableDataListRequest";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Response data for each BigQuery method.
   *
   * @generated from oneof google.cloud.bigquery.logging.v1.AuditData.response
   */
  response: {
    /**
     * Table insert response.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.TableInsertResponse table_insert_response = 9;
     */
    value: TableInsertResponse;
    case: "tableInsertResponse";
  } | {
    /**
     * Table update response.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.TableUpdateResponse table_update_response = 10;
     */
    value: TableUpdateResponse;
    case: "tableUpdateResponse";
  } | {
    /**
     * Dataset insert response.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.DatasetInsertResponse dataset_insert_response = 11;
     */
    value: DatasetInsertResponse;
    case: "datasetInsertResponse";
  } | {
    /**
     * Dataset update response.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.DatasetUpdateResponse dataset_update_response = 12;
     */
    value: DatasetUpdateResponse;
    case: "datasetUpdateResponse";
  } | {
    /**
     * Job insert response.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobInsertResponse job_insert_response = 18;
     */
    value: JobInsertResponse;
    case: "jobInsertResponse";
  } | {
    /**
     * Job query response.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobQueryResponse job_query_response = 13;
     */
    value: JobQueryResponse;
    case: "jobQueryResponse";
  } | {
    /**
     * Job get query results response.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse job_get_query_results_response = 14;
     */
    value: JobGetQueryResultsResponse;
    case: "jobGetQueryResultsResponse";
  } | {
    /**
     * Deprecated: Job query-done response. Use this information for usage
     * analysis.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobQueryDoneResponse job_query_done_response = 15;
     */
    value: JobQueryDoneResponse;
    case: "jobQueryDoneResponse";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * A job completion event.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.JobCompletedEvent job_completed_event = 17;
   */
  jobCompletedEvent?: JobCompletedEvent;

  constructor(data?: PartialMessage<AuditData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.AuditData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table_insert_request", kind: "message", T: TableInsertRequest, oneof: "request" },
    { no: 16, name: "table_update_request", kind: "message", T: TableUpdateRequest, oneof: "request" },
    { no: 2, name: "dataset_list_request", kind: "message", T: DatasetListRequest, oneof: "request" },
    { no: 3, name: "dataset_insert_request", kind: "message", T: DatasetInsertRequest, oneof: "request" },
    { no: 4, name: "dataset_update_request", kind: "message", T: DatasetUpdateRequest, oneof: "request" },
    { no: 5, name: "job_insert_request", kind: "message", T: JobInsertRequest, oneof: "request" },
    { no: 6, name: "job_query_request", kind: "message", T: JobQueryRequest, oneof: "request" },
    { no: 7, name: "job_get_query_results_request", kind: "message", T: JobGetQueryResultsRequest, oneof: "request" },
    { no: 8, name: "table_data_list_request", kind: "message", T: TableDataListRequest, oneof: "request" },
    { no: 9, name: "table_insert_response", kind: "message", T: TableInsertResponse, oneof: "response" },
    { no: 10, name: "table_update_response", kind: "message", T: TableUpdateResponse, oneof: "response" },
    { no: 11, name: "dataset_insert_response", kind: "message", T: DatasetInsertResponse, oneof: "response" },
    { no: 12, name: "dataset_update_response", kind: "message", T: DatasetUpdateResponse, oneof: "response" },
    { no: 18, name: "job_insert_response", kind: "message", T: JobInsertResponse, oneof: "response" },
    { no: 13, name: "job_query_response", kind: "message", T: JobQueryResponse, oneof: "response" },
    { no: 14, name: "job_get_query_results_response", kind: "message", T: JobGetQueryResultsResponse, oneof: "response" },
    { no: 15, name: "job_query_done_response", kind: "message", T: JobQueryDoneResponse, oneof: "response" },
    { no: 17, name: "job_completed_event", kind: "message", T: JobCompletedEvent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditData {
    return new AuditData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditData {
    return new AuditData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditData {
    return new AuditData().fromJsonString(jsonString, options);
  }

  static equals(a: AuditData | PlainMessage<AuditData> | undefined, b: AuditData | PlainMessage<AuditData> | undefined): boolean {
    return proto3.util.equals(AuditData, a, b);
  }
}

/**
 * Table insert request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableInsertRequest
 */
export class TableInsertRequest extends Message<TableInsertRequest> {
  /**
   * The new table.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Table resource = 1;
   */
  resource?: Table;

  constructor(data?: PartialMessage<TableInsertRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.TableInsertRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Table },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableInsertRequest {
    return new TableInsertRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableInsertRequest {
    return new TableInsertRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableInsertRequest {
    return new TableInsertRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TableInsertRequest | PlainMessage<TableInsertRequest> | undefined, b: TableInsertRequest | PlainMessage<TableInsertRequest> | undefined): boolean {
    return proto3.util.equals(TableInsertRequest, a, b);
  }
}

/**
 * Table update request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableUpdateRequest
 */
export class TableUpdateRequest extends Message<TableUpdateRequest> {
  /**
   * The table to be updated.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Table resource = 1;
   */
  resource?: Table;

  constructor(data?: PartialMessage<TableUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.TableUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Table },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableUpdateRequest {
    return new TableUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableUpdateRequest {
    return new TableUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableUpdateRequest {
    return new TableUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TableUpdateRequest | PlainMessage<TableUpdateRequest> | undefined, b: TableUpdateRequest | PlainMessage<TableUpdateRequest> | undefined): boolean {
    return proto3.util.equals(TableUpdateRequest, a, b);
  }
}

/**
 * Table insert response.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableInsertResponse
 */
export class TableInsertResponse extends Message<TableInsertResponse> {
  /**
   * Final state of the inserted table.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Table resource = 1;
   */
  resource?: Table;

  constructor(data?: PartialMessage<TableInsertResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.TableInsertResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Table },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableInsertResponse {
    return new TableInsertResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableInsertResponse {
    return new TableInsertResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableInsertResponse {
    return new TableInsertResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TableInsertResponse | PlainMessage<TableInsertResponse> | undefined, b: TableInsertResponse | PlainMessage<TableInsertResponse> | undefined): boolean {
    return proto3.util.equals(TableInsertResponse, a, b);
  }
}

/**
 * Table update response.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableUpdateResponse
 */
export class TableUpdateResponse extends Message<TableUpdateResponse> {
  /**
   * Final state of the updated table.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Table resource = 1;
   */
  resource?: Table;

  constructor(data?: PartialMessage<TableUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.TableUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Table },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableUpdateResponse {
    return new TableUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableUpdateResponse {
    return new TableUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableUpdateResponse {
    return new TableUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TableUpdateResponse | PlainMessage<TableUpdateResponse> | undefined, b: TableUpdateResponse | PlainMessage<TableUpdateResponse> | undefined): boolean {
    return proto3.util.equals(TableUpdateResponse, a, b);
  }
}

/**
 * Dataset list request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.DatasetListRequest
 */
export class DatasetListRequest extends Message<DatasetListRequest> {
  /**
   * Whether to list all datasets, including hidden ones.
   *
   * @generated from field: bool list_all = 1;
   */
  listAll = false;

  constructor(data?: PartialMessage<DatasetListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.DatasetListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list_all", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatasetListRequest {
    return new DatasetListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatasetListRequest {
    return new DatasetListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatasetListRequest {
    return new DatasetListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DatasetListRequest | PlainMessage<DatasetListRequest> | undefined, b: DatasetListRequest | PlainMessage<DatasetListRequest> | undefined): boolean {
    return proto3.util.equals(DatasetListRequest, a, b);
  }
}

/**
 * Dataset insert request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.DatasetInsertRequest
 */
export class DatasetInsertRequest extends Message<DatasetInsertRequest> {
  /**
   * The dataset to be inserted.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Dataset resource = 1;
   */
  resource?: Dataset;

  constructor(data?: PartialMessage<DatasetInsertRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.DatasetInsertRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Dataset },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatasetInsertRequest {
    return new DatasetInsertRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatasetInsertRequest {
    return new DatasetInsertRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatasetInsertRequest {
    return new DatasetInsertRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DatasetInsertRequest | PlainMessage<DatasetInsertRequest> | undefined, b: DatasetInsertRequest | PlainMessage<DatasetInsertRequest> | undefined): boolean {
    return proto3.util.equals(DatasetInsertRequest, a, b);
  }
}

/**
 * Dataset insert response.
 *
 * @generated from message google.cloud.bigquery.logging.v1.DatasetInsertResponse
 */
export class DatasetInsertResponse extends Message<DatasetInsertResponse> {
  /**
   * Final state of the inserted dataset.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Dataset resource = 1;
   */
  resource?: Dataset;

  constructor(data?: PartialMessage<DatasetInsertResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.DatasetInsertResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Dataset },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatasetInsertResponse {
    return new DatasetInsertResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatasetInsertResponse {
    return new DatasetInsertResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatasetInsertResponse {
    return new DatasetInsertResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DatasetInsertResponse | PlainMessage<DatasetInsertResponse> | undefined, b: DatasetInsertResponse | PlainMessage<DatasetInsertResponse> | undefined): boolean {
    return proto3.util.equals(DatasetInsertResponse, a, b);
  }
}

/**
 * Dataset update request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.DatasetUpdateRequest
 */
export class DatasetUpdateRequest extends Message<DatasetUpdateRequest> {
  /**
   * The dataset to be updated.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Dataset resource = 1;
   */
  resource?: Dataset;

  constructor(data?: PartialMessage<DatasetUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.DatasetUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Dataset },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatasetUpdateRequest {
    return new DatasetUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatasetUpdateRequest {
    return new DatasetUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatasetUpdateRequest {
    return new DatasetUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DatasetUpdateRequest | PlainMessage<DatasetUpdateRequest> | undefined, b: DatasetUpdateRequest | PlainMessage<DatasetUpdateRequest> | undefined): boolean {
    return proto3.util.equals(DatasetUpdateRequest, a, b);
  }
}

/**
 * Dataset update response.
 *
 * @generated from message google.cloud.bigquery.logging.v1.DatasetUpdateResponse
 */
export class DatasetUpdateResponse extends Message<DatasetUpdateResponse> {
  /**
   * Final state of the updated dataset.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Dataset resource = 1;
   */
  resource?: Dataset;

  constructor(data?: PartialMessage<DatasetUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.DatasetUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Dataset },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatasetUpdateResponse {
    return new DatasetUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatasetUpdateResponse {
    return new DatasetUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatasetUpdateResponse {
    return new DatasetUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DatasetUpdateResponse | PlainMessage<DatasetUpdateResponse> | undefined, b: DatasetUpdateResponse | PlainMessage<DatasetUpdateResponse> | undefined): boolean {
    return proto3.util.equals(DatasetUpdateResponse, a, b);
  }
}

/**
 * Job insert request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobInsertRequest
 */
export class JobInsertRequest extends Message<JobInsertRequest> {
  /**
   * Job insert request.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Job resource = 1;
   */
  resource?: Job;

  constructor(data?: PartialMessage<JobInsertRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.JobInsertRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Job },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobInsertRequest {
    return new JobInsertRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobInsertRequest {
    return new JobInsertRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobInsertRequest {
    return new JobInsertRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JobInsertRequest | PlainMessage<JobInsertRequest> | undefined, b: JobInsertRequest | PlainMessage<JobInsertRequest> | undefined): boolean {
    return proto3.util.equals(JobInsertRequest, a, b);
  }
}

/**
 * Job insert response.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobInsertResponse
 */
export class JobInsertResponse extends Message<JobInsertResponse> {
  /**
   * Job insert response.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Job resource = 1;
   */
  resource?: Job;

  constructor(data?: PartialMessage<JobInsertResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.JobInsertResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Job },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobInsertResponse {
    return new JobInsertResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobInsertResponse {
    return new JobInsertResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobInsertResponse {
    return new JobInsertResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JobInsertResponse | PlainMessage<JobInsertResponse> | undefined, b: JobInsertResponse | PlainMessage<JobInsertResponse> | undefined): boolean {
    return proto3.util.equals(JobInsertResponse, a, b);
  }
}

/**
 * Job query request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobQueryRequest
 */
export class JobQueryRequest extends Message<JobQueryRequest> {
  /**
   * The query.
   *
   * @generated from field: string query = 1;
   */
  query = "";

  /**
   * The maximum number of results.
   *
   * @generated from field: uint32 max_results = 2;
   */
  maxResults = 0;

  /**
   * The default dataset for tables that do not have a dataset specified.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.DatasetName default_dataset = 3;
   */
  defaultDataset?: DatasetName;

  /**
   * Project that the query should be charged to.
   *
   * @generated from field: string project_id = 4;
   */
  projectId = "";

  /**
   * If true, don't actually run the job. Just check that it would run.
   *
   * @generated from field: bool dry_run = 5;
   */
  dryRun = false;

  constructor(data?: PartialMessage<JobQueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.JobQueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "max_results", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "default_dataset", kind: "message", T: DatasetName },
    { no: 4, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "dry_run", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobQueryRequest {
    return new JobQueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobQueryRequest {
    return new JobQueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobQueryRequest {
    return new JobQueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JobQueryRequest | PlainMessage<JobQueryRequest> | undefined, b: JobQueryRequest | PlainMessage<JobQueryRequest> | undefined): boolean {
    return proto3.util.equals(JobQueryRequest, a, b);
  }
}

/**
 * Job query response.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobQueryResponse
 */
export class JobQueryResponse extends Message<JobQueryResponse> {
  /**
   * The total number of rows in the full query result set.
   *
   * @generated from field: uint64 total_results = 1;
   */
  totalResults = protoInt64.zero;

  /**
   * Information about the queried job.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Job job = 2;
   */
  job?: Job;

  constructor(data?: PartialMessage<JobQueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.JobQueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_results", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "job", kind: "message", T: Job },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobQueryResponse {
    return new JobQueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobQueryResponse {
    return new JobQueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobQueryResponse {
    return new JobQueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JobQueryResponse | PlainMessage<JobQueryResponse> | undefined, b: JobQueryResponse | PlainMessage<JobQueryResponse> | undefined): boolean {
    return proto3.util.equals(JobQueryResponse, a, b);
  }
}

/**
 * Job getQueryResults request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest
 */
export class JobGetQueryResultsRequest extends Message<JobGetQueryResultsRequest> {
  /**
   * Maximum number of results to return.
   *
   * @generated from field: uint32 max_results = 1;
   */
  maxResults = 0;

  /**
   * Zero-based row number at which to start.
   *
   * @generated from field: uint64 start_row = 2;
   */
  startRow = protoInt64.zero;

  constructor(data?: PartialMessage<JobGetQueryResultsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_results", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "start_row", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobGetQueryResultsRequest {
    return new JobGetQueryResultsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobGetQueryResultsRequest {
    return new JobGetQueryResultsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobGetQueryResultsRequest {
    return new JobGetQueryResultsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JobGetQueryResultsRequest | PlainMessage<JobGetQueryResultsRequest> | undefined, b: JobGetQueryResultsRequest | PlainMessage<JobGetQueryResultsRequest> | undefined): boolean {
    return proto3.util.equals(JobGetQueryResultsRequest, a, b);
  }
}

/**
 * Job getQueryResults response.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse
 */
export class JobGetQueryResultsResponse extends Message<JobGetQueryResultsResponse> {
  /**
   * Total number of results in query results.
   *
   * @generated from field: uint64 total_results = 1;
   */
  totalResults = protoInt64.zero;

  /**
   * The job that was created to run the query.
   * It completed if `job.status.state` is `DONE`.
   * It failed if `job.status.errorResult` is also present.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Job job = 2;
   */
  job?: Job;

  constructor(data?: PartialMessage<JobGetQueryResultsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_results", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "job", kind: "message", T: Job },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobGetQueryResultsResponse {
    return new JobGetQueryResultsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobGetQueryResultsResponse {
    return new JobGetQueryResultsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobGetQueryResultsResponse {
    return new JobGetQueryResultsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JobGetQueryResultsResponse | PlainMessage<JobGetQueryResultsResponse> | undefined, b: JobGetQueryResultsResponse | PlainMessage<JobGetQueryResultsResponse> | undefined): boolean {
    return proto3.util.equals(JobGetQueryResultsResponse, a, b);
  }
}

/**
 * Job getQueryDone response.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobQueryDoneResponse
 */
export class JobQueryDoneResponse extends Message<JobQueryDoneResponse> {
  /**
   * The job and status information.
   * The job completed if `job.status.state` is `DONE`.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Job job = 1;
   */
  job?: Job;

  constructor(data?: PartialMessage<JobQueryDoneResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.JobQueryDoneResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job", kind: "message", T: Job },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobQueryDoneResponse {
    return new JobQueryDoneResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobQueryDoneResponse {
    return new JobQueryDoneResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobQueryDoneResponse {
    return new JobQueryDoneResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JobQueryDoneResponse | PlainMessage<JobQueryDoneResponse> | undefined, b: JobQueryDoneResponse | PlainMessage<JobQueryDoneResponse> | undefined): boolean {
    return proto3.util.equals(JobQueryDoneResponse, a, b);
  }
}

/**
 * Query job completed event.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobCompletedEvent
 */
export class JobCompletedEvent extends Message<JobCompletedEvent> {
  /**
   * Name of the event.
   *
   * @generated from field: string event_name = 1;
   */
  eventName = "";

  /**
   * Job information.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Job job = 2;
   */
  job?: Job;

  constructor(data?: PartialMessage<JobCompletedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.JobCompletedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "job", kind: "message", T: Job },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobCompletedEvent {
    return new JobCompletedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobCompletedEvent {
    return new JobCompletedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobCompletedEvent {
    return new JobCompletedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: JobCompletedEvent | PlainMessage<JobCompletedEvent> | undefined, b: JobCompletedEvent | PlainMessage<JobCompletedEvent> | undefined): boolean {
    return proto3.util.equals(JobCompletedEvent, a, b);
  }
}

/**
 * Table data-list request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableDataListRequest
 */
export class TableDataListRequest extends Message<TableDataListRequest> {
  /**
   * Starting row offset.
   *
   * @generated from field: uint64 start_row = 1;
   */
  startRow = protoInt64.zero;

  /**
   * Maximum number of results to return.
   *
   * @generated from field: uint32 max_results = 2;
   */
  maxResults = 0;

  constructor(data?: PartialMessage<TableDataListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.TableDataListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_row", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "max_results", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableDataListRequest {
    return new TableDataListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableDataListRequest {
    return new TableDataListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableDataListRequest {
    return new TableDataListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TableDataListRequest | PlainMessage<TableDataListRequest> | undefined, b: TableDataListRequest | PlainMessage<TableDataListRequest> | undefined): boolean {
    return proto3.util.equals(TableDataListRequest, a, b);
  }
}

/**
 * Describes a BigQuery table.
 * See the [Table](/bigquery/docs/reference/v2/tables) API resource
 * for more details on individual fields.
 * Note: `Table.schema` has been deprecated in favor of `Table.schemaJson`.
 * `Table.schema` may continue to be present in your logs during this
 * transition.
 *
 * @generated from message google.cloud.bigquery.logging.v1.Table
 */
export class Table extends Message<Table> {
  /**
   * The name of the table.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableName table_name = 1;
   */
  tableName?: TableName;

  /**
   * User-provided metadata for the table.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableInfo info = 2;
   */
  info?: TableInfo;

  /**
   * A JSON representation of the table's schema.
   *
   * @generated from field: string schema_json = 8;
   */
  schemaJson = "";

  /**
   * If present, this is a virtual table defined by a SQL query.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableViewDefinition view = 4;
   */
  view?: TableViewDefinition;

  /**
   * The expiration date for the table, after which the table
   * is deleted and the storage reclaimed.
   * If not present, the table persists indefinitely.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 5;
   */
  expireTime?: Timestamp;

  /**
   * The time the table was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 6;
   */
  createTime?: Timestamp;

  /**
   * The time the table was last truncated
   * by an operation with a `writeDisposition` of `WRITE_TRUNCATE`.
   *
   * @generated from field: google.protobuf.Timestamp truncate_time = 7;
   */
  truncateTime?: Timestamp;

  constructor(data?: PartialMessage<Table>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.Table";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table_name", kind: "message", T: TableName },
    { no: 2, name: "info", kind: "message", T: TableInfo },
    { no: 8, name: "schema_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "view", kind: "message", T: TableViewDefinition },
    { no: 5, name: "expire_time", kind: "message", T: Timestamp },
    { no: 6, name: "create_time", kind: "message", T: Timestamp },
    { no: 7, name: "truncate_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Table {
    return new Table().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Table {
    return new Table().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Table {
    return new Table().fromJsonString(jsonString, options);
  }

  static equals(a: Table | PlainMessage<Table> | undefined, b: Table | PlainMessage<Table> | undefined): boolean {
    return proto3.util.equals(Table, a, b);
  }
}

/**
 * User-provided metadata for a table.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableInfo
 */
export class TableInfo extends Message<TableInfo> {
  /**
   * A short name for the table, such as`"Analytics Data - Jan 2011"`.
   *
   * @generated from field: string friendly_name = 1;
   */
  friendlyName = "";

  /**
   * A long description, perhaps several paragraphs,
   * describing the table contents in detail.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  constructor(data?: PartialMessage<TableInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.TableInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "friendly_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableInfo {
    return new TableInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableInfo {
    return new TableInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableInfo {
    return new TableInfo().fromJsonString(jsonString, options);
  }

  static equals(a: TableInfo | PlainMessage<TableInfo> | undefined, b: TableInfo | PlainMessage<TableInfo> | undefined): boolean {
    return proto3.util.equals(TableInfo, a, b);
  }
}

/**
 * Describes a virtual table defined by a SQL query.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableViewDefinition
 */
export class TableViewDefinition extends Message<TableViewDefinition> {
  /**
   * SQL query defining the view.
   *
   * @generated from field: string query = 1;
   */
  query = "";

  constructor(data?: PartialMessage<TableViewDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.TableViewDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableViewDefinition {
    return new TableViewDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableViewDefinition {
    return new TableViewDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableViewDefinition {
    return new TableViewDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: TableViewDefinition | PlainMessage<TableViewDefinition> | undefined, b: TableViewDefinition | PlainMessage<TableViewDefinition> | undefined): boolean {
    return proto3.util.equals(TableViewDefinition, a, b);
  }
}

/**
 * BigQuery dataset information.
 * See the [Dataset](/bigquery/docs/reference/v2/datasets) API resource
 * for more details on individual fields.
 *
 * @generated from message google.cloud.bigquery.logging.v1.Dataset
 */
export class Dataset extends Message<Dataset> {
  /**
   * The name of the dataset.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.DatasetName dataset_name = 1;
   */
  datasetName?: DatasetName;

  /**
   * User-provided metadata for the dataset.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.DatasetInfo info = 2;
   */
  info?: DatasetInfo;

  /**
   * The time the dataset was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 4;
   */
  createTime?: Timestamp;

  /**
   * The time the dataset was last modified.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 5;
   */
  updateTime?: Timestamp;

  /**
   * The access control list for the dataset.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.BigQueryAcl acl = 6;
   */
  acl?: BigQueryAcl;

  /**
   * If this field is present, each table that does not specify an
   * expiration time is assigned an expiration time by adding this
   * duration to the table's `createTime`.  If this field is empty,
   * there is no default table expiration time.
   *
   * @generated from field: google.protobuf.Duration default_table_expire_duration = 8;
   */
  defaultTableExpireDuration?: Duration;

  constructor(data?: PartialMessage<Dataset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.Dataset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dataset_name", kind: "message", T: DatasetName },
    { no: 2, name: "info", kind: "message", T: DatasetInfo },
    { no: 4, name: "create_time", kind: "message", T: Timestamp },
    { no: 5, name: "update_time", kind: "message", T: Timestamp },
    { no: 6, name: "acl", kind: "message", T: BigQueryAcl },
    { no: 8, name: "default_table_expire_duration", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Dataset {
    return new Dataset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Dataset {
    return new Dataset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Dataset {
    return new Dataset().fromJsonString(jsonString, options);
  }

  static equals(a: Dataset | PlainMessage<Dataset> | undefined, b: Dataset | PlainMessage<Dataset> | undefined): boolean {
    return proto3.util.equals(Dataset, a, b);
  }
}

/**
 * User-provided metadata for a dataset.
 *
 * @generated from message google.cloud.bigquery.logging.v1.DatasetInfo
 */
export class DatasetInfo extends Message<DatasetInfo> {
  /**
   * A short name for the dataset, such as`"Analytics Data 2011"`.
   *
   * @generated from field: string friendly_name = 1;
   */
  friendlyName = "";

  /**
   * A long description, perhaps several paragraphs,
   * describing the dataset contents in detail.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  constructor(data?: PartialMessage<DatasetInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.DatasetInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "friendly_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatasetInfo {
    return new DatasetInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatasetInfo {
    return new DatasetInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatasetInfo {
    return new DatasetInfo().fromJsonString(jsonString, options);
  }

  static equals(a: DatasetInfo | PlainMessage<DatasetInfo> | undefined, b: DatasetInfo | PlainMessage<DatasetInfo> | undefined): boolean {
    return proto3.util.equals(DatasetInfo, a, b);
  }
}

/**
 * An access control list.
 *
 * @generated from message google.cloud.bigquery.logging.v1.BigQueryAcl
 */
export class BigQueryAcl extends Message<BigQueryAcl> {
  /**
   * Access control entry list.
   *
   * @generated from field: repeated google.cloud.bigquery.logging.v1.BigQueryAcl.Entry entries = 1;
   */
  entries: BigQueryAcl_Entry[] = [];

  constructor(data?: PartialMessage<BigQueryAcl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.BigQueryAcl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: BigQueryAcl_Entry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryAcl {
    return new BigQueryAcl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryAcl {
    return new BigQueryAcl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryAcl {
    return new BigQueryAcl().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryAcl | PlainMessage<BigQueryAcl> | undefined, b: BigQueryAcl | PlainMessage<BigQueryAcl> | undefined): boolean {
    return proto3.util.equals(BigQueryAcl, a, b);
  }
}

/**
 * Access control entry.
 *
 * @generated from message google.cloud.bigquery.logging.v1.BigQueryAcl.Entry
 */
export class BigQueryAcl_Entry extends Message<BigQueryAcl_Entry> {
  /**
   * The granted role, which can be `READER`, `WRITER`, or `OWNER`.
   *
   * @generated from field: string role = 1;
   */
  role = "";

  /**
   * Grants access to a group identified by an email address.
   *
   * @generated from field: string group_email = 2;
   */
  groupEmail = "";

  /**
   * Grants access to a user identified by an email address.
   *
   * @generated from field: string user_email = 3;
   */
  userEmail = "";

  /**
   * Grants access to all members of a domain.
   *
   * @generated from field: string domain = 4;
   */
  domain = "";

  /**
   * Grants access to special groups. Valid groups are `PROJECT_OWNERS`,
   * `PROJECT_READERS`, `PROJECT_WRITERS` and `ALL_AUTHENTICATED_USERS`.
   *
   * @generated from field: string special_group = 5;
   */
  specialGroup = "";

  /**
   * Grants access to a BigQuery View.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableName view_name = 6;
   */
  viewName?: TableName;

  constructor(data?: PartialMessage<BigQueryAcl_Entry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "special_group", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "view_name", kind: "message", T: TableName },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryAcl_Entry {
    return new BigQueryAcl_Entry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryAcl_Entry {
    return new BigQueryAcl_Entry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryAcl_Entry {
    return new BigQueryAcl_Entry().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryAcl_Entry | PlainMessage<BigQueryAcl_Entry> | undefined, b: BigQueryAcl_Entry | PlainMessage<BigQueryAcl_Entry> | undefined): boolean {
    return proto3.util.equals(BigQueryAcl_Entry, a, b);
  }
}

/**
 * Describes a job.
 *
 * @generated from message google.cloud.bigquery.logging.v1.Job
 */
export class Job extends Message<Job> {
  /**
   * Job name.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.JobName job_name = 1;
   */
  jobName?: JobName;

  /**
   * Job configuration.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.JobConfiguration job_configuration = 2;
   */
  jobConfiguration?: JobConfiguration;

  /**
   * Job status.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.JobStatus job_status = 3;
   */
  jobStatus?: JobStatus;

  /**
   * Job statistics.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.JobStatistics job_statistics = 4;
   */
  jobStatistics?: JobStatistics;

  constructor(data?: PartialMessage<Job>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.Job";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job_name", kind: "message", T: JobName },
    { no: 2, name: "job_configuration", kind: "message", T: JobConfiguration },
    { no: 3, name: "job_status", kind: "message", T: JobStatus },
    { no: 4, name: "job_statistics", kind: "message", T: JobStatistics },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Job {
    return new Job().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Job {
    return new Job().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Job {
    return new Job().fromJsonString(jsonString, options);
  }

  static equals(a: Job | PlainMessage<Job> | undefined, b: Job | PlainMessage<Job> | undefined): boolean {
    return proto3.util.equals(Job, a, b);
  }
}

/**
 * Job configuration information.
 * See the [Jobs](/bigquery/docs/reference/v2/jobs) API resource
 * for more details on individual fields.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobConfiguration
 */
export class JobConfiguration extends Message<JobConfiguration> {
  /**
   * Job configuration information.
   *
   * @generated from oneof google.cloud.bigquery.logging.v1.JobConfiguration.configuration
   */
  configuration: {
    /**
     * Query job information.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobConfiguration.Query query = 5;
     */
    value: JobConfiguration_Query;
    case: "query";
  } | {
    /**
     * Load job information.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobConfiguration.Load load = 6;
     */
    value: JobConfiguration_Load;
    case: "load";
  } | {
    /**
     * Extract job information.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobConfiguration.Extract extract = 7;
     */
    value: JobConfiguration_Extract;
    case: "extract";
  } | {
    /**
     * TableCopy job information.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy table_copy = 8;
     */
    value: JobConfiguration_TableCopy;
    case: "tableCopy";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * If true, don't actually run the job. Just check that it would run.
   *
   * @generated from field: bool dry_run = 9;
   */
  dryRun = false;

  constructor(data?: PartialMessage<JobConfiguration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.JobConfiguration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "query", kind: "message", T: JobConfiguration_Query, oneof: "configuration" },
    { no: 6, name: "load", kind: "message", T: JobConfiguration_Load, oneof: "configuration" },
    { no: 7, name: "extract", kind: "message", T: JobConfiguration_Extract, oneof: "configuration" },
    { no: 8, name: "table_copy", kind: "message", T: JobConfiguration_TableCopy, oneof: "configuration" },
    { no: 9, name: "dry_run", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobConfiguration {
    return new JobConfiguration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobConfiguration {
    return new JobConfiguration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobConfiguration {
    return new JobConfiguration().fromJsonString(jsonString, options);
  }

  static equals(a: JobConfiguration | PlainMessage<JobConfiguration> | undefined, b: JobConfiguration | PlainMessage<JobConfiguration> | undefined): boolean {
    return proto3.util.equals(JobConfiguration, a, b);
  }
}

/**
 * Describes a query job, which executes a SQL-like query.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobConfiguration.Query
 */
export class JobConfiguration_Query extends Message<JobConfiguration_Query> {
  /**
   * The SQL query to run.
   *
   * @generated from field: string query = 1;
   */
  query = "";

  /**
   * The table where results are written.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableName destination_table = 2;
   */
  destinationTable?: TableName;

  /**
   * Describes when a job is allowed to create a table:
   * `CREATE_IF_NEEDED`, `CREATE_NEVER`.
   *
   * @generated from field: string create_disposition = 3;
   */
  createDisposition = "";

  /**
   * Describes how writes affect existing tables:
   * `WRITE_TRUNCATE`, `WRITE_APPEND`, `WRITE_EMPTY`.
   *
   * @generated from field: string write_disposition = 4;
   */
  writeDisposition = "";

  /**
   * If a table name is specified without a dataset in a query,
   * this dataset will be added to table name.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.DatasetName default_dataset = 5;
   */
  defaultDataset?: DatasetName;

  /**
   * Describes data sources outside BigQuery, if needed.
   *
   * @generated from field: repeated google.cloud.bigquery.logging.v1.TableDefinition table_definitions = 6;
   */
  tableDefinitions: TableDefinition[] = [];

  constructor(data?: PartialMessage<JobConfiguration_Query>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.JobConfiguration.Query";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "destination_table", kind: "message", T: TableName },
    { no: 3, name: "create_disposition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "write_disposition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "default_dataset", kind: "message", T: DatasetName },
    { no: 6, name: "table_definitions", kind: "message", T: TableDefinition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobConfiguration_Query {
    return new JobConfiguration_Query().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobConfiguration_Query {
    return new JobConfiguration_Query().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobConfiguration_Query {
    return new JobConfiguration_Query().fromJsonString(jsonString, options);
  }

  static equals(a: JobConfiguration_Query | PlainMessage<JobConfiguration_Query> | undefined, b: JobConfiguration_Query | PlainMessage<JobConfiguration_Query> | undefined): boolean {
    return proto3.util.equals(JobConfiguration_Query, a, b);
  }
}

/**
 * Describes a load job, which loads data from an external source via
 * the  import pipeline.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobConfiguration.Load
 */
export class JobConfiguration_Load extends Message<JobConfiguration_Load> {
  /**
   * URIs for the data to be imported. Only Google Cloud Storage URIs are
   * supported.
   *
   * @generated from field: repeated string source_uris = 1;
   */
  sourceUris: string[] = [];

  /**
   * The table schema in JSON format representation of a TableSchema.
   *
   * @generated from field: string schema_json = 6;
   */
  schemaJson = "";

  /**
   * The table where the imported data is written.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableName destination_table = 3;
   */
  destinationTable?: TableName;

  /**
   * Describes when a job is allowed to create a table:
   * `CREATE_IF_NEEDED`, `CREATE_NEVER`.
   *
   * @generated from field: string create_disposition = 4;
   */
  createDisposition = "";

  /**
   * Describes how writes affect existing tables:
   * `WRITE_TRUNCATE`, `WRITE_APPEND`, `WRITE_EMPTY`.
   *
   * @generated from field: string write_disposition = 5;
   */
  writeDisposition = "";

  constructor(data?: PartialMessage<JobConfiguration_Load>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.JobConfiguration.Load";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "schema_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "destination_table", kind: "message", T: TableName },
    { no: 4, name: "create_disposition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "write_disposition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobConfiguration_Load {
    return new JobConfiguration_Load().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobConfiguration_Load {
    return new JobConfiguration_Load().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobConfiguration_Load {
    return new JobConfiguration_Load().fromJsonString(jsonString, options);
  }

  static equals(a: JobConfiguration_Load | PlainMessage<JobConfiguration_Load> | undefined, b: JobConfiguration_Load | PlainMessage<JobConfiguration_Load> | undefined): boolean {
    return proto3.util.equals(JobConfiguration_Load, a, b);
  }
}

/**
 * Describes an extract job, which exports data to an external source
 * via the  export pipeline.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobConfiguration.Extract
 */
export class JobConfiguration_Extract extends Message<JobConfiguration_Extract> {
  /**
   * Google Cloud Storage URIs where extracted data should be written.
   *
   * @generated from field: repeated string destination_uris = 1;
   */
  destinationUris: string[] = [];

  /**
   * The source table.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableName source_table = 2;
   */
  sourceTable?: TableName;

  constructor(data?: PartialMessage<JobConfiguration_Extract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.JobConfiguration.Extract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "destination_uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "source_table", kind: "message", T: TableName },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobConfiguration_Extract {
    return new JobConfiguration_Extract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobConfiguration_Extract {
    return new JobConfiguration_Extract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobConfiguration_Extract {
    return new JobConfiguration_Extract().fromJsonString(jsonString, options);
  }

  static equals(a: JobConfiguration_Extract | PlainMessage<JobConfiguration_Extract> | undefined, b: JobConfiguration_Extract | PlainMessage<JobConfiguration_Extract> | undefined): boolean {
    return proto3.util.equals(JobConfiguration_Extract, a, b);
  }
}

/**
 * Describes a copy job, which copies an existing table to another table.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy
 */
export class JobConfiguration_TableCopy extends Message<JobConfiguration_TableCopy> {
  /**
   * Source tables.
   *
   * @generated from field: repeated google.cloud.bigquery.logging.v1.TableName source_tables = 1;
   */
  sourceTables: TableName[] = [];

  /**
   * Destination table.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableName destination_table = 2;
   */
  destinationTable?: TableName;

  /**
   * Describes when a job is allowed to create a table:
   * `CREATE_IF_NEEDED`, `CREATE_NEVER`.
   *
   * @generated from field: string create_disposition = 3;
   */
  createDisposition = "";

  /**
   * Describes how writes affect existing tables:
   * `WRITE_TRUNCATE`, `WRITE_APPEND`, `WRITE_EMPTY`.
   *
   * @generated from field: string write_disposition = 4;
   */
  writeDisposition = "";

  constructor(data?: PartialMessage<JobConfiguration_TableCopy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_tables", kind: "message", T: TableName, repeated: true },
    { no: 2, name: "destination_table", kind: "message", T: TableName },
    { no: 3, name: "create_disposition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "write_disposition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobConfiguration_TableCopy {
    return new JobConfiguration_TableCopy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobConfiguration_TableCopy {
    return new JobConfiguration_TableCopy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobConfiguration_TableCopy {
    return new JobConfiguration_TableCopy().fromJsonString(jsonString, options);
  }

  static equals(a: JobConfiguration_TableCopy | PlainMessage<JobConfiguration_TableCopy> | undefined, b: JobConfiguration_TableCopy | PlainMessage<JobConfiguration_TableCopy> | undefined): boolean {
    return proto3.util.equals(JobConfiguration_TableCopy, a, b);
  }
}

/**
 * Describes an external data source used in a query.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableDefinition
 */
export class TableDefinition extends Message<TableDefinition> {
  /**
   * Name of the table, used in queries.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Google Cloud Storage URIs for the data to be imported.
   *
   * @generated from field: repeated string source_uris = 2;
   */
  sourceUris: string[] = [];

  constructor(data?: PartialMessage<TableDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.TableDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableDefinition {
    return new TableDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableDefinition {
    return new TableDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableDefinition {
    return new TableDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: TableDefinition | PlainMessage<TableDefinition> | undefined, b: TableDefinition | PlainMessage<TableDefinition> | undefined): boolean {
    return proto3.util.equals(TableDefinition, a, b);
  }
}

/**
 * Running state of a job.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobStatus
 */
export class JobStatus extends Message<JobStatus> {
  /**
   * State of a job: `PENDING`, `RUNNING`, or `DONE`.
   *
   * @generated from field: string state = 1;
   */
  state = "";

  /**
   * If the job did not complete successfully, this field describes why.
   *
   * @generated from field: google.rpc.Status error = 2;
   */
  error?: Status;

  constructor(data?: PartialMessage<JobStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.JobStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "error", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobStatus {
    return new JobStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobStatus {
    return new JobStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobStatus {
    return new JobStatus().fromJsonString(jsonString, options);
  }

  static equals(a: JobStatus | PlainMessage<JobStatus> | undefined, b: JobStatus | PlainMessage<JobStatus> | undefined): boolean {
    return proto3.util.equals(JobStatus, a, b);
  }
}

/**
 * Job statistics that may change after a job starts.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobStatistics
 */
export class JobStatistics extends Message<JobStatistics> {
  /**
   * Time when the job was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * Time when the job started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * Time when the job ended.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;

  /**
   * Total bytes processed for a job.
   *
   * @generated from field: int64 total_processed_bytes = 4;
   */
  totalProcessedBytes = protoInt64.zero;

  /**
   * Processed bytes, adjusted by the job's CPU usage.
   *
   * @generated from field: int64 total_billed_bytes = 5;
   */
  totalBilledBytes = protoInt64.zero;

  /**
   * The tier assigned by CPU-based billing.
   *
   * @generated from field: int32 billing_tier = 7;
   */
  billingTier = 0;

  constructor(data?: PartialMessage<JobStatistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.JobStatistics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "create_time", kind: "message", T: Timestamp },
    { no: 2, name: "start_time", kind: "message", T: Timestamp },
    { no: 3, name: "end_time", kind: "message", T: Timestamp },
    { no: 4, name: "total_processed_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "total_billed_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "billing_tier", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobStatistics {
    return new JobStatistics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobStatistics {
    return new JobStatistics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobStatistics {
    return new JobStatistics().fromJsonString(jsonString, options);
  }

  static equals(a: JobStatistics | PlainMessage<JobStatistics> | undefined, b: JobStatistics | PlainMessage<JobStatistics> | undefined): boolean {
    return proto3.util.equals(JobStatistics, a, b);
  }
}

/**
 * The fully-qualified name for a dataset.
 *
 * @generated from message google.cloud.bigquery.logging.v1.DatasetName
 */
export class DatasetName extends Message<DatasetName> {
  /**
   * The project ID.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * The dataset ID within the project.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  constructor(data?: PartialMessage<DatasetName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.DatasetName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatasetName {
    return new DatasetName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatasetName {
    return new DatasetName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatasetName {
    return new DatasetName().fromJsonString(jsonString, options);
  }

  static equals(a: DatasetName | PlainMessage<DatasetName> | undefined, b: DatasetName | PlainMessage<DatasetName> | undefined): boolean {
    return proto3.util.equals(DatasetName, a, b);
  }
}

/**
 * The fully-qualified name for a table.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableName
 */
export class TableName extends Message<TableName> {
  /**
   * The project ID.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * The dataset ID within the project.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * The table ID of the table within the dataset.
   *
   * @generated from field: string table_id = 3;
   */
  tableId = "";

  constructor(data?: PartialMessage<TableName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.TableName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "table_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableName {
    return new TableName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableName {
    return new TableName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableName {
    return new TableName().fromJsonString(jsonString, options);
  }

  static equals(a: TableName | PlainMessage<TableName> | undefined, b: TableName | PlainMessage<TableName> | undefined): boolean {
    return proto3.util.equals(TableName, a, b);
  }
}

/**
 * The fully-qualified name for a job.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobName
 */
export class JobName extends Message<JobName> {
  /**
   * The project ID.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * The job ID within the project.
   *
   * @generated from field: string job_id = 2;
   */
  jobId = "";

  constructor(data?: PartialMessage<JobName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.bigquery.logging.v1.JobName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobName {
    return new JobName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobName {
    return new JobName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobName {
    return new JobName().fromJsonString(jsonString, options);
  }

  static equals(a: JobName | PlainMessage<JobName> | undefined, b: JobName | PlainMessage<JobName> | undefined): boolean {
    return proto3.util.equals(JobName, a, b);
  }
}

