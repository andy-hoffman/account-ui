// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/cloud/vision/v1/geometry.proto (package google.cloud.vision.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * A vertex represents a 2D point in the image.
 * NOTE: the vertex coordinates are in the same scale as the original image.
 *
 * @generated from message google.cloud.vision.v1.Vertex
 */
export class Vertex extends Message<Vertex> {
  /**
   * X coordinate.
   *
   * @generated from field: int32 x = 1;
   */
  x = 0;

  /**
   * Y coordinate.
   *
   * @generated from field: int32 y = 2;
   */
  y = 0;

  constructor(data?: PartialMessage<Vertex>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.vision.v1.Vertex";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "y", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Vertex {
    return new Vertex().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Vertex {
    return new Vertex().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Vertex {
    return new Vertex().fromJsonString(jsonString, options);
  }

  static equals(a: Vertex | PlainMessage<Vertex> | undefined, b: Vertex | PlainMessage<Vertex> | undefined): boolean {
    return proto3.util.equals(Vertex, a, b);
  }
}

/**
 * A bounding polygon for the detected image annotation.
 *
 * @generated from message google.cloud.vision.v1.BoundingPoly
 */
export class BoundingPoly extends Message<BoundingPoly> {
  /**
   * The bounding polygon vertices.
   *
   * @generated from field: repeated google.cloud.vision.v1.Vertex vertices = 1;
   */
  vertices: Vertex[] = [];

  constructor(data?: PartialMessage<BoundingPoly>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.vision.v1.BoundingPoly";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vertices", kind: "message", T: Vertex, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BoundingPoly {
    return new BoundingPoly().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BoundingPoly {
    return new BoundingPoly().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BoundingPoly {
    return new BoundingPoly().fromJsonString(jsonString, options);
  }

  static equals(a: BoundingPoly | PlainMessage<BoundingPoly> | undefined, b: BoundingPoly | PlainMessage<BoundingPoly> | undefined): boolean {
    return proto3.util.equals(BoundingPoly, a, b);
  }
}

/**
 * A 3D position in the image, used primarily for Face detection landmarks.
 * A valid Position must have both x and y coordinates.
 * The position coordinates are in the same scale as the original image.
 *
 * @generated from message google.cloud.vision.v1.Position
 */
export class Position extends Message<Position> {
  /**
   * X coordinate.
   *
   * @generated from field: float x = 1;
   */
  x = 0;

  /**
   * Y coordinate.
   *
   * @generated from field: float y = 2;
   */
  y = 0;

  /**
   * Z coordinate (or depth).
   *
   * @generated from field: float z = 3;
   */
  z = 0;

  constructor(data?: PartialMessage<Position>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.vision.v1.Position";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "y", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "z", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Position {
    return new Position().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Position {
    return new Position().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Position {
    return new Position().fromJsonString(jsonString, options);
  }

  static equals(a: Position | PlainMessage<Position> | undefined, b: Position | PlainMessage<Position> | undefined): boolean {
    return proto3.util.equals(Position, a, b);
  }
}

