// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/cloud/oslogin/common.proto (package google.cloud.oslogin.common, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * The POSIX account information associated with a Google account.
 *
 * @generated from message google.cloud.oslogin.common.PosixAccount
 */
export class PosixAccount extends Message<PosixAccount> {
  /**
   * Only one POSIX account can be marked as primary.
   *
   * @generated from field: bool primary = 1;
   */
  primary = false;

  /**
   * The username of the POSIX account.
   *
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * The user ID.
   *
   * @generated from field: int64 uid = 3;
   */
  uid = protoInt64.zero;

  /**
   * The default group ID.
   *
   * @generated from field: int64 gid = 4;
   */
  gid = protoInt64.zero;

  /**
   * The path to the home directory for this account.
   *
   * @generated from field: string home_directory = 5;
   */
  homeDirectory = "";

  /**
   * The path to the logic shell for this account.
   *
   * @generated from field: string shell = 6;
   */
  shell = "";

  /**
   * The GECOS (user information) entry for this account.
   *
   * @generated from field: string gecos = 7;
   */
  gecos = "";

  /**
   * System identifier for which account the username or uid applies to.
   * By default, the empty value is used.
   *
   * @generated from field: string system_id = 8;
   */
  systemId = "";

  /**
   * Output only. A POSIX account identifier.
   *
   * @generated from field: string account_id = 9;
   */
  accountId = "";

  constructor(data?: PartialMessage<PosixAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.oslogin.common.PosixAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "primary", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "uid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "gid", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "home_directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "shell", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "gecos", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "system_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PosixAccount {
    return new PosixAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PosixAccount {
    return new PosixAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PosixAccount {
    return new PosixAccount().fromJsonString(jsonString, options);
  }

  static equals(a: PosixAccount | PlainMessage<PosixAccount> | undefined, b: PosixAccount | PlainMessage<PosixAccount> | undefined): boolean {
    return proto3.util.equals(PosixAccount, a, b);
  }
}

/**
 * The SSH public key information associated with a Google account.
 *
 * @generated from message google.cloud.oslogin.common.SshPublicKey
 */
export class SshPublicKey extends Message<SshPublicKey> {
  /**
   * Public key text in SSH format, defined by
   * <a href="https://www.ietf.org/rfc/rfc4253.txt" target="_blank">RFC4253</a>
   * section 6.6.
   *
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * An expiration time in microseconds since epoch.
   *
   * @generated from field: int64 expiration_time_usec = 2;
   */
  expirationTimeUsec = protoInt64.zero;

  /**
   * Output only. The SHA-256 fingerprint of the SSH public key.
   *
   * @generated from field: string fingerprint = 3;
   */
  fingerprint = "";

  constructor(data?: PartialMessage<SshPublicKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.oslogin.common.SshPublicKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expiration_time_usec", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "fingerprint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SshPublicKey {
    return new SshPublicKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SshPublicKey {
    return new SshPublicKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SshPublicKey {
    return new SshPublicKey().fromJsonString(jsonString, options);
  }

  static equals(a: SshPublicKey | PlainMessage<SshPublicKey> | undefined, b: SshPublicKey | PlainMessage<SshPublicKey> | undefined): boolean {
    return proto3.util.equals(SshPublicKey, a, b);
  }
}

