// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/cloud/functions/v1beta2/functions.proto (package google.cloud.functions.v1beta2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Describes the current stage of a deployment.
 *
 * @generated from enum google.cloud.functions.v1beta2.CloudFunctionStatus
 */
export enum CloudFunctionStatus {
  /**
   * Status not specified.
   *
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  STATUS_UNSPECIFIED = 0,

  /**
   * Successfully deployed.
   *
   * @generated from enum value: READY = 1;
   */
  READY = 1,

  /**
   * Not deployed correctly - behavior is undefined. The item should be updated
   * or deleted to move it out of this state.
   *
   * @generated from enum value: FAILED = 2;
   */
  FAILED = 2,

  /**
   * Creation or update in progress.
   *
   * @generated from enum value: DEPLOYING = 3;
   */
  DEPLOYING = 3,

  /**
   * Deletion in progress.
   *
   * @generated from enum value: DELETING = 4;
   */
  DELETING = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(CloudFunctionStatus)
proto3.util.setEnumType(CloudFunctionStatus, "google.cloud.functions.v1beta2.CloudFunctionStatus", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "READY" },
  { no: 2, name: "FAILED" },
  { no: 3, name: "DEPLOYING" },
  { no: 4, name: "DELETING" },
]);

/**
 * Describes a Cloud Function that contains user computation executed in
 * response to an event. It encapsulate function and triggers configurations.
 *
 * @generated from message google.cloud.functions.v1beta2.CloudFunction
 */
export class CloudFunction extends Message<CloudFunction> {
  /**
   * A user-defined name of the function. Function names must be unique
   * globally and match pattern `projects/*\/locations/*\/functions/*`
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The location of the function source code.
   *
   * @generated from oneof google.cloud.functions.v1beta2.CloudFunction.source_code
   */
  sourceCode: {
    /**
     * The URL, starting with gs://, pointing to the zip archive which contains
     * the function.
     *
     * @generated from field: string source_archive_url = 14;
     */
    value: string;
    case: "sourceArchiveUrl";
  } | {
    /**
     * The hosted repository where the function is defined.
     *
     * @generated from field: google.cloud.functions.v1beta2.SourceRepository source_repository = 3;
     */
    value: SourceRepository;
    case: "sourceRepository";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * An event that triggers the function.
   *
   * @generated from oneof google.cloud.functions.v1beta2.CloudFunction.trigger
   */
  trigger: {
    /**
     * An HTTPS endpoint type of source that can be triggered via URL.
     *
     * @generated from field: google.cloud.functions.v1beta2.HTTPSTrigger https_trigger = 6;
     */
    value: HTTPSTrigger;
    case: "httpsTrigger";
  } | {
    /**
     * A source that fires events in response to a condition in another service.
     *
     * @generated from field: google.cloud.functions.v1beta2.EventTrigger event_trigger = 12;
     */
    value: EventTrigger;
    case: "eventTrigger";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Output only. Status of the function deployment.
   *
   * @generated from field: google.cloud.functions.v1beta2.CloudFunctionStatus status = 7;
   */
  status = CloudFunctionStatus.STATUS_UNSPECIFIED;

  /**
   * Output only. Name of the most recent operation modifying the function. If
   * the function status is `DEPLOYING` or `DELETING`, then it points to the
   * active operation.
   *
   * @generated from field: string latest_operation = 8;
   */
  latestOperation = "";

  /**
   * The name of the function (as defined in source code) that will be
   * executed. Defaults to the resource name suffix, if not specified. For
   * backward compatibility, if function with given name is not found, then the
   * system will try to use function named "function".
   * For Node.js this is name of a function exported by the module specified
   * in `source_location`.
   *
   * @generated from field: string entry_point = 9;
   */
  entryPoint = "";

  /**
   * The function execution timeout. Execution is considered failed and
   * can be terminated if the function is not completed at the end of the
   * timeout period. Defaults to 60 seconds.
   *
   * @generated from field: google.protobuf.Duration timeout = 10;
   */
  timeout?: Duration;

  /**
   * The amount of memory in MB available for a function.
   * Defaults to 256MB.
   *
   * @generated from field: int32 available_memory_mb = 11;
   */
  availableMemoryMb = 0;

  /**
   * Output only. The service account of the function.
   *
   * @generated from field: string service_account = 13;
   */
  serviceAccount = "";

  /**
   * Output only. The last update timestamp of a Cloud Function.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 15;
   */
  updateTime?: Timestamp;

  constructor(data?: PartialMessage<CloudFunction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.functions.v1beta2.CloudFunction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "source_archive_url", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "source_code" },
    { no: 3, name: "source_repository", kind: "message", T: SourceRepository, oneof: "source_code" },
    { no: 6, name: "https_trigger", kind: "message", T: HTTPSTrigger, oneof: "trigger" },
    { no: 12, name: "event_trigger", kind: "message", T: EventTrigger, oneof: "trigger" },
    { no: 7, name: "status", kind: "enum", T: proto3.getEnumType(CloudFunctionStatus) },
    { no: 8, name: "latest_operation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "entry_point", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "timeout", kind: "message", T: Duration },
    { no: 11, name: "available_memory_mb", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "service_account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "update_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloudFunction {
    return new CloudFunction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloudFunction {
    return new CloudFunction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloudFunction {
    return new CloudFunction().fromJsonString(jsonString, options);
  }

  static equals(a: CloudFunction | PlainMessage<CloudFunction> | undefined, b: CloudFunction | PlainMessage<CloudFunction> | undefined): boolean {
    return proto3.util.equals(CloudFunction, a, b);
  }
}

/**
 * Describes HTTPSTrigger, could be used to connect web hooks to function.
 *
 * @generated from message google.cloud.functions.v1beta2.HTTPSTrigger
 */
export class HTTPSTrigger extends Message<HTTPSTrigger> {
  /**
   * Output only. The deployed url for the function.
   *
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<HTTPSTrigger>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.functions.v1beta2.HTTPSTrigger";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HTTPSTrigger {
    return new HTTPSTrigger().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HTTPSTrigger {
    return new HTTPSTrigger().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HTTPSTrigger {
    return new HTTPSTrigger().fromJsonString(jsonString, options);
  }

  static equals(a: HTTPSTrigger | PlainMessage<HTTPSTrigger> | undefined, b: HTTPSTrigger | PlainMessage<HTTPSTrigger> | undefined): boolean {
    return proto3.util.equals(HTTPSTrigger, a, b);
  }
}

/**
 * Describes EventTrigger, used to request events be sent from another
 * service.
 *
 * @generated from message google.cloud.functions.v1beta2.EventTrigger
 */
export class EventTrigger extends Message<EventTrigger> {
  /**
   * `event_type` names contain the service that is sending an event and the
   * kind of event that was fired. Must be of the form
   * `providers/*\/eventTypes/*` e.g. Directly handle a Message published to
   * Google Cloud Pub/Sub `providers/cloud.pubsub/eventTypes/topic.publish`
   *
   *      Handle an object changing in Google Cloud Storage
   *      `providers/cloud.storage/eventTypes/object.change`
   *
   *      Handle a write to the Firebase Realtime Database
   *      `providers/firebase.database/eventTypes/data.write`
   *
   * @generated from field: string event_type = 1;
   */
  eventType = "";

  /**
   * Which instance of the source's service should send events. E.g. for Pub/Sub
   * this would be a Pub/Sub topic at `projects/*\/topics/*`. For Google Cloud
   * Storage this would be a bucket at `projects/*\/buckets/*`. For any source
   * that only supports one instance per-project, this should be the name of the
   * project (`projects/*`)
   *
   * @generated from field: string resource = 2;
   */
  resource = "";

  constructor(data?: PartialMessage<EventTrigger>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.functions.v1beta2.EventTrigger";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventTrigger {
    return new EventTrigger().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventTrigger {
    return new EventTrigger().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventTrigger {
    return new EventTrigger().fromJsonString(jsonString, options);
  }

  static equals(a: EventTrigger | PlainMessage<EventTrigger> | undefined, b: EventTrigger | PlainMessage<EventTrigger> | undefined): boolean {
    return proto3.util.equals(EventTrigger, a, b);
  }
}

/**
 * Describes the location of the function source in a remote repository.
 *
 * @generated from message google.cloud.functions.v1beta2.SourceRepository
 */
export class SourceRepository extends Message<SourceRepository> {
  /**
   * URL to the hosted repository where the function is defined. Only paths in
   * https://source.developers.google.com domain are supported. The path should
   * contain the name of the repository.
   *
   * @generated from field: string repository_url = 1;
   */
  repositoryUrl = "";

  /**
   * The path within the repository where the function is defined. The path
   * should point to the directory where Cloud Functions files are located. Use
   * "/" if the function is defined directly in the root directory of a
   * repository.
   *
   * @generated from field: string source_path = 2;
   */
  sourcePath = "";

  /**
   * The version of a function. Defaults to the latest version of the master
   * branch.
   *
   * @generated from oneof google.cloud.functions.v1beta2.SourceRepository.version
   */
  version: {
    /**
     * The name of the branch from which the function should be fetched.
     *
     * @generated from field: string branch = 3;
     */
    value: string;
    case: "branch";
  } | {
    /**
     * The name of the tag that captures the state of the repository from
     * which the function should be fetched.
     *
     * @generated from field: string tag = 4;
     */
    value: string;
    case: "tag";
  } | {
    /**
     * The id of the revision that captures the state of the repository from
     * which the function should be fetched.
     *
     * @generated from field: string revision = 5;
     */
    value: string;
    case: "revision";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Output only. The id of the revision that was resolved at the moment of
   * function creation or update. For example when a user deployed from a
   * branch, it will be the revision id of the latest change on this branch at
   * that time. If user deployed from revision then this value will be always
   * equal to the revision specified by the user.
   *
   * @generated from field: string deployed_revision = 6;
   */
  deployedRevision = "";

  constructor(data?: PartialMessage<SourceRepository>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.functions.v1beta2.SourceRepository";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repository_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "version" },
    { no: 4, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "version" },
    { no: 5, name: "revision", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "version" },
    { no: 6, name: "deployed_revision", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SourceRepository {
    return new SourceRepository().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SourceRepository {
    return new SourceRepository().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SourceRepository {
    return new SourceRepository().fromJsonString(jsonString, options);
  }

  static equals(a: SourceRepository | PlainMessage<SourceRepository> | undefined, b: SourceRepository | PlainMessage<SourceRepository> | undefined): boolean {
    return proto3.util.equals(SourceRepository, a, b);
  }
}

/**
 * Request for the `CreateFunction` method.
 *
 * @generated from message google.cloud.functions.v1beta2.CreateFunctionRequest
 */
export class CreateFunctionRequest extends Message<CreateFunctionRequest> {
  /**
   * The project and location in which the function should be created, specified
   * in the format `projects/*\/locations/*`
   *
   * @generated from field: string location = 1;
   */
  location = "";

  /**
   * Function to be created.
   *
   * @generated from field: google.cloud.functions.v1beta2.CloudFunction function = 2;
   */
  function?: CloudFunction;

  constructor(data?: PartialMessage<CreateFunctionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.functions.v1beta2.CreateFunctionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "function", kind: "message", T: CloudFunction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFunctionRequest {
    return new CreateFunctionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFunctionRequest {
    return new CreateFunctionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFunctionRequest {
    return new CreateFunctionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFunctionRequest | PlainMessage<CreateFunctionRequest> | undefined, b: CreateFunctionRequest | PlainMessage<CreateFunctionRequest> | undefined): boolean {
    return proto3.util.equals(CreateFunctionRequest, a, b);
  }
}

/**
 * Request for the `UpdateFunction` method.
 *
 * @generated from message google.cloud.functions.v1beta2.UpdateFunctionRequest
 */
export class UpdateFunctionRequest extends Message<UpdateFunctionRequest> {
  /**
   * The name of the function to be updated.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * New version of the function.
   *
   * @generated from field: google.cloud.functions.v1beta2.CloudFunction function = 2;
   */
  function?: CloudFunction;

  constructor(data?: PartialMessage<UpdateFunctionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.functions.v1beta2.UpdateFunctionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "function", kind: "message", T: CloudFunction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateFunctionRequest {
    return new UpdateFunctionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateFunctionRequest {
    return new UpdateFunctionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateFunctionRequest {
    return new UpdateFunctionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateFunctionRequest | PlainMessage<UpdateFunctionRequest> | undefined, b: UpdateFunctionRequest | PlainMessage<UpdateFunctionRequest> | undefined): boolean {
    return proto3.util.equals(UpdateFunctionRequest, a, b);
  }
}

/**
 * Request for the `GetFunction` method.
 *
 * @generated from message google.cloud.functions.v1beta2.GetFunctionRequest
 */
export class GetFunctionRequest extends Message<GetFunctionRequest> {
  /**
   * The name of the function which details should be obtained.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetFunctionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.functions.v1beta2.GetFunctionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFunctionRequest {
    return new GetFunctionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFunctionRequest {
    return new GetFunctionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFunctionRequest {
    return new GetFunctionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFunctionRequest | PlainMessage<GetFunctionRequest> | undefined, b: GetFunctionRequest | PlainMessage<GetFunctionRequest> | undefined): boolean {
    return proto3.util.equals(GetFunctionRequest, a, b);
  }
}

/**
 * Request for the `ListFunctions` method.
 *
 * @generated from message google.cloud.functions.v1beta2.ListFunctionsRequest
 */
export class ListFunctionsRequest extends Message<ListFunctionsRequest> {
  /**
   * The project and location from which the function should be listed,
   * specified in the format `projects/*\/locations/*`
   * If you want to list functions in all locations, use "-" in place of a
   * location.
   *
   * @generated from field: string location = 1;
   */
  location = "";

  /**
   * Maximum number of functions to return per call.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * The value returned by the last
   * `ListFunctionsResponse`; indicates that
   * this is a continuation of a prior `ListFunctions` call, and that the
   * system should return the next page of data.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListFunctionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.functions.v1beta2.ListFunctionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFunctionsRequest {
    return new ListFunctionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFunctionsRequest {
    return new ListFunctionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFunctionsRequest {
    return new ListFunctionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFunctionsRequest | PlainMessage<ListFunctionsRequest> | undefined, b: ListFunctionsRequest | PlainMessage<ListFunctionsRequest> | undefined): boolean {
    return proto3.util.equals(ListFunctionsRequest, a, b);
  }
}

/**
 * Response for the `ListFunctions` method.
 *
 * @generated from message google.cloud.functions.v1beta2.ListFunctionsResponse
 */
export class ListFunctionsResponse extends Message<ListFunctionsResponse> {
  /**
   * The functions that match the request.
   *
   * @generated from field: repeated google.cloud.functions.v1beta2.CloudFunction functions = 1;
   */
  functions: CloudFunction[] = [];

  /**
   * If not empty, indicates that there may be more functions that match
   * the request; this value should be passed in a new
   * [google.cloud.functions.v1beta2.ListFunctionsRequest][]
   * to get more functions.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListFunctionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.functions.v1beta2.ListFunctionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "functions", kind: "message", T: CloudFunction, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFunctionsResponse {
    return new ListFunctionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFunctionsResponse {
    return new ListFunctionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFunctionsResponse {
    return new ListFunctionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFunctionsResponse | PlainMessage<ListFunctionsResponse> | undefined, b: ListFunctionsResponse | PlainMessage<ListFunctionsResponse> | undefined): boolean {
    return proto3.util.equals(ListFunctionsResponse, a, b);
  }
}

/**
 * Request for the `DeleteFunction` method.
 *
 * @generated from message google.cloud.functions.v1beta2.DeleteFunctionRequest
 */
export class DeleteFunctionRequest extends Message<DeleteFunctionRequest> {
  /**
   * The name of the function which should be deleted.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteFunctionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.functions.v1beta2.DeleteFunctionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFunctionRequest {
    return new DeleteFunctionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFunctionRequest {
    return new DeleteFunctionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFunctionRequest {
    return new DeleteFunctionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFunctionRequest | PlainMessage<DeleteFunctionRequest> | undefined, b: DeleteFunctionRequest | PlainMessage<DeleteFunctionRequest> | undefined): boolean {
    return proto3.util.equals(DeleteFunctionRequest, a, b);
  }
}

/**
 * Request for the `CallFunction` method.
 *
 * @generated from message google.cloud.functions.v1beta2.CallFunctionRequest
 */
export class CallFunctionRequest extends Message<CallFunctionRequest> {
  /**
   * The name of the function to be called.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Input to be passed to the function.
   *
   * @generated from field: string data = 2;
   */
  data = "";

  constructor(data?: PartialMessage<CallFunctionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.functions.v1beta2.CallFunctionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallFunctionRequest {
    return new CallFunctionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallFunctionRequest {
    return new CallFunctionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallFunctionRequest {
    return new CallFunctionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CallFunctionRequest | PlainMessage<CallFunctionRequest> | undefined, b: CallFunctionRequest | PlainMessage<CallFunctionRequest> | undefined): boolean {
    return proto3.util.equals(CallFunctionRequest, a, b);
  }
}

/**
 * Response of `CallFunction` method.
 *
 * @generated from message google.cloud.functions.v1beta2.CallFunctionResponse
 */
export class CallFunctionResponse extends Message<CallFunctionResponse> {
  /**
   * Execution id of function invocation.
   *
   * @generated from field: string execution_id = 1;
   */
  executionId = "";

  /**
   * Result populated for successful execution of synchronous function. Will
   * not be populated if function does not return a result through context.
   *
   * @generated from field: string result = 2;
   */
  result = "";

  /**
   * Either system or user-function generated error. Set if execution
   * was not successful.
   *
   * @generated from field: string error = 3;
   */
  error = "";

  constructor(data?: PartialMessage<CallFunctionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.functions.v1beta2.CallFunctionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "result", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallFunctionResponse {
    return new CallFunctionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallFunctionResponse {
    return new CallFunctionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallFunctionResponse {
    return new CallFunctionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CallFunctionResponse | PlainMessage<CallFunctionResponse> | undefined, b: CallFunctionResponse | PlainMessage<CallFunctionResponse> | undefined): boolean {
    return proto3.util.equals(CallFunctionResponse, a, b);
  }
}

