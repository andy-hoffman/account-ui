// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/cloud/videointelligence/v1beta1/video_intelligence.proto (package google.cloud.videointelligence.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Status } from "../../../rpc/status_pb.js";

/**
 * Video annotation feature.
 *
 * @generated from enum google.cloud.videointelligence.v1beta1.Feature
 */
export enum Feature {
  /**
   * Unspecified.
   *
   * @generated from enum value: FEATURE_UNSPECIFIED = 0;
   */
  FEATURE_UNSPECIFIED = 0,

  /**
   * Label detection. Detect objects, such as dog or flower.
   *
   * @generated from enum value: LABEL_DETECTION = 1;
   */
  LABEL_DETECTION = 1,

  /**
   * Human face detection and tracking.
   *
   * @generated from enum value: FACE_DETECTION = 2;
   */
  FACE_DETECTION = 2,

  /**
   * Shot change detection.
   *
   * @generated from enum value: SHOT_CHANGE_DETECTION = 3;
   */
  SHOT_CHANGE_DETECTION = 3,

  /**
   * Safe search detection.
   *
   * @generated from enum value: SAFE_SEARCH_DETECTION = 4;
   */
  SAFE_SEARCH_DETECTION = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Feature)
proto3.util.setEnumType(Feature, "google.cloud.videointelligence.v1beta1.Feature", [
  { no: 0, name: "FEATURE_UNSPECIFIED" },
  { no: 1, name: "LABEL_DETECTION" },
  { no: 2, name: "FACE_DETECTION" },
  { no: 3, name: "SHOT_CHANGE_DETECTION" },
  { no: 4, name: "SAFE_SEARCH_DETECTION" },
]);

/**
 * Label level (scope).
 *
 * @generated from enum google.cloud.videointelligence.v1beta1.LabelLevel
 */
export enum LabelLevel {
  /**
   * Unspecified.
   *
   * @generated from enum value: LABEL_LEVEL_UNSPECIFIED = 0;
   */
  LABEL_LEVEL_UNSPECIFIED = 0,

  /**
   * Video-level. Corresponds to the whole video.
   *
   * @generated from enum value: VIDEO_LEVEL = 1;
   */
  VIDEO_LEVEL = 1,

  /**
   * Segment-level. Corresponds to one of `AnnotateSpec.segments`.
   *
   * @generated from enum value: SEGMENT_LEVEL = 2;
   */
  SEGMENT_LEVEL = 2,

  /**
   * Shot-level. Corresponds to a single shot (i.e. a series of frames
   * without a major camera position or background change).
   *
   * @generated from enum value: SHOT_LEVEL = 3;
   */
  SHOT_LEVEL = 3,

  /**
   * Frame-level. Corresponds to a single video frame.
   *
   * @generated from enum value: FRAME_LEVEL = 4;
   */
  FRAME_LEVEL = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(LabelLevel)
proto3.util.setEnumType(LabelLevel, "google.cloud.videointelligence.v1beta1.LabelLevel", [
  { no: 0, name: "LABEL_LEVEL_UNSPECIFIED" },
  { no: 1, name: "VIDEO_LEVEL" },
  { no: 2, name: "SEGMENT_LEVEL" },
  { no: 3, name: "SHOT_LEVEL" },
  { no: 4, name: "FRAME_LEVEL" },
]);

/**
 * Label detection mode.
 *
 * @generated from enum google.cloud.videointelligence.v1beta1.LabelDetectionMode
 */
export enum LabelDetectionMode {
  /**
   * Unspecified.
   *
   * @generated from enum value: LABEL_DETECTION_MODE_UNSPECIFIED = 0;
   */
  LABEL_DETECTION_MODE_UNSPECIFIED = 0,

  /**
   * Detect shot-level labels.
   *
   * @generated from enum value: SHOT_MODE = 1;
   */
  SHOT_MODE = 1,

  /**
   * Detect frame-level labels.
   *
   * @generated from enum value: FRAME_MODE = 2;
   */
  FRAME_MODE = 2,

  /**
   * Detect both shot-level and frame-level labels.
   *
   * @generated from enum value: SHOT_AND_FRAME_MODE = 3;
   */
  SHOT_AND_FRAME_MODE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(LabelDetectionMode)
proto3.util.setEnumType(LabelDetectionMode, "google.cloud.videointelligence.v1beta1.LabelDetectionMode", [
  { no: 0, name: "LABEL_DETECTION_MODE_UNSPECIFIED" },
  { no: 1, name: "SHOT_MODE" },
  { no: 2, name: "FRAME_MODE" },
  { no: 3, name: "SHOT_AND_FRAME_MODE" },
]);

/**
 * Bucketized representation of likelihood.
 *
 * @generated from enum google.cloud.videointelligence.v1beta1.Likelihood
 */
export enum Likelihood {
  /**
   * Unknown likelihood.
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Very unlikely.
   *
   * @generated from enum value: VERY_UNLIKELY = 1;
   */
  VERY_UNLIKELY = 1,

  /**
   * Unlikely.
   *
   * @generated from enum value: UNLIKELY = 2;
   */
  UNLIKELY = 2,

  /**
   * Possible.
   *
   * @generated from enum value: POSSIBLE = 3;
   */
  POSSIBLE = 3,

  /**
   * Likely.
   *
   * @generated from enum value: LIKELY = 4;
   */
  LIKELY = 4,

  /**
   * Very likely.
   *
   * @generated from enum value: VERY_LIKELY = 5;
   */
  VERY_LIKELY = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(Likelihood)
proto3.util.setEnumType(Likelihood, "google.cloud.videointelligence.v1beta1.Likelihood", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "VERY_UNLIKELY" },
  { no: 2, name: "UNLIKELY" },
  { no: 3, name: "POSSIBLE" },
  { no: 4, name: "LIKELY" },
  { no: 5, name: "VERY_LIKELY" },
]);

/**
 * Video annotation request.
 *
 * @generated from message google.cloud.videointelligence.v1beta1.AnnotateVideoRequest
 */
export class AnnotateVideoRequest extends Message<AnnotateVideoRequest> {
  /**
   * Input video location. Currently, only
   * [Google Cloud Storage](https://cloud.google.com/storage/) URIs are
   * supported, which must be specified in the following format:
   * `gs://bucket-id/object-id` (other URI formats return
   * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]). For more information, see
   * [Request URIs](/storage/docs/reference-uris).
   * A video URI may include wildcards in `object-id`, and thus identify
   * multiple videos. Supported wildcards: '*' to match 0 or more characters;
   * '?' to match 1 character. If unset, the input video should be embedded
   * in the request as `input_content`. If set, `input_content` should be unset.
   *
   * @generated from field: string input_uri = 1;
   */
  inputUri = "";

  /**
   * The video data bytes. Encoding: base64. If unset, the input video(s)
   * should be specified via `input_uri`. If set, `input_uri` should be unset.
   *
   * @generated from field: string input_content = 6;
   */
  inputContent = "";

  /**
   * Requested video annotation features.
   *
   * @generated from field: repeated google.cloud.videointelligence.v1beta1.Feature features = 2;
   */
  features: Feature[] = [];

  /**
   * Additional video context and/or feature-specific parameters.
   *
   * @generated from field: google.cloud.videointelligence.v1beta1.VideoContext video_context = 3;
   */
  videoContext?: VideoContext;

  /**
   * Optional location where the output (in JSON format) should be stored.
   * Currently, only [Google Cloud Storage](https://cloud.google.com/storage/)
   * URIs are supported, which must be specified in the following format:
   * `gs://bucket-id/object-id` (other URI formats return
   * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]). For more information, see
   * [Request URIs](/storage/docs/reference-uris).
   *
   * @generated from field: string output_uri = 4;
   */
  outputUri = "";

  /**
   * Optional cloud region where annotation should take place. Supported cloud
   * regions: `us-east1`, `us-west1`, `europe-west1`, `asia-east1`. If no region
   * is specified, a region will be determined based on video file location.
   *
   * @generated from field: string location_id = 5;
   */
  locationId = "";

  constructor(data?: PartialMessage<AnnotateVideoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.videointelligence.v1beta1.AnnotateVideoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "input_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "input_content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "features", kind: "enum", T: proto3.getEnumType(Feature), repeated: true },
    { no: 3, name: "video_context", kind: "message", T: VideoContext },
    { no: 4, name: "output_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "location_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnnotateVideoRequest {
    return new AnnotateVideoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnnotateVideoRequest {
    return new AnnotateVideoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnnotateVideoRequest {
    return new AnnotateVideoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AnnotateVideoRequest | PlainMessage<AnnotateVideoRequest> | undefined, b: AnnotateVideoRequest | PlainMessage<AnnotateVideoRequest> | undefined): boolean {
    return proto3.util.equals(AnnotateVideoRequest, a, b);
  }
}

/**
 * Video context and/or feature-specific parameters.
 *
 * @generated from message google.cloud.videointelligence.v1beta1.VideoContext
 */
export class VideoContext extends Message<VideoContext> {
  /**
   * Video segments to annotate. The segments may overlap and are not required
   * to be contiguous or span the whole video. If unspecified, each video
   * is treated as a single segment.
   *
   * @generated from field: repeated google.cloud.videointelligence.v1beta1.VideoSegment segments = 1;
   */
  segments: VideoSegment[] = [];

  /**
   * If label detection has been requested, what labels should be detected
   * in addition to video-level labels or segment-level labels. If unspecified,
   * defaults to `SHOT_MODE`.
   *
   * @generated from field: google.cloud.videointelligence.v1beta1.LabelDetectionMode label_detection_mode = 2;
   */
  labelDetectionMode = LabelDetectionMode.LABEL_DETECTION_MODE_UNSPECIFIED;

  /**
   * Whether the video has been shot from a stationary (i.e. non-moving) camera.
   * When set to true, might improve detection accuracy for moving objects.
   *
   * @generated from field: bool stationary_camera = 3;
   */
  stationaryCamera = false;

  /**
   * Model to use for label detection.
   * Supported values: "latest" and "stable" (the default).
   *
   * @generated from field: string label_detection_model = 4;
   */
  labelDetectionModel = "";

  /**
   * Model to use for face detection.
   * Supported values: "latest" and "stable" (the default).
   *
   * @generated from field: string face_detection_model = 5;
   */
  faceDetectionModel = "";

  /**
   * Model to use for shot change detection.
   * Supported values: "latest" and "stable" (the default).
   *
   * @generated from field: string shot_change_detection_model = 6;
   */
  shotChangeDetectionModel = "";

  /**
   * Model to use for safe search detection.
   * Supported values: "latest" and "stable" (the default).
   *
   * @generated from field: string safe_search_detection_model = 7;
   */
  safeSearchDetectionModel = "";

  constructor(data?: PartialMessage<VideoContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.videointelligence.v1beta1.VideoContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "segments", kind: "message", T: VideoSegment, repeated: true },
    { no: 2, name: "label_detection_mode", kind: "enum", T: proto3.getEnumType(LabelDetectionMode) },
    { no: 3, name: "stationary_camera", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "label_detection_model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "face_detection_model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "shot_change_detection_model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "safe_search_detection_model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoContext {
    return new VideoContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoContext {
    return new VideoContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoContext {
    return new VideoContext().fromJsonString(jsonString, options);
  }

  static equals(a: VideoContext | PlainMessage<VideoContext> | undefined, b: VideoContext | PlainMessage<VideoContext> | undefined): boolean {
    return proto3.util.equals(VideoContext, a, b);
  }
}

/**
 * Video segment.
 *
 * @generated from message google.cloud.videointelligence.v1beta1.VideoSegment
 */
export class VideoSegment extends Message<VideoSegment> {
  /**
   * Start offset in microseconds (inclusive). Unset means 0.
   *
   * @generated from field: int64 start_time_offset = 1;
   */
  startTimeOffset = protoInt64.zero;

  /**
   * End offset in microseconds (inclusive). Unset means 0.
   *
   * @generated from field: int64 end_time_offset = 2;
   */
  endTimeOffset = protoInt64.zero;

  constructor(data?: PartialMessage<VideoSegment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.videointelligence.v1beta1.VideoSegment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_time_offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "end_time_offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoSegment {
    return new VideoSegment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoSegment {
    return new VideoSegment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoSegment {
    return new VideoSegment().fromJsonString(jsonString, options);
  }

  static equals(a: VideoSegment | PlainMessage<VideoSegment> | undefined, b: VideoSegment | PlainMessage<VideoSegment> | undefined): boolean {
    return proto3.util.equals(VideoSegment, a, b);
  }
}

/**
 * Label location.
 *
 * @generated from message google.cloud.videointelligence.v1beta1.LabelLocation
 */
export class LabelLocation extends Message<LabelLocation> {
  /**
   * Video segment. Set to [-1, -1] for video-level labels.
   * Set to [timestamp, timestamp] for frame-level labels.
   * Otherwise, corresponds to one of `AnnotateSpec.segments`
   * (if specified) or to shot boundaries (if requested).
   *
   * @generated from field: google.cloud.videointelligence.v1beta1.VideoSegment segment = 1;
   */
  segment?: VideoSegment;

  /**
   * Confidence that the label is accurate. Range: [0, 1].
   *
   * @generated from field: float confidence = 2;
   */
  confidence = 0;

  /**
   * Label level.
   *
   * @generated from field: google.cloud.videointelligence.v1beta1.LabelLevel level = 3;
   */
  level = LabelLevel.LABEL_LEVEL_UNSPECIFIED;

  constructor(data?: PartialMessage<LabelLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.videointelligence.v1beta1.LabelLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "segment", kind: "message", T: VideoSegment },
    { no: 2, name: "confidence", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "level", kind: "enum", T: proto3.getEnumType(LabelLevel) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LabelLocation {
    return new LabelLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LabelLocation {
    return new LabelLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LabelLocation {
    return new LabelLocation().fromJsonString(jsonString, options);
  }

  static equals(a: LabelLocation | PlainMessage<LabelLocation> | undefined, b: LabelLocation | PlainMessage<LabelLocation> | undefined): boolean {
    return proto3.util.equals(LabelLocation, a, b);
  }
}

/**
 * Label annotation.
 *
 * @generated from message google.cloud.videointelligence.v1beta1.LabelAnnotation
 */
export class LabelAnnotation extends Message<LabelAnnotation> {
  /**
   * Textual description, e.g. `Fixed-gear bicycle`.
   *
   * @generated from field: string description = 1;
   */
  description = "";

  /**
   * Language code for `description` in BCP-47 format.
   *
   * @generated from field: string language_code = 2;
   */
  languageCode = "";

  /**
   * Where the label was detected and with what confidence.
   *
   * @generated from field: repeated google.cloud.videointelligence.v1beta1.LabelLocation locations = 3;
   */
  locations: LabelLocation[] = [];

  constructor(data?: PartialMessage<LabelAnnotation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.videointelligence.v1beta1.LabelAnnotation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "language_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "locations", kind: "message", T: LabelLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LabelAnnotation {
    return new LabelAnnotation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LabelAnnotation {
    return new LabelAnnotation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LabelAnnotation {
    return new LabelAnnotation().fromJsonString(jsonString, options);
  }

  static equals(a: LabelAnnotation | PlainMessage<LabelAnnotation> | undefined, b: LabelAnnotation | PlainMessage<LabelAnnotation> | undefined): boolean {
    return proto3.util.equals(LabelAnnotation, a, b);
  }
}

/**
 * Safe search annotation (based on per-frame visual signals only).
 * If no unsafe content has been detected in a frame, no annotations
 * are present for that frame. If only some types of unsafe content
 * have been detected in a frame, the likelihood is set to `UNKNOWN`
 * for all other types of unsafe content.
 *
 * @generated from message google.cloud.videointelligence.v1beta1.SafeSearchAnnotation
 */
export class SafeSearchAnnotation extends Message<SafeSearchAnnotation> {
  /**
   * Likelihood of adult content.
   *
   * @generated from field: google.cloud.videointelligence.v1beta1.Likelihood adult = 1;
   */
  adult = Likelihood.UNKNOWN;

  /**
   * Likelihood that an obvious modification was made to the original
   * version to make it appear funny or offensive.
   *
   * @generated from field: google.cloud.videointelligence.v1beta1.Likelihood spoof = 2;
   */
  spoof = Likelihood.UNKNOWN;

  /**
   * Likelihood of medical content.
   *
   * @generated from field: google.cloud.videointelligence.v1beta1.Likelihood medical = 3;
   */
  medical = Likelihood.UNKNOWN;

  /**
   * Likelihood of violent content.
   *
   * @generated from field: google.cloud.videointelligence.v1beta1.Likelihood violent = 4;
   */
  violent = Likelihood.UNKNOWN;

  /**
   * Likelihood of racy content.
   *
   * @generated from field: google.cloud.videointelligence.v1beta1.Likelihood racy = 5;
   */
  racy = Likelihood.UNKNOWN;

  /**
   * Video time offset in microseconds.
   *
   * @generated from field: int64 time_offset = 6;
   */
  timeOffset = protoInt64.zero;

  constructor(data?: PartialMessage<SafeSearchAnnotation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.videointelligence.v1beta1.SafeSearchAnnotation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "adult", kind: "enum", T: proto3.getEnumType(Likelihood) },
    { no: 2, name: "spoof", kind: "enum", T: proto3.getEnumType(Likelihood) },
    { no: 3, name: "medical", kind: "enum", T: proto3.getEnumType(Likelihood) },
    { no: 4, name: "violent", kind: "enum", T: proto3.getEnumType(Likelihood) },
    { no: 5, name: "racy", kind: "enum", T: proto3.getEnumType(Likelihood) },
    { no: 6, name: "time_offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SafeSearchAnnotation {
    return new SafeSearchAnnotation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SafeSearchAnnotation {
    return new SafeSearchAnnotation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SafeSearchAnnotation {
    return new SafeSearchAnnotation().fromJsonString(jsonString, options);
  }

  static equals(a: SafeSearchAnnotation | PlainMessage<SafeSearchAnnotation> | undefined, b: SafeSearchAnnotation | PlainMessage<SafeSearchAnnotation> | undefined): boolean {
    return proto3.util.equals(SafeSearchAnnotation, a, b);
  }
}

/**
 * Bounding box.
 *
 * @generated from message google.cloud.videointelligence.v1beta1.BoundingBox
 */
export class BoundingBox extends Message<BoundingBox> {
  /**
   * Left X coordinate.
   *
   * @generated from field: int32 left = 1;
   */
  left = 0;

  /**
   * Right X coordinate.
   *
   * @generated from field: int32 right = 2;
   */
  right = 0;

  /**
   * Bottom Y coordinate.
   *
   * @generated from field: int32 bottom = 3;
   */
  bottom = 0;

  /**
   * Top Y coordinate.
   *
   * @generated from field: int32 top = 4;
   */
  top = 0;

  constructor(data?: PartialMessage<BoundingBox>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.videointelligence.v1beta1.BoundingBox";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "left", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "right", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "bottom", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "top", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BoundingBox {
    return new BoundingBox().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BoundingBox {
    return new BoundingBox().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BoundingBox {
    return new BoundingBox().fromJsonString(jsonString, options);
  }

  static equals(a: BoundingBox | PlainMessage<BoundingBox> | undefined, b: BoundingBox | PlainMessage<BoundingBox> | undefined): boolean {
    return proto3.util.equals(BoundingBox, a, b);
  }
}

/**
 * Face location.
 *
 * @generated from message google.cloud.videointelligence.v1beta1.FaceLocation
 */
export class FaceLocation extends Message<FaceLocation> {
  /**
   * Bounding box in a frame.
   *
   * @generated from field: google.cloud.videointelligence.v1beta1.BoundingBox bounding_box = 1;
   */
  boundingBox?: BoundingBox;

  /**
   * Video time offset in microseconds.
   *
   * @generated from field: int64 time_offset = 2;
   */
  timeOffset = protoInt64.zero;

  constructor(data?: PartialMessage<FaceLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.videointelligence.v1beta1.FaceLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bounding_box", kind: "message", T: BoundingBox },
    { no: 2, name: "time_offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FaceLocation {
    return new FaceLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FaceLocation {
    return new FaceLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FaceLocation {
    return new FaceLocation().fromJsonString(jsonString, options);
  }

  static equals(a: FaceLocation | PlainMessage<FaceLocation> | undefined, b: FaceLocation | PlainMessage<FaceLocation> | undefined): boolean {
    return proto3.util.equals(FaceLocation, a, b);
  }
}

/**
 * Face annotation.
 *
 * @generated from message google.cloud.videointelligence.v1beta1.FaceAnnotation
 */
export class FaceAnnotation extends Message<FaceAnnotation> {
  /**
   * Thumbnail of a representative face view (in JPEG format). Encoding: base64.
   *
   * @generated from field: string thumbnail = 1;
   */
  thumbnail = "";

  /**
   * All locations where a face was detected.
   * Faces are detected and tracked on a per-video basis
   * (as opposed to across multiple videos).
   *
   * @generated from field: repeated google.cloud.videointelligence.v1beta1.VideoSegment segments = 2;
   */
  segments: VideoSegment[] = [];

  /**
   * Face locations at one frame per second.
   *
   * @generated from field: repeated google.cloud.videointelligence.v1beta1.FaceLocation locations = 3;
   */
  locations: FaceLocation[] = [];

  constructor(data?: PartialMessage<FaceAnnotation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.videointelligence.v1beta1.FaceAnnotation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "thumbnail", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "segments", kind: "message", T: VideoSegment, repeated: true },
    { no: 3, name: "locations", kind: "message", T: FaceLocation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FaceAnnotation {
    return new FaceAnnotation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FaceAnnotation {
    return new FaceAnnotation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FaceAnnotation {
    return new FaceAnnotation().fromJsonString(jsonString, options);
  }

  static equals(a: FaceAnnotation | PlainMessage<FaceAnnotation> | undefined, b: FaceAnnotation | PlainMessage<FaceAnnotation> | undefined): boolean {
    return proto3.util.equals(FaceAnnotation, a, b);
  }
}

/**
 * Annotation results for a single video.
 *
 * @generated from message google.cloud.videointelligence.v1beta1.VideoAnnotationResults
 */
export class VideoAnnotationResults extends Message<VideoAnnotationResults> {
  /**
   * Video file location in
   * [Google Cloud Storage](https://cloud.google.com/storage/).
   *
   * @generated from field: string input_uri = 1;
   */
  inputUri = "";

  /**
   * Label annotations. There is exactly one element for each unique label.
   *
   * @generated from field: repeated google.cloud.videointelligence.v1beta1.LabelAnnotation label_annotations = 2;
   */
  labelAnnotations: LabelAnnotation[] = [];

  /**
   * Face annotations. There is exactly one element for each unique face.
   *
   * @generated from field: repeated google.cloud.videointelligence.v1beta1.FaceAnnotation face_annotations = 3;
   */
  faceAnnotations: FaceAnnotation[] = [];

  /**
   * Shot annotations. Each shot is represented as a video segment.
   *
   * @generated from field: repeated google.cloud.videointelligence.v1beta1.VideoSegment shot_annotations = 4;
   */
  shotAnnotations: VideoSegment[] = [];

  /**
   * Safe search annotations.
   *
   * @generated from field: repeated google.cloud.videointelligence.v1beta1.SafeSearchAnnotation safe_search_annotations = 6;
   */
  safeSearchAnnotations: SafeSearchAnnotation[] = [];

  /**
   * If set, indicates an error. Note that for a single `AnnotateVideoRequest`
   * some videos may succeed and some may fail.
   *
   * @generated from field: google.rpc.Status error = 5;
   */
  error?: Status;

  constructor(data?: PartialMessage<VideoAnnotationResults>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.videointelligence.v1beta1.VideoAnnotationResults";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "input_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "label_annotations", kind: "message", T: LabelAnnotation, repeated: true },
    { no: 3, name: "face_annotations", kind: "message", T: FaceAnnotation, repeated: true },
    { no: 4, name: "shot_annotations", kind: "message", T: VideoSegment, repeated: true },
    { no: 6, name: "safe_search_annotations", kind: "message", T: SafeSearchAnnotation, repeated: true },
    { no: 5, name: "error", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoAnnotationResults {
    return new VideoAnnotationResults().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoAnnotationResults {
    return new VideoAnnotationResults().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoAnnotationResults {
    return new VideoAnnotationResults().fromJsonString(jsonString, options);
  }

  static equals(a: VideoAnnotationResults | PlainMessage<VideoAnnotationResults> | undefined, b: VideoAnnotationResults | PlainMessage<VideoAnnotationResults> | undefined): boolean {
    return proto3.util.equals(VideoAnnotationResults, a, b);
  }
}

/**
 * Video annotation response. Included in the `response`
 * field of the `Operation` returned by the `GetOperation`
 * call of the `google::longrunning::Operations` service.
 *
 * @generated from message google.cloud.videointelligence.v1beta1.AnnotateVideoResponse
 */
export class AnnotateVideoResponse extends Message<AnnotateVideoResponse> {
  /**
   * Annotation results for all videos specified in `AnnotateVideoRequest`.
   *
   * @generated from field: repeated google.cloud.videointelligence.v1beta1.VideoAnnotationResults annotation_results = 1;
   */
  annotationResults: VideoAnnotationResults[] = [];

  constructor(data?: PartialMessage<AnnotateVideoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.videointelligence.v1beta1.AnnotateVideoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "annotation_results", kind: "message", T: VideoAnnotationResults, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnnotateVideoResponse {
    return new AnnotateVideoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnnotateVideoResponse {
    return new AnnotateVideoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnnotateVideoResponse {
    return new AnnotateVideoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AnnotateVideoResponse | PlainMessage<AnnotateVideoResponse> | undefined, b: AnnotateVideoResponse | PlainMessage<AnnotateVideoResponse> | undefined): boolean {
    return proto3.util.equals(AnnotateVideoResponse, a, b);
  }
}

/**
 * Annotation progress for a single video.
 *
 * @generated from message google.cloud.videointelligence.v1beta1.VideoAnnotationProgress
 */
export class VideoAnnotationProgress extends Message<VideoAnnotationProgress> {
  /**
   * Video file location in
   * [Google Cloud Storage](https://cloud.google.com/storage/).
   *
   * @generated from field: string input_uri = 1;
   */
  inputUri = "";

  /**
   * Approximate percentage processed thus far.
   * Guaranteed to be 100 when fully processed.
   *
   * @generated from field: int32 progress_percent = 2;
   */
  progressPercent = 0;

  /**
   * Time when the request was received.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 3;
   */
  startTime?: Timestamp;

  /**
   * Time of the most recent update.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 4;
   */
  updateTime?: Timestamp;

  constructor(data?: PartialMessage<VideoAnnotationProgress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.videointelligence.v1beta1.VideoAnnotationProgress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "input_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "progress_percent", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "start_time", kind: "message", T: Timestamp },
    { no: 4, name: "update_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoAnnotationProgress {
    return new VideoAnnotationProgress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoAnnotationProgress {
    return new VideoAnnotationProgress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoAnnotationProgress {
    return new VideoAnnotationProgress().fromJsonString(jsonString, options);
  }

  static equals(a: VideoAnnotationProgress | PlainMessage<VideoAnnotationProgress> | undefined, b: VideoAnnotationProgress | PlainMessage<VideoAnnotationProgress> | undefined): boolean {
    return proto3.util.equals(VideoAnnotationProgress, a, b);
  }
}

/**
 * Video annotation progress. Included in the `metadata`
 * field of the `Operation` returned by the `GetOperation`
 * call of the `google::longrunning::Operations` service.
 *
 * @generated from message google.cloud.videointelligence.v1beta1.AnnotateVideoProgress
 */
export class AnnotateVideoProgress extends Message<AnnotateVideoProgress> {
  /**
   * Progress metadata for all videos specified in `AnnotateVideoRequest`.
   *
   * @generated from field: repeated google.cloud.videointelligence.v1beta1.VideoAnnotationProgress annotation_progress = 1;
   */
  annotationProgress: VideoAnnotationProgress[] = [];

  constructor(data?: PartialMessage<AnnotateVideoProgress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.videointelligence.v1beta1.AnnotateVideoProgress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "annotation_progress", kind: "message", T: VideoAnnotationProgress, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnnotateVideoProgress {
    return new AnnotateVideoProgress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnnotateVideoProgress {
    return new AnnotateVideoProgress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnnotateVideoProgress {
    return new AnnotateVideoProgress().fromJsonString(jsonString, options);
  }

  static equals(a: AnnotateVideoProgress | PlainMessage<AnnotateVideoProgress> | undefined, b: AnnotateVideoProgress | PlainMessage<AnnotateVideoProgress> | undefined): boolean {
    return proto3.util.equals(AnnotateVideoProgress, a, b);
  }
}

