// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/cloud/ml/v1beta1/model_service.proto (package google.cloud.ml.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Represents a machine learning solution.
 *
 * A model can have multiple versions, each of which is a deployed, trained
 * model ready to receive prediction requests. The model itself is just a
 * container.
 *
 * @generated from message google.cloud.ml.v1beta1.Model
 */
export class Model extends Message<Model> {
  /**
   * Required. The name specified for the model when it was created.
   *
   * The model name must be unique within the project it is created in.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Optional. The description specified for the model when it was created.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * Output only. The default version of the model. This version will be used to
   * handle prediction requests that do not specify a version.
   *
   * You can change the default version by calling
   * [projects.methods.versions.setDefault](/ml/reference/rest/v1beta1/projects.models.versions/setDefault).
   *
   * @generated from field: google.cloud.ml.v1beta1.Version default_version = 3;
   */
  defaultVersion?: Version;

  /**
   * Optional. The list of regions where the model is going to be deployed.
   * Currently only one region per model is supported.
   * Defaults to 'us-central1' if nothing is set.
   *
   * @generated from field: repeated string regions = 4;
   */
  regions: string[] = [];

  /**
   * Optional. If true, enables StackDriver Logging for online prediction.
   * Default is false.
   *
   * @generated from field: bool online_prediction_logging = 5;
   */
  onlinePredictionLogging = false;

  constructor(data?: PartialMessage<Model>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.ml.v1beta1.Model";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "default_version", kind: "message", T: Version },
    { no: 4, name: "regions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "online_prediction_logging", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Model {
    return new Model().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Model {
    return new Model().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Model {
    return new Model().fromJsonString(jsonString, options);
  }

  static equals(a: Model | PlainMessage<Model> | undefined, b: Model | PlainMessage<Model> | undefined): boolean {
    return proto3.util.equals(Model, a, b);
  }
}

/**
 * Represents a version of the model.
 *
 * Each version is a trained model deployed in the cloud, ready to handle
 * prediction requests. A model can have multiple versions. You can get
 * information about all of the versions of a given model by calling
 * [projects.models.versions.list](/ml/reference/rest/v1beta1/projects.models.versions/list).
 *
 * @generated from message google.cloud.ml.v1beta1.Version
 */
export class Version extends Message<Version> {
  /**
   * Required.The name specified for the version when it was created.
   *
   * The version name must be unique within the model it is created in.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Optional. The description specified for the version when it was created.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * Output only. If true, this version will be used to handle prediction
   * requests that do not specify a version.
   *
   * You can change the default version by calling
   * [projects.methods.versions.setDefault](/ml/reference/rest/v1beta1/projects.models.versions/setDefault).
   *
   * @generated from field: bool is_default = 3;
   */
  isDefault = false;

  /**
   * Required. The Google Cloud Storage location of the trained model used to
   * create the version. See the
   * [overview of model deployment](/ml/docs/concepts/deployment-overview) for
   * more informaiton.
   *
   * When passing Version to
   * [projects.models.versions.create](/ml/reference/rest/v1beta1/projects.models.versions/create)
   * the model service uses the specified location as the source of the model.
   * Once deployed, the model version is hosted by the prediction service, so
   * this location is useful only as a historical record.
   *
   * @generated from field: string deployment_uri = 4;
   */
  deploymentUri = "";

  /**
   * Output only. The time the version was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time the version was last used for prediction.
   *
   * @generated from field: google.protobuf.Timestamp last_use_time = 6;
   */
  lastUseTime?: Timestamp;

  /**
   * Optional. The Google Cloud ML runtime version to use for this deployment.
   * If not set, Google Cloud ML will choose a version.
   *
   * @generated from field: string runtime_version = 8;
   */
  runtimeVersion = "";

  /**
   * Optional. Manually select the number of nodes to use for serving the
   * model. If unset (i.e., by default), the number of nodes used to serve
   * the model automatically scales with traffic. However, care should be
   * taken to ramp up traffic according to the model's ability to scale. If
   * your model needs to handle bursts of traffic beyond it's ability to
   * scale, it is recommended you set this field appropriately.
   *
   * @generated from field: google.cloud.ml.v1beta1.ManualScaling manual_scaling = 9;
   */
  manualScaling?: ManualScaling;

  constructor(data?: PartialMessage<Version>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.ml.v1beta1.Version";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "deployment_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "create_time", kind: "message", T: Timestamp },
    { no: 6, name: "last_use_time", kind: "message", T: Timestamp },
    { no: 8, name: "runtime_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "manual_scaling", kind: "message", T: ManualScaling },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Version {
    return new Version().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Version {
    return new Version().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Version {
    return new Version().fromJsonString(jsonString, options);
  }

  static equals(a: Version | PlainMessage<Version> | undefined, b: Version | PlainMessage<Version> | undefined): boolean {
    return proto3.util.equals(Version, a, b);
  }
}

/**
 * Options for manually scaling a model.
 *
 * @generated from message google.cloud.ml.v1beta1.ManualScaling
 */
export class ManualScaling extends Message<ManualScaling> {
  /**
   * The number of nodes to allocate for this model. These nodes are always up,
   * starting from the time the model is deployed, so the cost of operating
   * this model will be proportional to nodes * number of hours since
   * deployment.
   *
   * @generated from field: int32 nodes = 1;
   */
  nodes = 0;

  constructor(data?: PartialMessage<ManualScaling>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.ml.v1beta1.ManualScaling";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ManualScaling {
    return new ManualScaling().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ManualScaling {
    return new ManualScaling().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ManualScaling {
    return new ManualScaling().fromJsonString(jsonString, options);
  }

  static equals(a: ManualScaling | PlainMessage<ManualScaling> | undefined, b: ManualScaling | PlainMessage<ManualScaling> | undefined): boolean {
    return proto3.util.equals(ManualScaling, a, b);
  }
}

/**
 * Request message for the CreateModel method.
 *
 * @generated from message google.cloud.ml.v1beta1.CreateModelRequest
 */
export class CreateModelRequest extends Message<CreateModelRequest> {
  /**
   * Required. The project name.
   *
   * Authorization: requires `Editor` role on the specified project.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * Required. The model to create.
   *
   * @generated from field: google.cloud.ml.v1beta1.Model model = 2;
   */
  model?: Model;

  constructor(data?: PartialMessage<CreateModelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.ml.v1beta1.CreateModelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model", kind: "message", T: Model },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateModelRequest {
    return new CreateModelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateModelRequest {
    return new CreateModelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateModelRequest {
    return new CreateModelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateModelRequest | PlainMessage<CreateModelRequest> | undefined, b: CreateModelRequest | PlainMessage<CreateModelRequest> | undefined): boolean {
    return proto3.util.equals(CreateModelRequest, a, b);
  }
}

/**
 * Request message for the ListModels method.
 *
 * @generated from message google.cloud.ml.v1beta1.ListModelsRequest
 */
export class ListModelsRequest extends Message<ListModelsRequest> {
  /**
   * Required. The name of the project whose models are to be listed.
   *
   * Authorization: requires `Viewer` role on the specified project.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * Optional. A page token to request the next page of results.
   *
   * You get the token from the `next_page_token` field of the response from
   * the previous call.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  /**
   * Optional. The number of models to retrieve per "page" of results. If there
   * are more remaining results than this number, the response message will
   * contain a valid value in the `next_page_token` field.
   *
   * The default value is 20, and the maximum page size is 100.
   *
   * @generated from field: int32 page_size = 5;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<ListModelsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.ml.v1beta1.ListModelsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListModelsRequest {
    return new ListModelsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListModelsRequest {
    return new ListModelsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListModelsRequest {
    return new ListModelsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListModelsRequest | PlainMessage<ListModelsRequest> | undefined, b: ListModelsRequest | PlainMessage<ListModelsRequest> | undefined): boolean {
    return proto3.util.equals(ListModelsRequest, a, b);
  }
}

/**
 * Response message for the ListModels method.
 *
 * @generated from message google.cloud.ml.v1beta1.ListModelsResponse
 */
export class ListModelsResponse extends Message<ListModelsResponse> {
  /**
   * The list of models.
   *
   * @generated from field: repeated google.cloud.ml.v1beta1.Model models = 1;
   */
  models: Model[] = [];

  /**
   * Optional. Pass this token as the `page_token` field of the request for a
   * subsequent call.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListModelsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.ml.v1beta1.ListModelsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "models", kind: "message", T: Model, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListModelsResponse {
    return new ListModelsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListModelsResponse {
    return new ListModelsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListModelsResponse {
    return new ListModelsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListModelsResponse | PlainMessage<ListModelsResponse> | undefined, b: ListModelsResponse | PlainMessage<ListModelsResponse> | undefined): boolean {
    return proto3.util.equals(ListModelsResponse, a, b);
  }
}

/**
 * Request message for the GetModel method.
 *
 * @generated from message google.cloud.ml.v1beta1.GetModelRequest
 */
export class GetModelRequest extends Message<GetModelRequest> {
  /**
   * Required. The name of the model.
   *
   * Authorization: requires `Viewer` role on the parent project.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetModelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.ml.v1beta1.GetModelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModelRequest {
    return new GetModelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModelRequest {
    return new GetModelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModelRequest {
    return new GetModelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModelRequest | PlainMessage<GetModelRequest> | undefined, b: GetModelRequest | PlainMessage<GetModelRequest> | undefined): boolean {
    return proto3.util.equals(GetModelRequest, a, b);
  }
}

/**
 * Request message for the DeleteModel method.
 *
 * @generated from message google.cloud.ml.v1beta1.DeleteModelRequest
 */
export class DeleteModelRequest extends Message<DeleteModelRequest> {
  /**
   * Required. The name of the model.
   *
   * Authorization: requires `Editor` role on the parent project.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteModelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.ml.v1beta1.DeleteModelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteModelRequest {
    return new DeleteModelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteModelRequest {
    return new DeleteModelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteModelRequest {
    return new DeleteModelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteModelRequest | PlainMessage<DeleteModelRequest> | undefined, b: DeleteModelRequest | PlainMessage<DeleteModelRequest> | undefined): boolean {
    return proto3.util.equals(DeleteModelRequest, a, b);
  }
}

/**
 * Uploads the provided trained model version to Cloud Machine Learning.
 *
 * @generated from message google.cloud.ml.v1beta1.CreateVersionRequest
 */
export class CreateVersionRequest extends Message<CreateVersionRequest> {
  /**
   * Required. The name of the model.
   *
   * Authorization: requires `Editor` role on the parent project.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * Required. The version details.
   *
   * @generated from field: google.cloud.ml.v1beta1.Version version = 2;
   */
  version?: Version;

  constructor(data?: PartialMessage<CreateVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.ml.v1beta1.CreateVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "message", T: Version },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateVersionRequest {
    return new CreateVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateVersionRequest {
    return new CreateVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateVersionRequest {
    return new CreateVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateVersionRequest | PlainMessage<CreateVersionRequest> | undefined, b: CreateVersionRequest | PlainMessage<CreateVersionRequest> | undefined): boolean {
    return proto3.util.equals(CreateVersionRequest, a, b);
  }
}

/**
 * Request message for the ListVersions method.
 *
 * @generated from message google.cloud.ml.v1beta1.ListVersionsRequest
 */
export class ListVersionsRequest extends Message<ListVersionsRequest> {
  /**
   * Required. The name of the model for which to list the version.
   *
   * Authorization: requires `Viewer` role on the parent project.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * Optional. A page token to request the next page of results.
   *
   * You get the token from the `next_page_token` field of the response from
   * the previous call.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  /**
   * Optional. The number of versions to retrieve per "page" of results. If
   * there are more remaining results than this number, the response message
   * will contain a valid value in the `next_page_token` field.
   *
   * The default value is 20, and the maximum page size is 100.
   *
   * @generated from field: int32 page_size = 5;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<ListVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.ml.v1beta1.ListVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListVersionsRequest {
    return new ListVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListVersionsRequest {
    return new ListVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListVersionsRequest {
    return new ListVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListVersionsRequest | PlainMessage<ListVersionsRequest> | undefined, b: ListVersionsRequest | PlainMessage<ListVersionsRequest> | undefined): boolean {
    return proto3.util.equals(ListVersionsRequest, a, b);
  }
}

/**
 * Response message for the ListVersions method.
 *
 * @generated from message google.cloud.ml.v1beta1.ListVersionsResponse
 */
export class ListVersionsResponse extends Message<ListVersionsResponse> {
  /**
   * The list of versions.
   *
   * @generated from field: repeated google.cloud.ml.v1beta1.Version versions = 1;
   */
  versions: Version[] = [];

  /**
   * Optional. Pass this token as the `page_token` field of the request for a
   * subsequent call.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListVersionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.ml.v1beta1.ListVersionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "versions", kind: "message", T: Version, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListVersionsResponse {
    return new ListVersionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListVersionsResponse {
    return new ListVersionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListVersionsResponse {
    return new ListVersionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListVersionsResponse | PlainMessage<ListVersionsResponse> | undefined, b: ListVersionsResponse | PlainMessage<ListVersionsResponse> | undefined): boolean {
    return proto3.util.equals(ListVersionsResponse, a, b);
  }
}

/**
 * Request message for the GetVersion method.
 *
 * @generated from message google.cloud.ml.v1beta1.GetVersionRequest
 */
export class GetVersionRequest extends Message<GetVersionRequest> {
  /**
   * Required. The name of the version.
   *
   * Authorization: requires `Viewer` role on the parent project.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.ml.v1beta1.GetVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVersionRequest {
    return new GetVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVersionRequest {
    return new GetVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVersionRequest {
    return new GetVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVersionRequest | PlainMessage<GetVersionRequest> | undefined, b: GetVersionRequest | PlainMessage<GetVersionRequest> | undefined): boolean {
    return proto3.util.equals(GetVersionRequest, a, b);
  }
}

/**
 * Request message for the DeleteVerionRequest method.
 *
 * @generated from message google.cloud.ml.v1beta1.DeleteVersionRequest
 */
export class DeleteVersionRequest extends Message<DeleteVersionRequest> {
  /**
   * Required. The name of the version. You can get the names of all the
   * versions of a model by calling
   * [projects.models.versions.list](/ml/reference/rest/v1beta1/projects.models.versions/list).
   *
   * Authorization: requires `Editor` role on the parent project.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.ml.v1beta1.DeleteVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteVersionRequest {
    return new DeleteVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteVersionRequest {
    return new DeleteVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteVersionRequest {
    return new DeleteVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteVersionRequest | PlainMessage<DeleteVersionRequest> | undefined, b: DeleteVersionRequest | PlainMessage<DeleteVersionRequest> | undefined): boolean {
    return proto3.util.equals(DeleteVersionRequest, a, b);
  }
}

/**
 * Request message for the SetDefaultVersion request.
 *
 * @generated from message google.cloud.ml.v1beta1.SetDefaultVersionRequest
 */
export class SetDefaultVersionRequest extends Message<SetDefaultVersionRequest> {
  /**
   * Required. The name of the version to make the default for the model. You
   * can get the names of all the versions of a model by calling
   * [projects.models.versions.list](/ml/reference/rest/v1beta1/projects.models.versions/list).
   *
   * Authorization: requires `Editor` role on the parent project.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<SetDefaultVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.cloud.ml.v1beta1.SetDefaultVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetDefaultVersionRequest {
    return new SetDefaultVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetDefaultVersionRequest {
    return new SetDefaultVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetDefaultVersionRequest {
    return new SetDefaultVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetDefaultVersionRequest | PlainMessage<SetDefaultVersionRequest> | undefined, b: SetDefaultVersionRequest | PlainMessage<SetDefaultVersionRequest> | undefined): boolean {
    return proto3.util.equals(SetDefaultVersionRequest, a, b);
  }
}

