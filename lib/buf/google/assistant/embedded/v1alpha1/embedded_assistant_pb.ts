// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/assistant/embedded/v1alpha1/embedded_assistant.proto (package google.assistant.embedded.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Status } from "../../../rpc/status_pb.js";

/**
 * Specifies how to process the `ConverseRequest` messages.
 *
 * @generated from message google.assistant.embedded.v1alpha1.ConverseConfig
 */
export class ConverseConfig extends Message<ConverseConfig> {
  /**
   * *Required* Specifies how to process the subsequent incoming audio.
   *
   * @generated from field: google.assistant.embedded.v1alpha1.AudioInConfig audio_in_config = 1;
   */
  audioInConfig?: AudioInConfig;

  /**
   * *Required* Specifies how to format the audio that will be returned.
   *
   * @generated from field: google.assistant.embedded.v1alpha1.AudioOutConfig audio_out_config = 2;
   */
  audioOutConfig?: AudioOutConfig;

  /**
   * *Required* Represents the current dialog state.
   *
   * @generated from field: google.assistant.embedded.v1alpha1.ConverseState converse_state = 3;
   */
  converseState?: ConverseState;

  constructor(data?: PartialMessage<ConverseConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.assistant.embedded.v1alpha1.ConverseConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "audio_in_config", kind: "message", T: AudioInConfig },
    { no: 2, name: "audio_out_config", kind: "message", T: AudioOutConfig },
    { no: 3, name: "converse_state", kind: "message", T: ConverseState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConverseConfig {
    return new ConverseConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConverseConfig {
    return new ConverseConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConverseConfig {
    return new ConverseConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ConverseConfig | PlainMessage<ConverseConfig> | undefined, b: ConverseConfig | PlainMessage<ConverseConfig> | undefined): boolean {
    return proto3.util.equals(ConverseConfig, a, b);
  }
}

/**
 * Specifies how to process the `audio_in` data that will be provided in
 * subsequent requests. For recommended settings, see the Google Assistant SDK
 * [best practices](https://developers.google.com/assistant/sdk/develop/grpc/best-practices/audio).
 *
 * @generated from message google.assistant.embedded.v1alpha1.AudioInConfig
 */
export class AudioInConfig extends Message<AudioInConfig> {
  /**
   * *Required* Encoding of audio data sent in all `audio_in` messages.
   *
   * @generated from field: google.assistant.embedded.v1alpha1.AudioInConfig.Encoding encoding = 1;
   */
  encoding = AudioInConfig_Encoding.ENCODING_UNSPECIFIED;

  /**
   * *Required* Sample rate (in Hertz) of the audio data sent in all `audio_in`
   * messages. Valid values are from 16000-24000, but 16000 is optimal.
   * For best results, set the sampling rate of the audio source to 16000 Hz.
   * If that's not possible, use the native sample rate of the audio source
   * (instead of re-sampling).
   *
   * @generated from field: int32 sample_rate_hertz = 2;
   */
  sampleRateHertz = 0;

  constructor(data?: PartialMessage<AudioInConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.assistant.embedded.v1alpha1.AudioInConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encoding", kind: "enum", T: proto3.getEnumType(AudioInConfig_Encoding) },
    { no: 2, name: "sample_rate_hertz", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioInConfig {
    return new AudioInConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioInConfig {
    return new AudioInConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioInConfig {
    return new AudioInConfig().fromJsonString(jsonString, options);
  }

  static equals(a: AudioInConfig | PlainMessage<AudioInConfig> | undefined, b: AudioInConfig | PlainMessage<AudioInConfig> | undefined): boolean {
    return proto3.util.equals(AudioInConfig, a, b);
  }
}

/**
 * Audio encoding of the data sent in the audio message.
 * Audio must be one-channel (mono). The only language supported is "en-US".
 *
 * @generated from enum google.assistant.embedded.v1alpha1.AudioInConfig.Encoding
 */
export enum AudioInConfig_Encoding {
  /**
   * Not specified. Will return result [google.rpc.Code.INVALID_ARGUMENT][].
   *
   * @generated from enum value: ENCODING_UNSPECIFIED = 0;
   */
  ENCODING_UNSPECIFIED = 0,

  /**
   * Uncompressed 16-bit signed little-endian samples (Linear PCM).
   * This encoding includes no header, only the raw audio bytes.
   *
   * @generated from enum value: LINEAR16 = 1;
   */
  LINEAR16 = 1,

  /**
   * [`FLAC`](https://xiph.org/flac/documentation.html) (Free Lossless Audio
   * Codec) is the recommended encoding because it is
   * lossless--therefore recognition is not compromised--and
   * requires only about half the bandwidth of `LINEAR16`. This encoding
   * includes the `FLAC` stream header followed by audio data. It supports
   * 16-bit and 24-bit samples, however, not all fields in `STREAMINFO` are
   * supported.
   *
   * @generated from enum value: FLAC = 2;
   */
  FLAC = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AudioInConfig_Encoding)
proto3.util.setEnumType(AudioInConfig_Encoding, "google.assistant.embedded.v1alpha1.AudioInConfig.Encoding", [
  { no: 0, name: "ENCODING_UNSPECIFIED" },
  { no: 1, name: "LINEAR16" },
  { no: 2, name: "FLAC" },
]);

/**
 * Specifies the desired format for the server to use when it returns
 * `audio_out` messages.
 *
 * @generated from message google.assistant.embedded.v1alpha1.AudioOutConfig
 */
export class AudioOutConfig extends Message<AudioOutConfig> {
  /**
   * *Required* The encoding of audio data to be returned in all `audio_out`
   * messages.
   *
   * @generated from field: google.assistant.embedded.v1alpha1.AudioOutConfig.Encoding encoding = 1;
   */
  encoding = AudioOutConfig_Encoding.ENCODING_UNSPECIFIED;

  /**
   * *Required* The sample rate in Hertz of the audio data returned in
   * `audio_out` messages. Valid values are: 16000-24000.
   *
   * @generated from field: int32 sample_rate_hertz = 2;
   */
  sampleRateHertz = 0;

  /**
   * *Required* Current volume setting of the device's audio output.
   * Valid values are 1 to 100 (corresponding to 1% to 100%).
   *
   * @generated from field: int32 volume_percentage = 3;
   */
  volumePercentage = 0;

  constructor(data?: PartialMessage<AudioOutConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.assistant.embedded.v1alpha1.AudioOutConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encoding", kind: "enum", T: proto3.getEnumType(AudioOutConfig_Encoding) },
    { no: 2, name: "sample_rate_hertz", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "volume_percentage", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioOutConfig {
    return new AudioOutConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioOutConfig {
    return new AudioOutConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioOutConfig {
    return new AudioOutConfig().fromJsonString(jsonString, options);
  }

  static equals(a: AudioOutConfig | PlainMessage<AudioOutConfig> | undefined, b: AudioOutConfig | PlainMessage<AudioOutConfig> | undefined): boolean {
    return proto3.util.equals(AudioOutConfig, a, b);
  }
}

/**
 * Audio encoding of the data returned in the audio message. All encodings are
 * raw audio bytes with no header, except as indicated below.
 *
 * @generated from enum google.assistant.embedded.v1alpha1.AudioOutConfig.Encoding
 */
export enum AudioOutConfig_Encoding {
  /**
   * Not specified. Will return result [google.rpc.Code.INVALID_ARGUMENT][].
   *
   * @generated from enum value: ENCODING_UNSPECIFIED = 0;
   */
  ENCODING_UNSPECIFIED = 0,

  /**
   * Uncompressed 16-bit signed little-endian samples (Linear PCM).
   *
   * @generated from enum value: LINEAR16 = 1;
   */
  LINEAR16 = 1,

  /**
   * MP3 audio encoding. The sample rate is encoded in the payload.
   *
   * @generated from enum value: MP3 = 2;
   */
  MP3 = 2,

  /**
   * Opus-encoded audio wrapped in an ogg container. The result will be a
   * file which can be played natively on Android and in some browsers (such
   * as Chrome). The quality of the encoding is considerably higher than MP3
   * while using the same bitrate. The sample rate is encoded in the payload.
   *
   * @generated from enum value: OPUS_IN_OGG = 3;
   */
  OPUS_IN_OGG = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(AudioOutConfig_Encoding)
proto3.util.setEnumType(AudioOutConfig_Encoding, "google.assistant.embedded.v1alpha1.AudioOutConfig.Encoding", [
  { no: 0, name: "ENCODING_UNSPECIFIED" },
  { no: 1, name: "LINEAR16" },
  { no: 2, name: "MP3" },
  { no: 3, name: "OPUS_IN_OGG" },
]);

/**
 * Provides information about the current dialog state.
 *
 * @generated from message google.assistant.embedded.v1alpha1.ConverseState
 */
export class ConverseState extends Message<ConverseState> {
  /**
   * *Required* The `conversation_state` value returned in the prior
   * `ConverseResponse`. Omit (do not set the field) if there was no prior
   * `ConverseResponse`. If there was a prior `ConverseResponse`, do not omit
   * this field; doing so will end that conversation (and this new request will
   * start a new conversation).
   *
   * @generated from field: bytes conversation_state = 1;
   */
  conversationState = new Uint8Array(0);

  constructor(data?: PartialMessage<ConverseState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.assistant.embedded.v1alpha1.ConverseState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conversation_state", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConverseState {
    return new ConverseState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConverseState {
    return new ConverseState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConverseState {
    return new ConverseState().fromJsonString(jsonString, options);
  }

  static equals(a: ConverseState | PlainMessage<ConverseState> | undefined, b: ConverseState | PlainMessage<ConverseState> | undefined): boolean {
    return proto3.util.equals(ConverseState, a, b);
  }
}

/**
 * The audio containing the assistant's response to the query. Sequential chunks
 * of audio data are received in sequential `ConverseResponse` messages.
 *
 * @generated from message google.assistant.embedded.v1alpha1.AudioOut
 */
export class AudioOut extends Message<AudioOut> {
  /**
   * *Output-only* The audio data containing the assistant's response to the
   * query. Sequential chunks of audio data are received in sequential
   * `ConverseResponse` messages.
   *
   * @generated from field: bytes audio_data = 1;
   */
  audioData = new Uint8Array(0);

  constructor(data?: PartialMessage<AudioOut>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.assistant.embedded.v1alpha1.AudioOut";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "audio_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioOut {
    return new AudioOut().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioOut {
    return new AudioOut().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioOut {
    return new AudioOut().fromJsonString(jsonString, options);
  }

  static equals(a: AudioOut | PlainMessage<AudioOut> | undefined, b: AudioOut | PlainMessage<AudioOut> | undefined): boolean {
    return proto3.util.equals(AudioOut, a, b);
  }
}

/**
 * The semantic result for the user's spoken query.
 *
 * @generated from message google.assistant.embedded.v1alpha1.ConverseResult
 */
export class ConverseResult extends Message<ConverseResult> {
  /**
   * *Output-only* The recognized transcript of what the user said.
   *
   * @generated from field: string spoken_request_text = 1;
   */
  spokenRequestText = "";

  /**
   * *Output-only* The text of the assistant's spoken response. This is only
   * returned for an IFTTT action.
   *
   * @generated from field: string spoken_response_text = 2;
   */
  spokenResponseText = "";

  /**
   * *Output-only* State information for subsequent `ConverseRequest`. This
   * value should be saved in the client and returned in the
   * `conversation_state` with the next `ConverseRequest`. (The client does not
   * need to interpret or otherwise use this value.) There is no need to save
   * this information across device restarts.
   *
   * @generated from field: bytes conversation_state = 3;
   */
  conversationState = new Uint8Array(0);

  /**
   * *Output-only* Specifies the mode of the microphone after this `Converse`
   * RPC is processed.
   *
   * @generated from field: google.assistant.embedded.v1alpha1.ConverseResult.MicrophoneMode microphone_mode = 4;
   */
  microphoneMode = ConverseResult_MicrophoneMode.MICROPHONE_MODE_UNSPECIFIED;

  /**
   * *Output-only* Updated volume level. The value will be 0 or omitted
   * (indicating no change) unless a voice command such as "Increase the volume"
   * or "Set volume level 4" was recognized, in which case the value will be
   * between 1 and 100 (corresponding to the new volume level of 1% to 100%).
   * Typically, a client should use this volume level when playing the
   * `audio_out` data, and retain this value as the current volume level and
   * supply it in the `AudioOutConfig` of the next `ConverseRequest`. (Some
   * clients may also implement other ways to allow the current volume level to
   * be changed, for example, by providing a knob that the user can turn.)
   *
   * @generated from field: int32 volume_percentage = 5;
   */
  volumePercentage = 0;

  constructor(data?: PartialMessage<ConverseResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.assistant.embedded.v1alpha1.ConverseResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spoken_request_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "spoken_response_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "conversation_state", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "microphone_mode", kind: "enum", T: proto3.getEnumType(ConverseResult_MicrophoneMode) },
    { no: 5, name: "volume_percentage", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConverseResult {
    return new ConverseResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConverseResult {
    return new ConverseResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConverseResult {
    return new ConverseResult().fromJsonString(jsonString, options);
  }

  static equals(a: ConverseResult | PlainMessage<ConverseResult> | undefined, b: ConverseResult | PlainMessage<ConverseResult> | undefined): boolean {
    return proto3.util.equals(ConverseResult, a, b);
  }
}

/**
 * Possible states of the microphone after a `Converse` RPC completes.
 *
 * @generated from enum google.assistant.embedded.v1alpha1.ConverseResult.MicrophoneMode
 */
export enum ConverseResult_MicrophoneMode {
  /**
   * No mode specified.
   *
   * @generated from enum value: MICROPHONE_MODE_UNSPECIFIED = 0;
   */
  MICROPHONE_MODE_UNSPECIFIED = 0,

  /**
   * The service is not expecting a follow-on question from the user.
   * The microphone should remain off until the user re-activates it.
   *
   * @generated from enum value: CLOSE_MICROPHONE = 1;
   */
  CLOSE_MICROPHONE = 1,

  /**
   * The service is expecting a follow-on question from the user. The
   * microphone should be re-opened when the `AudioOut` playback completes
   * (by starting a new `Converse` RPC call to send the new audio).
   *
   * @generated from enum value: DIALOG_FOLLOW_ON = 2;
   */
  DIALOG_FOLLOW_ON = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ConverseResult_MicrophoneMode)
proto3.util.setEnumType(ConverseResult_MicrophoneMode, "google.assistant.embedded.v1alpha1.ConverseResult.MicrophoneMode", [
  { no: 0, name: "MICROPHONE_MODE_UNSPECIFIED" },
  { no: 1, name: "CLOSE_MICROPHONE" },
  { no: 2, name: "DIALOG_FOLLOW_ON" },
]);

/**
 * The top-level message sent by the client. Clients must send at least two, and
 * typically numerous `ConverseRequest` messages. The first message must
 * contain a `config` message and must not contain `audio_in` data. All
 * subsequent messages must contain `audio_in` data and must not contain a
 * `config` message.
 *
 * @generated from message google.assistant.embedded.v1alpha1.ConverseRequest
 */
export class ConverseRequest extends Message<ConverseRequest> {
  /**
   * Exactly one of these fields must be specified in each `ConverseRequest`.
   *
   * @generated from oneof google.assistant.embedded.v1alpha1.ConverseRequest.converse_request
   */
  converseRequest: {
    /**
     * The `config` message provides information to the recognizer that
     * specifies how to process the request.
     * The first `ConverseRequest` message must contain a `config` message.
     *
     * @generated from field: google.assistant.embedded.v1alpha1.ConverseConfig config = 1;
     */
    value: ConverseConfig;
    case: "config";
  } | {
    /**
     * The audio data to be recognized. Sequential chunks of audio data are sent
     * in sequential `ConverseRequest` messages. The first `ConverseRequest`
     * message must not contain `audio_in` data and all subsequent
     * `ConverseRequest` messages must contain `audio_in` data. The audio bytes
     * must be encoded as specified in `AudioInConfig`.
     * Audio must be sent at approximately real-time (16000 samples per second).
     * An error will be returned if audio is sent significantly faster or
     * slower.
     *
     * @generated from field: bytes audio_in = 2;
     */
    value: Uint8Array;
    case: "audioIn";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ConverseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.assistant.embedded.v1alpha1.ConverseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: ConverseConfig, oneof: "converse_request" },
    { no: 2, name: "audio_in", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "converse_request" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConverseRequest {
    return new ConverseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConverseRequest {
    return new ConverseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConverseRequest {
    return new ConverseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConverseRequest | PlainMessage<ConverseRequest> | undefined, b: ConverseRequest | PlainMessage<ConverseRequest> | undefined): boolean {
    return proto3.util.equals(ConverseRequest, a, b);
  }
}

/**
 * The top-level message received by the client. A series of one or more
 * `ConverseResponse` messages are streamed back to the client.
 *
 * @generated from message google.assistant.embedded.v1alpha1.ConverseResponse
 */
export class ConverseResponse extends Message<ConverseResponse> {
  /**
   * Exactly one of these fields will be populated in each `ConverseResponse`.
   *
   * @generated from oneof google.assistant.embedded.v1alpha1.ConverseResponse.converse_response
   */
  converseResponse: {
    /**
     * *Output-only* If set, returns a [google.rpc.Status][google.rpc.Status] message that
     * specifies the error for the operation.
     * If an error occurs during processing, this message will be set and there
     * will be no further messages sent.
     *
     * @generated from field: google.rpc.Status error = 1;
     */
    value: Status;
    case: "error";
  } | {
    /**
     * *Output-only* Indicates the type of event.
     *
     * @generated from field: google.assistant.embedded.v1alpha1.ConverseResponse.EventType event_type = 2;
     */
    value: ConverseResponse_EventType;
    case: "eventType";
  } | {
    /**
     * *Output-only* The audio containing the assistant's response to the query.
     *
     * @generated from field: google.assistant.embedded.v1alpha1.AudioOut audio_out = 3;
     */
    value: AudioOut;
    case: "audioOut";
  } | {
    /**
     * *Output-only* The semantic result for the user's spoken query.
     *
     * @generated from field: google.assistant.embedded.v1alpha1.ConverseResult result = 5;
     */
    value: ConverseResult;
    case: "result";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ConverseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.assistant.embedded.v1alpha1.ConverseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "message", T: Status, oneof: "converse_response" },
    { no: 2, name: "event_type", kind: "enum", T: proto3.getEnumType(ConverseResponse_EventType), oneof: "converse_response" },
    { no: 3, name: "audio_out", kind: "message", T: AudioOut, oneof: "converse_response" },
    { no: 5, name: "result", kind: "message", T: ConverseResult, oneof: "converse_response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConverseResponse {
    return new ConverseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConverseResponse {
    return new ConverseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConverseResponse {
    return new ConverseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConverseResponse | PlainMessage<ConverseResponse> | undefined, b: ConverseResponse | PlainMessage<ConverseResponse> | undefined): boolean {
    return proto3.util.equals(ConverseResponse, a, b);
  }
}

/**
 * Indicates the type of event.
 *
 * @generated from enum google.assistant.embedded.v1alpha1.ConverseResponse.EventType
 */
export enum ConverseResponse_EventType {
  /**
   * No event specified.
   *
   * @generated from enum value: EVENT_TYPE_UNSPECIFIED = 0;
   */
  EVENT_TYPE_UNSPECIFIED = 0,

  /**
   * This event indicates that the server has detected the end of the user's
   * speech utterance and expects no additional speech. Therefore, the server
   * will not process additional audio (although it may subsequently return
   * additional results). The client should stop sending additional audio
   * data, half-close the gRPC connection, and wait for any additional results
   * until the server closes the gRPC connection.
   *
   * @generated from enum value: END_OF_UTTERANCE = 1;
   */
  END_OF_UTTERANCE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ConverseResponse_EventType)
proto3.util.setEnumType(ConverseResponse_EventType, "google.assistant.embedded.v1alpha1.ConverseResponse.EventType", [
  { no: 0, name: "EVENT_TYPE_UNSPECIFIED" },
  { no: 1, name: "END_OF_UTTERANCE" },
]);

