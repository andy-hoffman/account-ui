// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/iam/v1/logging/audit_data.proto (package google.iam.v1.logging, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PolicyDelta } from "../policy_pb.js";

/**
 * Audit log information specific to Cloud IAM. This message is serialized
 * as an `Any` type in the `ServiceData` message of an
 * `AuditLog` message.
 *
 * @generated from message google.iam.v1.logging.AuditData
 */
export class AuditData extends Message<AuditData> {
  /**
   * Policy delta between the original policy and the newly set policy.
   *
   * @generated from field: google.iam.v1.PolicyDelta policy_delta = 2;
   */
  policyDelta?: PolicyDelta;

  constructor(data?: PartialMessage<AuditData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.v1.logging.AuditData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "policy_delta", kind: "message", T: PolicyDelta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditData {
    return new AuditData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditData {
    return new AuditData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditData {
    return new AuditData().fromJsonString(jsonString, options);
  }

  static equals(a: AuditData | PlainMessage<AuditData> | undefined, b: AuditData | PlainMessage<AuditData> | undefined): boolean {
    return proto3.util.equals(AuditData, a, b);
  }
}

