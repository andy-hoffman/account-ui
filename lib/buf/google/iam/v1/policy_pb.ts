// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/iam/v1/policy.proto (package google.iam.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Defines an Identity and Access Management (IAM) policy. It is used to
 * specify access control policies for Cloud Platform resources.
 *
 *
 * A `Policy` consists of a list of `bindings`. A `Binding` binds a list of
 * `members` to a `role`, where the members can be user accounts, Google groups,
 * Google domains, and service accounts. A `role` is a named list of permissions
 * defined by IAM.
 *
 * **Example**
 *
 *     {
 *       "bindings": [
 *         {
 *           "role": "roles/owner",
 *           "members": [
 *             "user:mike@example.com",
 *             "group:admins@example.com",
 *             "domain:google.com",
 *             "serviceAccount:my-other-app@appspot.gserviceaccount.com",
 *           ]
 *         },
 *         {
 *           "role": "roles/viewer",
 *           "members": ["user:sean@example.com"]
 *         }
 *       ]
 *     }
 *
 * For a description of IAM and its features, see the
 * [IAM developer's guide](https://cloud.google.com/iam).
 *
 * @generated from message google.iam.v1.Policy
 */
export class Policy extends Message<Policy> {
  /**
   * Version of the `Policy`. The default version is 0.
   *
   * @generated from field: int32 version = 1;
   */
  version = 0;

  /**
   * Associates a list of `members` to a `role`.
   * Multiple `bindings` must not be specified for the same `role`.
   * `bindings` with no members will result in an error.
   *
   * @generated from field: repeated google.iam.v1.Binding bindings = 4;
   */
  bindings: Binding[] = [];

  /**
   * `etag` is used for optimistic concurrency control as a way to help
   * prevent simultaneous updates of a policy from overwriting each other.
   * It is strongly suggested that systems make use of the `etag` in the
   * read-modify-write cycle to perform policy updates in order to avoid race
   * conditions: An `etag` is returned in the response to `getIamPolicy`, and
   * systems are expected to put that etag in the request to `setIamPolicy` to
   * ensure that their change will be applied to the same version of the policy.
   *
   * If no `etag` is provided in the call to `setIamPolicy`, then the existing
   * policy is overwritten blindly.
   *
   * @generated from field: bytes etag = 3;
   */
  etag = new Uint8Array(0);

  constructor(data?: PartialMessage<Policy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.v1.Policy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "bindings", kind: "message", T: Binding, repeated: true },
    { no: 3, name: "etag", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Policy {
    return new Policy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Policy {
    return new Policy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Policy {
    return new Policy().fromJsonString(jsonString, options);
  }

  static equals(a: Policy | PlainMessage<Policy> | undefined, b: Policy | PlainMessage<Policy> | undefined): boolean {
    return proto3.util.equals(Policy, a, b);
  }
}

/**
 * Associates `members` with a `role`.
 *
 * @generated from message google.iam.v1.Binding
 */
export class Binding extends Message<Binding> {
  /**
   * Role that is assigned to `members`.
   * For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
   * Required
   *
   * @generated from field: string role = 1;
   */
  role = "";

  /**
   * Specifies the identities requesting access for a Cloud Platform resource.
   * `members` can have the following values:
   *
   * * `allUsers`: A special identifier that represents anyone who is
   *    on the internet; with or without a Google account.
   *
   * * `allAuthenticatedUsers`: A special identifier that represents anyone
   *    who is authenticated with a Google account or a service account.
   *
   * * `user:{emailid}`: An email address that represents a specific Google
   *    account. For example, `alice@gmail.com` or `joe@example.com`.
   *
   *
   * * `serviceAccount:{emailid}`: An email address that represents a service
   *    account. For example, `my-other-app@appspot.gserviceaccount.com`.
   *
   * * `group:{emailid}`: An email address that represents a Google group.
   *    For example, `admins@example.com`.
   *
   * * `domain:{domain}`: A Google Apps domain name that represents all the
   *    users of that domain. For example, `google.com` or `example.com`.
   *
   *
   *
   * @generated from field: repeated string members = 2;
   */
  members: string[] = [];

  constructor(data?: PartialMessage<Binding>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.v1.Binding";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "members", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Binding {
    return new Binding().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Binding {
    return new Binding().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Binding {
    return new Binding().fromJsonString(jsonString, options);
  }

  static equals(a: Binding | PlainMessage<Binding> | undefined, b: Binding | PlainMessage<Binding> | undefined): boolean {
    return proto3.util.equals(Binding, a, b);
  }
}

/**
 * The difference delta between two policies.
 *
 * @generated from message google.iam.v1.PolicyDelta
 */
export class PolicyDelta extends Message<PolicyDelta> {
  /**
   * The delta for Bindings between two policies.
   *
   * @generated from field: repeated google.iam.v1.BindingDelta binding_deltas = 1;
   */
  bindingDeltas: BindingDelta[] = [];

  constructor(data?: PartialMessage<PolicyDelta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.v1.PolicyDelta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "binding_deltas", kind: "message", T: BindingDelta, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PolicyDelta {
    return new PolicyDelta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PolicyDelta {
    return new PolicyDelta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PolicyDelta {
    return new PolicyDelta().fromJsonString(jsonString, options);
  }

  static equals(a: PolicyDelta | PlainMessage<PolicyDelta> | undefined, b: PolicyDelta | PlainMessage<PolicyDelta> | undefined): boolean {
    return proto3.util.equals(PolicyDelta, a, b);
  }
}

/**
 * One delta entry for Binding. Each individual change (only one member in each
 * entry) to a binding will be a separate entry.
 *
 * @generated from message google.iam.v1.BindingDelta
 */
export class BindingDelta extends Message<BindingDelta> {
  /**
   * The action that was performed on a Binding.
   * Required
   *
   * @generated from field: google.iam.v1.BindingDelta.Action action = 1;
   */
  action = BindingDelta_Action.ACTION_UNSPECIFIED;

  /**
   * Role that is assigned to `members`.
   * For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
   * Required
   *
   * @generated from field: string role = 2;
   */
  role = "";

  /**
   * A single identity requesting access for a Cloud Platform resource.
   * Follows the same format of Binding.members.
   * Required
   *
   * @generated from field: string member = 3;
   */
  member = "";

  constructor(data?: PartialMessage<BindingDelta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.v1.BindingDelta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action", kind: "enum", T: proto3.getEnumType(BindingDelta_Action) },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "member", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BindingDelta {
    return new BindingDelta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BindingDelta {
    return new BindingDelta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BindingDelta {
    return new BindingDelta().fromJsonString(jsonString, options);
  }

  static equals(a: BindingDelta | PlainMessage<BindingDelta> | undefined, b: BindingDelta | PlainMessage<BindingDelta> | undefined): boolean {
    return proto3.util.equals(BindingDelta, a, b);
  }
}

/**
 * The type of action performed on a Binding in a policy.
 *
 * @generated from enum google.iam.v1.BindingDelta.Action
 */
export enum BindingDelta_Action {
  /**
   * Unspecified.
   *
   * @generated from enum value: ACTION_UNSPECIFIED = 0;
   */
  ACTION_UNSPECIFIED = 0,

  /**
   * Addition of a Binding.
   *
   * @generated from enum value: ADD = 1;
   */
  ADD = 1,

  /**
   * Removal of a Binding.
   *
   * @generated from enum value: REMOVE = 2;
   */
  REMOVE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(BindingDelta_Action)
proto3.util.setEnumType(BindingDelta_Action, "google.iam.v1.BindingDelta.Action", [
  { no: 0, name: "ACTION_UNSPECIFIED" },
  { no: 1, name: "ADD" },
  { no: 2, name: "REMOVE" },
]);

