// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/iam/admin/v1/iam.proto (package google.iam.admin.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Supported key algorithms.
 *
 * @generated from enum google.iam.admin.v1.ServiceAccountKeyAlgorithm
 */
export enum ServiceAccountKeyAlgorithm {
  /**
   * An unspecified key algorithm.
   *
   * @generated from enum value: KEY_ALG_UNSPECIFIED = 0;
   */
  KEY_ALG_UNSPECIFIED = 0,

  /**
   * 1k RSA Key.
   *
   * @generated from enum value: KEY_ALG_RSA_1024 = 1;
   */
  KEY_ALG_RSA_1024 = 1,

  /**
   * 2k RSA Key.
   *
   * @generated from enum value: KEY_ALG_RSA_2048 = 2;
   */
  KEY_ALG_RSA_2048 = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ServiceAccountKeyAlgorithm)
proto3.util.setEnumType(ServiceAccountKeyAlgorithm, "google.iam.admin.v1.ServiceAccountKeyAlgorithm", [
  { no: 0, name: "KEY_ALG_UNSPECIFIED" },
  { no: 1, name: "KEY_ALG_RSA_1024" },
  { no: 2, name: "KEY_ALG_RSA_2048" },
]);

/**
 * Supported private key output formats.
 *
 * @generated from enum google.iam.admin.v1.ServiceAccountPrivateKeyType
 */
export enum ServiceAccountPrivateKeyType {
  /**
   * Unspecified. Equivalent to `TYPE_GOOGLE_CREDENTIALS_FILE`.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * PKCS12 format.
   * The password for the PKCS12 file is `notasecret`.
   * For more information, see https://tools.ietf.org/html/rfc7292.
   *
   * @generated from enum value: TYPE_PKCS12_FILE = 1;
   */
  TYPE_PKCS12_FILE = 1,

  /**
   * Google Credentials File format.
   *
   * @generated from enum value: TYPE_GOOGLE_CREDENTIALS_FILE = 2;
   */
  TYPE_GOOGLE_CREDENTIALS_FILE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ServiceAccountPrivateKeyType)
proto3.util.setEnumType(ServiceAccountPrivateKeyType, "google.iam.admin.v1.ServiceAccountPrivateKeyType", [
  { no: 0, name: "TYPE_UNSPECIFIED" },
  { no: 1, name: "TYPE_PKCS12_FILE" },
  { no: 2, name: "TYPE_GOOGLE_CREDENTIALS_FILE" },
]);

/**
 * Supported public key output formats.
 *
 * @generated from enum google.iam.admin.v1.ServiceAccountPublicKeyType
 */
export enum ServiceAccountPublicKeyType {
  /**
   * Unspecified. Returns nothing here.
   *
   * @generated from enum value: TYPE_NONE = 0;
   */
  TYPE_NONE = 0,

  /**
   * X509 PEM format.
   *
   * @generated from enum value: TYPE_X509_PEM_FILE = 1;
   */
  TYPE_X509_PEM_FILE = 1,

  /**
   * Raw public key.
   *
   * @generated from enum value: TYPE_RAW_PUBLIC_KEY = 2;
   */
  TYPE_RAW_PUBLIC_KEY = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ServiceAccountPublicKeyType)
proto3.util.setEnumType(ServiceAccountPublicKeyType, "google.iam.admin.v1.ServiceAccountPublicKeyType", [
  { no: 0, name: "TYPE_NONE" },
  { no: 1, name: "TYPE_X509_PEM_FILE" },
  { no: 2, name: "TYPE_RAW_PUBLIC_KEY" },
]);

/**
 * A view for Role objects.
 *
 * @generated from enum google.iam.admin.v1.RoleView
 */
export enum RoleView {
  /**
   * Omits the `included_permissions` field.
   * This is the default value.
   *
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * Returns all fields.
   *
   * @generated from enum value: FULL = 1;
   */
  FULL = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(RoleView)
proto3.util.setEnumType(RoleView, "google.iam.admin.v1.RoleView", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "FULL" },
]);

/**
 * A service account in the Identity and Access Management API.
 *
 * To create a service account, specify the `project_id` and the `account_id`
 * for the account.  The `account_id` is unique within the project, and is used
 * to generate the service account email address and a stable
 * `unique_id`.
 *
 * If the account already exists, the account's resource name is returned
 * in util::Status's ResourceInfo.resource_name in the format of
 * projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}. The caller can
 * use the name in other methods to access the account.
 *
 * All other methods can identify the service account using the format
 * `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
 * Using `-` as a wildcard for the project will infer the project from
 * the account. The `account` value can be the `email` address or the
 * `unique_id` of the service account.
 *
 * @generated from message google.iam.admin.v1.ServiceAccount
 */
export class ServiceAccount extends Message<ServiceAccount> {
  /**
   * The resource name of the service account in the following format:
   * `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
   *
   * Requests using `-` as a wildcard for the project will infer the project
   * from the `account` and the `account` value can be the `email` address or
   * the `unique_id` of the service account.
   *
   * In responses the resource name will always be in the format
   * `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @OutputOnly The id of the project that owns the service account.
   *
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * @OutputOnly The unique and stable id of the service account.
   *
   * @generated from field: string unique_id = 4;
   */
  uniqueId = "";

  /**
   * @OutputOnly The email address of the service account.
   *
   * @generated from field: string email = 5;
   */
  email = "";

  /**
   * Optional. A user-specified description of the service account.  Must be
   * fewer than 100 UTF-8 bytes.
   *
   * @generated from field: string display_name = 6;
   */
  displayName = "";

  /**
   * Used to perform a consistent read-modify-write.
   *
   * @generated from field: bytes etag = 7;
   */
  etag = new Uint8Array(0);

  /**
   * @OutputOnly. The OAuth2 client id for the service account.
   * This is used in conjunction with the OAuth2 clientconfig API to make
   * three legged OAuth2 (3LO) flows to access the data of Google users.
   *
   * @generated from field: string oauth2_client_id = 9;
   */
  oauth2ClientId = "";

  constructor(data?: PartialMessage<ServiceAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.ServiceAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "etag", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "oauth2_client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceAccount {
    return new ServiceAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceAccount {
    return new ServiceAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceAccount {
    return new ServiceAccount().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceAccount | PlainMessage<ServiceAccount> | undefined, b: ServiceAccount | PlainMessage<ServiceAccount> | undefined): boolean {
    return proto3.util.equals(ServiceAccount, a, b);
  }
}

/**
 * The service account create request.
 *
 * @generated from message google.iam.admin.v1.CreateServiceAccountRequest
 */
export class CreateServiceAccountRequest extends Message<CreateServiceAccountRequest> {
  /**
   * Required. The resource name of the project associated with the service
   * accounts, such as `projects/my-project-123`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Required. The account id that is used to generate the service account
   * email address and a stable unique id. It is unique within a project,
   * must be 6-30 characters long, and match the regular expression
   * `[a-z]([-a-z0-9]*[a-z0-9])` to comply with RFC1035.
   *
   * @generated from field: string account_id = 2;
   */
  accountId = "";

  /**
   * The [ServiceAccount][google.iam.admin.v1.ServiceAccount] resource to create.
   * Currently, only the following values are user assignable:
   * `display_name` .
   *
   * @generated from field: google.iam.admin.v1.ServiceAccount service_account = 3;
   */
  serviceAccount?: ServiceAccount;

  constructor(data?: PartialMessage<CreateServiceAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.CreateServiceAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "service_account", kind: "message", T: ServiceAccount },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateServiceAccountRequest {
    return new CreateServiceAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateServiceAccountRequest {
    return new CreateServiceAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateServiceAccountRequest {
    return new CreateServiceAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateServiceAccountRequest | PlainMessage<CreateServiceAccountRequest> | undefined, b: CreateServiceAccountRequest | PlainMessage<CreateServiceAccountRequest> | undefined): boolean {
    return proto3.util.equals(CreateServiceAccountRequest, a, b);
  }
}

/**
 * The service account list request.
 *
 * @generated from message google.iam.admin.v1.ListServiceAccountsRequest
 */
export class ListServiceAccountsRequest extends Message<ListServiceAccountsRequest> {
  /**
   * Required. The resource name of the project associated with the service
   * accounts, such as `projects/my-project-123`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Optional limit on the number of service accounts to include in the
   * response. Further accounts can subsequently be obtained by including the
   * [ListServiceAccountsResponse.next_page_token][google.iam.admin.v1.ListServiceAccountsResponse.next_page_token]
   * in a subsequent request.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * Optional pagination token returned in an earlier
   * [ListServiceAccountsResponse.next_page_token][google.iam.admin.v1.ListServiceAccountsResponse.next_page_token].
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListServiceAccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.ListServiceAccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServiceAccountsRequest {
    return new ListServiceAccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServiceAccountsRequest {
    return new ListServiceAccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServiceAccountsRequest {
    return new ListServiceAccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListServiceAccountsRequest | PlainMessage<ListServiceAccountsRequest> | undefined, b: ListServiceAccountsRequest | PlainMessage<ListServiceAccountsRequest> | undefined): boolean {
    return proto3.util.equals(ListServiceAccountsRequest, a, b);
  }
}

/**
 * The service account list response.
 *
 * @generated from message google.iam.admin.v1.ListServiceAccountsResponse
 */
export class ListServiceAccountsResponse extends Message<ListServiceAccountsResponse> {
  /**
   * The list of matching service accounts.
   *
   * @generated from field: repeated google.iam.admin.v1.ServiceAccount accounts = 1;
   */
  accounts: ServiceAccount[] = [];

  /**
   * To retrieve the next page of results, set
   * [ListServiceAccountsRequest.page_token][google.iam.admin.v1.ListServiceAccountsRequest.page_token]
   * to this value.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListServiceAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.ListServiceAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: ServiceAccount, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServiceAccountsResponse {
    return new ListServiceAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServiceAccountsResponse {
    return new ListServiceAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServiceAccountsResponse {
    return new ListServiceAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListServiceAccountsResponse | PlainMessage<ListServiceAccountsResponse> | undefined, b: ListServiceAccountsResponse | PlainMessage<ListServiceAccountsResponse> | undefined): boolean {
    return proto3.util.equals(ListServiceAccountsResponse, a, b);
  }
}

/**
 * The service account get request.
 *
 * @generated from message google.iam.admin.v1.GetServiceAccountRequest
 */
export class GetServiceAccountRequest extends Message<GetServiceAccountRequest> {
  /**
   * The resource name of the service account in the following format:
   * `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
   * Using `-` as a wildcard for the project will infer the project from
   * the account. The `account` value can be the `email` address or the
   * `unique_id` of the service account.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetServiceAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.GetServiceAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetServiceAccountRequest {
    return new GetServiceAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetServiceAccountRequest {
    return new GetServiceAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetServiceAccountRequest {
    return new GetServiceAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetServiceAccountRequest | PlainMessage<GetServiceAccountRequest> | undefined, b: GetServiceAccountRequest | PlainMessage<GetServiceAccountRequest> | undefined): boolean {
    return proto3.util.equals(GetServiceAccountRequest, a, b);
  }
}

/**
 * The service account delete request.
 *
 * @generated from message google.iam.admin.v1.DeleteServiceAccountRequest
 */
export class DeleteServiceAccountRequest extends Message<DeleteServiceAccountRequest> {
  /**
   * The resource name of the service account in the following format:
   * `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
   * Using `-` as a wildcard for the project will infer the project from
   * the account. The `account` value can be the `email` address or the
   * `unique_id` of the service account.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteServiceAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.DeleteServiceAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteServiceAccountRequest {
    return new DeleteServiceAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteServiceAccountRequest {
    return new DeleteServiceAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteServiceAccountRequest {
    return new DeleteServiceAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteServiceAccountRequest | PlainMessage<DeleteServiceAccountRequest> | undefined, b: DeleteServiceAccountRequest | PlainMessage<DeleteServiceAccountRequest> | undefined): boolean {
    return proto3.util.equals(DeleteServiceAccountRequest, a, b);
  }
}

/**
 * The service account keys list request.
 *
 * @generated from message google.iam.admin.v1.ListServiceAccountKeysRequest
 */
export class ListServiceAccountKeysRequest extends Message<ListServiceAccountKeysRequest> {
  /**
   * The resource name of the service account in the following format:
   * `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
   *
   * Using `-` as a wildcard for the project, will infer the project from
   * the account. The `account` value can be the `email` address or the
   * `unique_id` of the service account.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Filters the types of keys the user wants to include in the list
   * response. Duplicate key types are not allowed. If no key type
   * is provided, all keys are returned.
   *
   * @generated from field: repeated google.iam.admin.v1.ListServiceAccountKeysRequest.KeyType key_types = 2;
   */
  keyTypes: ListServiceAccountKeysRequest_KeyType[] = [];

  constructor(data?: PartialMessage<ListServiceAccountKeysRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.ListServiceAccountKeysRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key_types", kind: "enum", T: proto3.getEnumType(ListServiceAccountKeysRequest_KeyType), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServiceAccountKeysRequest {
    return new ListServiceAccountKeysRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServiceAccountKeysRequest {
    return new ListServiceAccountKeysRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServiceAccountKeysRequest {
    return new ListServiceAccountKeysRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListServiceAccountKeysRequest | PlainMessage<ListServiceAccountKeysRequest> | undefined, b: ListServiceAccountKeysRequest | PlainMessage<ListServiceAccountKeysRequest> | undefined): boolean {
    return proto3.util.equals(ListServiceAccountKeysRequest, a, b);
  }
}

/**
 * `KeyType` filters to selectively retrieve certain varieties
 * of keys.
 *
 * @generated from enum google.iam.admin.v1.ListServiceAccountKeysRequest.KeyType
 */
export enum ListServiceAccountKeysRequest_KeyType {
  /**
   * Unspecified key type. The presence of this in the
   * message will immediately result in an error.
   *
   * @generated from enum value: KEY_TYPE_UNSPECIFIED = 0;
   */
  KEY_TYPE_UNSPECIFIED = 0,

  /**
   * User-managed keys (managed and rotated by the user).
   *
   * @generated from enum value: USER_MANAGED = 1;
   */
  USER_MANAGED = 1,

  /**
   * System-managed keys (managed and rotated by Google).
   *
   * @generated from enum value: SYSTEM_MANAGED = 2;
   */
  SYSTEM_MANAGED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ListServiceAccountKeysRequest_KeyType)
proto3.util.setEnumType(ListServiceAccountKeysRequest_KeyType, "google.iam.admin.v1.ListServiceAccountKeysRequest.KeyType", [
  { no: 0, name: "KEY_TYPE_UNSPECIFIED" },
  { no: 1, name: "USER_MANAGED" },
  { no: 2, name: "SYSTEM_MANAGED" },
]);

/**
 * The service account keys list response.
 *
 * @generated from message google.iam.admin.v1.ListServiceAccountKeysResponse
 */
export class ListServiceAccountKeysResponse extends Message<ListServiceAccountKeysResponse> {
  /**
   * The public keys for the service account.
   *
   * @generated from field: repeated google.iam.admin.v1.ServiceAccountKey keys = 1;
   */
  keys: ServiceAccountKey[] = [];

  constructor(data?: PartialMessage<ListServiceAccountKeysResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.ListServiceAccountKeysResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "message", T: ServiceAccountKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServiceAccountKeysResponse {
    return new ListServiceAccountKeysResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServiceAccountKeysResponse {
    return new ListServiceAccountKeysResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServiceAccountKeysResponse {
    return new ListServiceAccountKeysResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListServiceAccountKeysResponse | PlainMessage<ListServiceAccountKeysResponse> | undefined, b: ListServiceAccountKeysResponse | PlainMessage<ListServiceAccountKeysResponse> | undefined): boolean {
    return proto3.util.equals(ListServiceAccountKeysResponse, a, b);
  }
}

/**
 * The service account key get by id request.
 *
 * @generated from message google.iam.admin.v1.GetServiceAccountKeyRequest
 */
export class GetServiceAccountKeyRequest extends Message<GetServiceAccountKeyRequest> {
  /**
   * The resource name of the service account key in the following format:
   * `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}/keys/{key}`.
   *
   * Using `-` as a wildcard for the project will infer the project from
   * the account. The `account` value can be the `email` address or the
   * `unique_id` of the service account.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The output format of the public key requested.
   * X509_PEM is the default output format.
   *
   * @generated from field: google.iam.admin.v1.ServiceAccountPublicKeyType public_key_type = 2;
   */
  publicKeyType = ServiceAccountPublicKeyType.TYPE_NONE;

  constructor(data?: PartialMessage<GetServiceAccountKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.GetServiceAccountKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "public_key_type", kind: "enum", T: proto3.getEnumType(ServiceAccountPublicKeyType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetServiceAccountKeyRequest {
    return new GetServiceAccountKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetServiceAccountKeyRequest {
    return new GetServiceAccountKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetServiceAccountKeyRequest {
    return new GetServiceAccountKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetServiceAccountKeyRequest | PlainMessage<GetServiceAccountKeyRequest> | undefined, b: GetServiceAccountKeyRequest | PlainMessage<GetServiceAccountKeyRequest> | undefined): boolean {
    return proto3.util.equals(GetServiceAccountKeyRequest, a, b);
  }
}

/**
 * Represents a service account key.
 *
 * A service account has two sets of key-pairs: user-managed, and
 * system-managed.
 *
 * User-managed key-pairs can be created and deleted by users.  Users are
 * responsible for rotating these keys periodically to ensure security of
 * their service accounts.  Users retain the private key of these key-pairs,
 * and Google retains ONLY the public key.
 *
 * System-managed key-pairs are managed automatically by Google, and rotated
 * daily without user intervention.  The private key never leaves Google's
 * servers to maximize security.
 *
 * Public keys for all service accounts are also published at the OAuth2
 * Service Account API.
 *
 * @generated from message google.iam.admin.v1.ServiceAccountKey
 */
export class ServiceAccountKey extends Message<ServiceAccountKey> {
  /**
   * The resource name of the service account key in the following format
   * `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}/keys/{key}`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The output format for the private key.
   * Only provided in `CreateServiceAccountKey` responses, not
   * in `GetServiceAccountKey` or `ListServiceAccountKey` responses.
   *
   * Google never exposes system-managed private keys, and never retains
   * user-managed private keys.
   *
   * @generated from field: google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
   */
  privateKeyType = ServiceAccountPrivateKeyType.TYPE_UNSPECIFIED;

  /**
   * Specifies the algorithm (and possibly key size) for the key.
   *
   * @generated from field: google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 8;
   */
  keyAlgorithm = ServiceAccountKeyAlgorithm.KEY_ALG_UNSPECIFIED;

  /**
   * The private key data. Only provided in `CreateServiceAccountKey`
   * responses. Make sure to keep the private key data secure because it
   * allows for the assertion of the service account identity.
   * When decoded, the private key data can be used to authenticate with
   * Google API client libraries and with
   * <a href="/sdk/gcloud/reference/auth/activate-service-account">gcloud
   * auth activate-service-account</a>.
   *
   * @generated from field: bytes private_key_data = 3;
   */
  privateKeyData = new Uint8Array(0);

  /**
   * The public key data. Only provided in `GetServiceAccountKey` responses.
   *
   * @generated from field: bytes public_key_data = 7;
   */
  publicKeyData = new Uint8Array(0);

  /**
   * The key can be used after this timestamp.
   *
   * @generated from field: google.protobuf.Timestamp valid_after_time = 4;
   */
  validAfterTime?: Timestamp;

  /**
   * The key can be used before this timestamp.
   *
   * @generated from field: google.protobuf.Timestamp valid_before_time = 5;
   */
  validBeforeTime?: Timestamp;

  constructor(data?: PartialMessage<ServiceAccountKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.ServiceAccountKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "private_key_type", kind: "enum", T: proto3.getEnumType(ServiceAccountPrivateKeyType) },
    { no: 8, name: "key_algorithm", kind: "enum", T: proto3.getEnumType(ServiceAccountKeyAlgorithm) },
    { no: 3, name: "private_key_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "public_key_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "valid_after_time", kind: "message", T: Timestamp },
    { no: 5, name: "valid_before_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceAccountKey {
    return new ServiceAccountKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceAccountKey {
    return new ServiceAccountKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceAccountKey {
    return new ServiceAccountKey().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceAccountKey | PlainMessage<ServiceAccountKey> | undefined, b: ServiceAccountKey | PlainMessage<ServiceAccountKey> | undefined): boolean {
    return proto3.util.equals(ServiceAccountKey, a, b);
  }
}

/**
 * The service account key create request.
 *
 * @generated from message google.iam.admin.v1.CreateServiceAccountKeyRequest
 */
export class CreateServiceAccountKeyRequest extends Message<CreateServiceAccountKeyRequest> {
  /**
   * The resource name of the service account in the following format:
   * `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
   * Using `-` as a wildcard for the project will infer the project from
   * the account. The `account` value can be the `email` address or the
   * `unique_id` of the service account.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The output format of the private key. `GOOGLE_CREDENTIALS_FILE` is the
   * default output format.
   *
   * @generated from field: google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
   */
  privateKeyType = ServiceAccountPrivateKeyType.TYPE_UNSPECIFIED;

  /**
   * Which type of key and algorithm to use for the key.
   * The default is currently a 2K RSA key.  However this may change in the
   * future.
   *
   * @generated from field: google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 3;
   */
  keyAlgorithm = ServiceAccountKeyAlgorithm.KEY_ALG_UNSPECIFIED;

  constructor(data?: PartialMessage<CreateServiceAccountKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.CreateServiceAccountKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "private_key_type", kind: "enum", T: proto3.getEnumType(ServiceAccountPrivateKeyType) },
    { no: 3, name: "key_algorithm", kind: "enum", T: proto3.getEnumType(ServiceAccountKeyAlgorithm) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateServiceAccountKeyRequest {
    return new CreateServiceAccountKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateServiceAccountKeyRequest {
    return new CreateServiceAccountKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateServiceAccountKeyRequest {
    return new CreateServiceAccountKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateServiceAccountKeyRequest | PlainMessage<CreateServiceAccountKeyRequest> | undefined, b: CreateServiceAccountKeyRequest | PlainMessage<CreateServiceAccountKeyRequest> | undefined): boolean {
    return proto3.util.equals(CreateServiceAccountKeyRequest, a, b);
  }
}

/**
 * The service account key delete request.
 *
 * @generated from message google.iam.admin.v1.DeleteServiceAccountKeyRequest
 */
export class DeleteServiceAccountKeyRequest extends Message<DeleteServiceAccountKeyRequest> {
  /**
   * The resource name of the service account key in the following format:
   * `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}/keys/{key}`.
   * Using `-` as a wildcard for the project will infer the project from
   * the account. The `account` value can be the `email` address or the
   * `unique_id` of the service account.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteServiceAccountKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.DeleteServiceAccountKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteServiceAccountKeyRequest {
    return new DeleteServiceAccountKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteServiceAccountKeyRequest {
    return new DeleteServiceAccountKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteServiceAccountKeyRequest {
    return new DeleteServiceAccountKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteServiceAccountKeyRequest | PlainMessage<DeleteServiceAccountKeyRequest> | undefined, b: DeleteServiceAccountKeyRequest | PlainMessage<DeleteServiceAccountKeyRequest> | undefined): boolean {
    return proto3.util.equals(DeleteServiceAccountKeyRequest, a, b);
  }
}

/**
 * The service account sign blob request.
 *
 * @generated from message google.iam.admin.v1.SignBlobRequest
 */
export class SignBlobRequest extends Message<SignBlobRequest> {
  /**
   * The resource name of the service account in the following format:
   * `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
   * Using `-` as a wildcard for the project will infer the project from
   * the account. The `account` value can be the `email` address or the
   * `unique_id` of the service account.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The bytes to sign.
   *
   * @generated from field: bytes bytes_to_sign = 2;
   */
  bytesToSign = new Uint8Array(0);

  constructor(data?: PartialMessage<SignBlobRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.SignBlobRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bytes_to_sign", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignBlobRequest {
    return new SignBlobRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignBlobRequest {
    return new SignBlobRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignBlobRequest {
    return new SignBlobRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignBlobRequest | PlainMessage<SignBlobRequest> | undefined, b: SignBlobRequest | PlainMessage<SignBlobRequest> | undefined): boolean {
    return proto3.util.equals(SignBlobRequest, a, b);
  }
}

/**
 * The service account sign blob response.
 *
 * @generated from message google.iam.admin.v1.SignBlobResponse
 */
export class SignBlobResponse extends Message<SignBlobResponse> {
  /**
   * The id of the key used to sign the blob.
   *
   * @generated from field: string key_id = 1;
   */
  keyId = "";

  /**
   * The signed blob.
   *
   * @generated from field: bytes signature = 2;
   */
  signature = new Uint8Array(0);

  constructor(data?: PartialMessage<SignBlobResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.SignBlobResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignBlobResponse {
    return new SignBlobResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignBlobResponse {
    return new SignBlobResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignBlobResponse {
    return new SignBlobResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SignBlobResponse | PlainMessage<SignBlobResponse> | undefined, b: SignBlobResponse | PlainMessage<SignBlobResponse> | undefined): boolean {
    return proto3.util.equals(SignBlobResponse, a, b);
  }
}

/**
 * The service account sign JWT request.
 *
 * @generated from message google.iam.admin.v1.SignJwtRequest
 */
export class SignJwtRequest extends Message<SignJwtRequest> {
  /**
   * The resource name of the service account in the following format:
   * `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
   * Using `-` as a wildcard for the project will infer the project from
   * the account. The `account` value can be the `email` address or the
   * `unique_id` of the service account.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The JWT payload to sign, a JSON JWT Claim set.
   *
   * @generated from field: string payload = 2;
   */
  payload = "";

  constructor(data?: PartialMessage<SignJwtRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.SignJwtRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "payload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignJwtRequest {
    return new SignJwtRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignJwtRequest {
    return new SignJwtRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignJwtRequest {
    return new SignJwtRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignJwtRequest | PlainMessage<SignJwtRequest> | undefined, b: SignJwtRequest | PlainMessage<SignJwtRequest> | undefined): boolean {
    return proto3.util.equals(SignJwtRequest, a, b);
  }
}

/**
 * The service account sign JWT response.
 *
 * @generated from message google.iam.admin.v1.SignJwtResponse
 */
export class SignJwtResponse extends Message<SignJwtResponse> {
  /**
   * The id of the key used to sign the JWT.
   *
   * @generated from field: string key_id = 1;
   */
  keyId = "";

  /**
   * The signed JWT.
   *
   * @generated from field: string signed_jwt = 2;
   */
  signedJwt = "";

  constructor(data?: PartialMessage<SignJwtResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.SignJwtResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "signed_jwt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignJwtResponse {
    return new SignJwtResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignJwtResponse {
    return new SignJwtResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignJwtResponse {
    return new SignJwtResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SignJwtResponse | PlainMessage<SignJwtResponse> | undefined, b: SignJwtResponse | PlainMessage<SignJwtResponse> | undefined): boolean {
    return proto3.util.equals(SignJwtResponse, a, b);
  }
}

/**
 * A role in the Identity and Access Management API.
 *
 * @generated from message google.iam.admin.v1.Role
 */
export class Role extends Message<Role> {
  /**
   * The name of the role.
   *
   * When Role is used in CreateRole, the role name must not be set.
   *
   * When Role is used in output and other input such as UpdateRole, the role
   * name is the complete path, e.g., roles/logging.viewer for curated roles
   * and organizations/{ORGANIZATION_ID}/roles/logging.viewer for custom roles.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Optional.  A human-readable title for the role.  Typically this
   * is limited to 100 UTF-8 bytes.
   *
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * Optional.  A human-readable description for the role.
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * The names of the permissions this role grants when bound in an IAM policy.
   *
   * @generated from field: repeated string included_permissions = 7;
   */
  includedPermissions: string[] = [];

  /**
   * The current launch stage of the role.
   *
   * @generated from field: google.iam.admin.v1.Role.RoleLaunchStage stage = 8;
   */
  stage = Role_RoleLaunchStage.ALPHA;

  /**
   * Used to perform a consistent read-modify-write.
   *
   * @generated from field: bytes etag = 9;
   */
  etag = new Uint8Array(0);

  /**
   * The current deleted state of the role. This field is read only.
   * It will be ignored in calls to CreateRole and UpdateRole.
   *
   * @generated from field: bool deleted = 11;
   */
  deleted = false;

  constructor(data?: PartialMessage<Role>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.Role";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "included_permissions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "stage", kind: "enum", T: proto3.getEnumType(Role_RoleLaunchStage) },
    { no: 9, name: "etag", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Role {
    return new Role().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJsonString(jsonString, options);
  }

  static equals(a: Role | PlainMessage<Role> | undefined, b: Role | PlainMessage<Role> | undefined): boolean {
    return proto3.util.equals(Role, a, b);
  }
}

/**
 * A stage representing a role's lifecycle phase.
 *
 * @generated from enum google.iam.admin.v1.Role.RoleLaunchStage
 */
export enum Role_RoleLaunchStage {
  /**
   * The user has indicated this role is currently in an alpha phase.
   *
   * @generated from enum value: ALPHA = 0;
   */
  ALPHA = 0,

  /**
   * The user has indicated this role is currently in a beta phase.
   *
   * @generated from enum value: BETA = 1;
   */
  BETA = 1,

  /**
   * The user has indicated this role is generally available.
   *
   * @generated from enum value: GA = 2;
   */
  GA = 2,

  /**
   * The user has indicated this role is being deprecated.
   *
   * @generated from enum value: DEPRECATED = 4;
   */
  DEPRECATED = 4,

  /**
   * This role is disabled and will not contribute permissions to any members
   * it is granted to in policies.
   *
   * @generated from enum value: DISABLED = 5;
   */
  DISABLED = 5,

  /**
   * The user has indicated this role is currently in an eap phase.
   *
   * @generated from enum value: EAP = 6;
   */
  EAP = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(Role_RoleLaunchStage)
proto3.util.setEnumType(Role_RoleLaunchStage, "google.iam.admin.v1.Role.RoleLaunchStage", [
  { no: 0, name: "ALPHA" },
  { no: 1, name: "BETA" },
  { no: 2, name: "GA" },
  { no: 4, name: "DEPRECATED" },
  { no: 5, name: "DISABLED" },
  { no: 6, name: "EAP" },
]);

/**
 * The grantable role query request.
 *
 * @generated from message google.iam.admin.v1.QueryGrantableRolesRequest
 */
export class QueryGrantableRolesRequest extends Message<QueryGrantableRolesRequest> {
  /**
   * Required. The full resource name to query from the list of grantable roles.
   *
   * The name follows the Google Cloud Platform resource format.
   * For example, a Cloud Platform project with id `my-project` will be named
   * `//cloudresourcemanager.googleapis.com/projects/my-project`.
   *
   * @generated from field: string full_resource_name = 1;
   */
  fullResourceName = "";

  /**
   * @generated from field: google.iam.admin.v1.RoleView view = 2;
   */
  view = RoleView.BASIC;

  /**
   * Optional limit on the number of roles to include in the response.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  /**
   * Optional pagination token returned in an earlier
   * QueryGrantableRolesResponse.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<QueryGrantableRolesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.QueryGrantableRolesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "full_resource_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "view", kind: "enum", T: proto3.getEnumType(RoleView) },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGrantableRolesRequest {
    return new QueryGrantableRolesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGrantableRolesRequest {
    return new QueryGrantableRolesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGrantableRolesRequest {
    return new QueryGrantableRolesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGrantableRolesRequest | PlainMessage<QueryGrantableRolesRequest> | undefined, b: QueryGrantableRolesRequest | PlainMessage<QueryGrantableRolesRequest> | undefined): boolean {
    return proto3.util.equals(QueryGrantableRolesRequest, a, b);
  }
}

/**
 * The grantable role query response.
 *
 * @generated from message google.iam.admin.v1.QueryGrantableRolesResponse
 */
export class QueryGrantableRolesResponse extends Message<QueryGrantableRolesResponse> {
  /**
   * The list of matching roles.
   *
   * @generated from field: repeated google.iam.admin.v1.Role roles = 1;
   */
  roles: Role[] = [];

  /**
   * To retrieve the next page of results, set
   * `QueryGrantableRolesRequest.page_token` to this value.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<QueryGrantableRolesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.QueryGrantableRolesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "roles", kind: "message", T: Role, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGrantableRolesResponse {
    return new QueryGrantableRolesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGrantableRolesResponse {
    return new QueryGrantableRolesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGrantableRolesResponse {
    return new QueryGrantableRolesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGrantableRolesResponse | PlainMessage<QueryGrantableRolesResponse> | undefined, b: QueryGrantableRolesResponse | PlainMessage<QueryGrantableRolesResponse> | undefined): boolean {
    return proto3.util.equals(QueryGrantableRolesResponse, a, b);
  }
}

/**
 * The request to get all roles defined under a resource.
 *
 * @generated from message google.iam.admin.v1.ListRolesRequest
 */
export class ListRolesRequest extends Message<ListRolesRequest> {
  /**
   * The resource name of the parent resource in one of the following formats:
   * `` (empty string) -- this refers to curated roles.
   * `organizations/{ORGANIZATION_ID}`
   * `projects/{PROJECT_ID}`
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * Optional limit on the number of roles to include in the response.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * Optional pagination token returned in an earlier ListRolesResponse.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * Optional view for the returned Role objects.
   *
   * @generated from field: google.iam.admin.v1.RoleView view = 4;
   */
  view = RoleView.BASIC;

  /**
   * Include Roles that have been deleted.
   *
   * @generated from field: bool show_deleted = 6;
   */
  showDeleted = false;

  constructor(data?: PartialMessage<ListRolesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.ListRolesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "view", kind: "enum", T: proto3.getEnumType(RoleView) },
    { no: 6, name: "show_deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRolesRequest {
    return new ListRolesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRolesRequest {
    return new ListRolesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRolesRequest {
    return new ListRolesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRolesRequest | PlainMessage<ListRolesRequest> | undefined, b: ListRolesRequest | PlainMessage<ListRolesRequest> | undefined): boolean {
    return proto3.util.equals(ListRolesRequest, a, b);
  }
}

/**
 * The response containing the roles defined under a resource.
 *
 * @generated from message google.iam.admin.v1.ListRolesResponse
 */
export class ListRolesResponse extends Message<ListRolesResponse> {
  /**
   * The Roles defined on this resource.
   *
   * @generated from field: repeated google.iam.admin.v1.Role roles = 1;
   */
  roles: Role[] = [];

  /**
   * To retrieve the next page of results, set
   * `ListRolesRequest.page_token` to this value.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListRolesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.ListRolesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "roles", kind: "message", T: Role, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRolesResponse {
    return new ListRolesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRolesResponse {
    return new ListRolesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRolesResponse {
    return new ListRolesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRolesResponse | PlainMessage<ListRolesResponse> | undefined, b: ListRolesResponse | PlainMessage<ListRolesResponse> | undefined): boolean {
    return proto3.util.equals(ListRolesResponse, a, b);
  }
}

/**
 * The request to get the definition of an existing role.
 *
 * @generated from message google.iam.admin.v1.GetRoleRequest
 */
export class GetRoleRequest extends Message<GetRoleRequest> {
  /**
   * The resource name of the role in one of the following formats:
   * `roles/{ROLE_NAME}`
   * `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
   * `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.GetRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoleRequest {
    return new GetRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoleRequest {
    return new GetRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoleRequest {
    return new GetRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRoleRequest | PlainMessage<GetRoleRequest> | undefined, b: GetRoleRequest | PlainMessage<GetRoleRequest> | undefined): boolean {
    return proto3.util.equals(GetRoleRequest, a, b);
  }
}

/**
 * The request to create a new role.
 *
 * @generated from message google.iam.admin.v1.CreateRoleRequest
 */
export class CreateRoleRequest extends Message<CreateRoleRequest> {
  /**
   * The resource name of the parent resource in one of the following formats:
   * `organizations/{ORGANIZATION_ID}`
   * `projects/{PROJECT_ID}`
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The role id to use for this role.
   *
   * @generated from field: string role_id = 2;
   */
  roleId = "";

  /**
   * The Role resource to create.
   *
   * @generated from field: google.iam.admin.v1.Role role = 3;
   */
  role?: Role;

  constructor(data?: PartialMessage<CreateRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.CreateRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "message", T: Role },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoleRequest {
    return new CreateRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoleRequest {
    return new CreateRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoleRequest {
    return new CreateRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRoleRequest | PlainMessage<CreateRoleRequest> | undefined, b: CreateRoleRequest | PlainMessage<CreateRoleRequest> | undefined): boolean {
    return proto3.util.equals(CreateRoleRequest, a, b);
  }
}

/**
 * The request to update a role.
 *
 * @generated from message google.iam.admin.v1.UpdateRoleRequest
 */
export class UpdateRoleRequest extends Message<UpdateRoleRequest> {
  /**
   * The resource name of the role in one of the following formats:
   * `roles/{ROLE_NAME}`
   * `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
   * `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The updated role.
   *
   * @generated from field: google.iam.admin.v1.Role role = 2;
   */
  role?: Role;

  /**
   * A mask describing which fields in the Role have changed.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.UpdateRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "message", T: Role },
    { no: 3, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRoleRequest {
    return new UpdateRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRoleRequest {
    return new UpdateRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRoleRequest {
    return new UpdateRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRoleRequest | PlainMessage<UpdateRoleRequest> | undefined, b: UpdateRoleRequest | PlainMessage<UpdateRoleRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRoleRequest, a, b);
  }
}

/**
 * The request to delete an existing role.
 *
 * @generated from message google.iam.admin.v1.DeleteRoleRequest
 */
export class DeleteRoleRequest extends Message<DeleteRoleRequest> {
  /**
   * The resource name of the role in one of the following formats:
   * `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
   * `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Used to perform a consistent read-modify-write.
   *
   * @generated from field: bytes etag = 2;
   */
  etag = new Uint8Array(0);

  constructor(data?: PartialMessage<DeleteRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.DeleteRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "etag", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRoleRequest {
    return new DeleteRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRoleRequest {
    return new DeleteRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRoleRequest {
    return new DeleteRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRoleRequest | PlainMessage<DeleteRoleRequest> | undefined, b: DeleteRoleRequest | PlainMessage<DeleteRoleRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRoleRequest, a, b);
  }
}

/**
 * The request to undelete an existing role.
 *
 * @generated from message google.iam.admin.v1.UndeleteRoleRequest
 */
export class UndeleteRoleRequest extends Message<UndeleteRoleRequest> {
  /**
   * The resource name of the role in one of the following formats:
   * `organizations/{ORGANIZATION_ID}/roles/{ROLE_NAME}`
   * `projects/{PROJECT_ID}/roles/{ROLE_NAME}`
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Used to perform a consistent read-modify-write.
   *
   * @generated from field: bytes etag = 2;
   */
  etag = new Uint8Array(0);

  constructor(data?: PartialMessage<UndeleteRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.UndeleteRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "etag", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndeleteRoleRequest {
    return new UndeleteRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndeleteRoleRequest {
    return new UndeleteRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndeleteRoleRequest {
    return new UndeleteRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UndeleteRoleRequest | PlainMessage<UndeleteRoleRequest> | undefined, b: UndeleteRoleRequest | PlainMessage<UndeleteRoleRequest> | undefined): boolean {
    return proto3.util.equals(UndeleteRoleRequest, a, b);
  }
}

/**
 * A permission which can be included by a role.
 *
 * @generated from message google.iam.admin.v1.Permission
 */
export class Permission extends Message<Permission> {
  /**
   * The name of this Permission.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The title of this Permission.
   *
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * A brief description of what this Permission is used for.
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * This permission can ONLY be used in predefined roles.
   *
   * @generated from field: bool only_in_predefined_roles = 4;
   */
  onlyInPredefinedRoles = false;

  /**
   * The current launch stage of the permission.
   *
   * @generated from field: google.iam.admin.v1.Permission.PermissionLaunchStage stage = 5;
   */
  stage = Permission_PermissionLaunchStage.ALPHA;

  /**
   * The current custom role support level.
   *
   * @generated from field: google.iam.admin.v1.Permission.CustomRolesSupportLevel custom_roles_support_level = 6;
   */
  customRolesSupportLevel = Permission_CustomRolesSupportLevel.SUPPORTED;

  constructor(data?: PartialMessage<Permission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.Permission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "only_in_predefined_roles", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "stage", kind: "enum", T: proto3.getEnumType(Permission_PermissionLaunchStage) },
    { no: 6, name: "custom_roles_support_level", kind: "enum", T: proto3.getEnumType(Permission_CustomRolesSupportLevel) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Permission {
    return new Permission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Permission {
    return new Permission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Permission {
    return new Permission().fromJsonString(jsonString, options);
  }

  static equals(a: Permission | PlainMessage<Permission> | undefined, b: Permission | PlainMessage<Permission> | undefined): boolean {
    return proto3.util.equals(Permission, a, b);
  }
}

/**
 * A stage representing a permission's lifecycle phase.
 *
 * @generated from enum google.iam.admin.v1.Permission.PermissionLaunchStage
 */
export enum Permission_PermissionLaunchStage {
  /**
   * The permission is currently in an alpha phase.
   *
   * @generated from enum value: ALPHA = 0;
   */
  ALPHA = 0,

  /**
   * The permission is currently in a beta phase.
   *
   * @generated from enum value: BETA = 1;
   */
  BETA = 1,

  /**
   * The permission is generally available.
   *
   * @generated from enum value: GA = 2;
   */
  GA = 2,

  /**
   * The permission is being deprecated.
   *
   * @generated from enum value: DEPRECATED = 3;
   */
  DEPRECATED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Permission_PermissionLaunchStage)
proto3.util.setEnumType(Permission_PermissionLaunchStage, "google.iam.admin.v1.Permission.PermissionLaunchStage", [
  { no: 0, name: "ALPHA" },
  { no: 1, name: "BETA" },
  { no: 2, name: "GA" },
  { no: 3, name: "DEPRECATED" },
]);

/**
 * The state of the permission with regards to custom roles.
 *
 * @generated from enum google.iam.admin.v1.Permission.CustomRolesSupportLevel
 */
export enum Permission_CustomRolesSupportLevel {
  /**
   * Permission is fully supported for custom role use.
   *
   * @generated from enum value: SUPPORTED = 0;
   */
  SUPPORTED = 0,

  /**
   * Permission is being tested to check custom role compatibility.
   *
   * @generated from enum value: TESTING = 1;
   */
  TESTING = 1,

  /**
   * Permission is not supported for custom role use.
   *
   * @generated from enum value: NOT_SUPPORTED = 2;
   */
  NOT_SUPPORTED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Permission_CustomRolesSupportLevel)
proto3.util.setEnumType(Permission_CustomRolesSupportLevel, "google.iam.admin.v1.Permission.CustomRolesSupportLevel", [
  { no: 0, name: "SUPPORTED" },
  { no: 1, name: "TESTING" },
  { no: 2, name: "NOT_SUPPORTED" },
]);

/**
 * A request to get permissions which can be tested on a resource.
 *
 * @generated from message google.iam.admin.v1.QueryTestablePermissionsRequest
 */
export class QueryTestablePermissionsRequest extends Message<QueryTestablePermissionsRequest> {
  /**
   * Required. The full resource name to query from the list of testable
   * permissions.
   *
   * The name follows the Google Cloud Platform resource format.
   * For example, a Cloud Platform project with id `my-project` will be named
   * `//cloudresourcemanager.googleapis.com/projects/my-project`.
   *
   * @generated from field: string full_resource_name = 1;
   */
  fullResourceName = "";

  /**
   * Optional limit on the number of permissions to include in the response.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * Optional pagination token returned in an earlier
   * QueryTestablePermissionsRequest.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<QueryTestablePermissionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.QueryTestablePermissionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "full_resource_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTestablePermissionsRequest {
    return new QueryTestablePermissionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTestablePermissionsRequest {
    return new QueryTestablePermissionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTestablePermissionsRequest {
    return new QueryTestablePermissionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTestablePermissionsRequest | PlainMessage<QueryTestablePermissionsRequest> | undefined, b: QueryTestablePermissionsRequest | PlainMessage<QueryTestablePermissionsRequest> | undefined): boolean {
    return proto3.util.equals(QueryTestablePermissionsRequest, a, b);
  }
}

/**
 * The response containing permissions which can be tested on a resource.
 *
 * @generated from message google.iam.admin.v1.QueryTestablePermissionsResponse
 */
export class QueryTestablePermissionsResponse extends Message<QueryTestablePermissionsResponse> {
  /**
   * The Permissions testable on the requested resource.
   *
   * @generated from field: repeated google.iam.admin.v1.Permission permissions = 1;
   */
  permissions: Permission[] = [];

  /**
   * To retrieve the next page of results, set
   * `QueryTestableRolesRequest.page_token` to this value.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<QueryTestablePermissionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.admin.v1.QueryTestablePermissionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permissions", kind: "message", T: Permission, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTestablePermissionsResponse {
    return new QueryTestablePermissionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTestablePermissionsResponse {
    return new QueryTestablePermissionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTestablePermissionsResponse {
    return new QueryTestablePermissionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTestablePermissionsResponse | PlainMessage<QueryTestablePermissionsResponse> | undefined, b: QueryTestablePermissionsResponse | PlainMessage<QueryTestablePermissionsResponse> | undefined): boolean {
    return proto3.util.equals(QueryTestablePermissionsResponse, a, b);
  }
}

