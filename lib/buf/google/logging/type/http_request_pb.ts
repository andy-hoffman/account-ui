// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/logging/type/http_request.proto (package google.logging.type, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * A common proto for logging HTTP requests. Only contains semantics
 * defined by the HTTP specification. Product-specific logging
 * information MUST be defined in a separate message.
 *
 * @generated from message google.logging.type.HttpRequest
 */
export class HttpRequest extends Message<HttpRequest> {
  /**
   * The request method. Examples: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`.
   *
   * @generated from field: string request_method = 1;
   */
  requestMethod = "";

  /**
   * The scheme (http, https), the host name, the path and the query
   * portion of the URL that was requested.
   * Example: `"http://example.com/some/info?color=red"`.
   *
   * @generated from field: string request_url = 2;
   */
  requestUrl = "";

  /**
   * The size of the HTTP request message in bytes, including the request
   * headers and the request body.
   *
   * @generated from field: int64 request_size = 3;
   */
  requestSize = protoInt64.zero;

  /**
   * The response code indicating the status of response.
   * Examples: 200, 404.
   *
   * @generated from field: int32 status = 4;
   */
  status = 0;

  /**
   * The size of the HTTP response message sent back to the client, in bytes,
   * including the response headers and the response body.
   *
   * @generated from field: int64 response_size = 5;
   */
  responseSize = protoInt64.zero;

  /**
   * The user agent sent by the client. Example:
   * `"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)"`.
   *
   * @generated from field: string user_agent = 6;
   */
  userAgent = "";

  /**
   * The IP address (IPv4 or IPv6) of the client that issued the HTTP
   * request. Examples: `"192.168.1.1"`, `"FE80::0202:B3FF:FE1E:8329"`.
   *
   * @generated from field: string remote_ip = 7;
   */
  remoteIp = "";

  /**
   * The IP address (IPv4 or IPv6) of the origin server that the request was
   * sent to.
   *
   * @generated from field: string server_ip = 13;
   */
  serverIp = "";

  /**
   * The referer URL of the request, as defined in
   * [HTTP/1.1 Header Field Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
   *
   * @generated from field: string referer = 8;
   */
  referer = "";

  /**
   * The request processing latency on the server, from the time the request was
   * received until the response was sent.
   *
   * @generated from field: google.protobuf.Duration latency = 14;
   */
  latency?: Duration;

  /**
   * Whether or not a cache lookup was attempted.
   *
   * @generated from field: bool cache_lookup = 11;
   */
  cacheLookup = false;

  /**
   * Whether or not an entity was served from cache
   * (with or without validation).
   *
   * @generated from field: bool cache_hit = 9;
   */
  cacheHit = false;

  /**
   * Whether or not the response was validated with the origin server before
   * being served from cache. This field is only meaningful if `cache_hit` is
   * True.
   *
   * @generated from field: bool cache_validated_with_origin_server = 10;
   */
  cacheValidatedWithOriginServer = false;

  /**
   * The number of HTTP response bytes inserted into cache. Set only when a
   * cache fill was attempted.
   *
   * @generated from field: int64 cache_fill_bytes = 12;
   */
  cacheFillBytes = protoInt64.zero;

  /**
   * Protocol used for the request. Examples: "HTTP/1.1", "HTTP/2", "websocket"
   *
   * @generated from field: string protocol = 15;
   */
  protocol = "";

  constructor(data?: PartialMessage<HttpRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.logging.type.HttpRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "request_size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "response_size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "user_agent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "remote_ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "server_ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "referer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "latency", kind: "message", T: Duration },
    { no: 11, name: "cache_lookup", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "cache_hit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "cache_validated_with_origin_server", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "cache_fill_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpRequest {
    return new HttpRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpRequest {
    return new HttpRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpRequest {
    return new HttpRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HttpRequest | PlainMessage<HttpRequest> | undefined, b: HttpRequest | PlainMessage<HttpRequest> | undefined): boolean {
    return proto3.util.equals(HttpRequest, a, b);
  }
}

