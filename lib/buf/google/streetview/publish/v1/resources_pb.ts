// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/streetview/publish/v1/resources.proto (package google.streetview.publish.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { LatLng } from "../../../type/latlng_pb.js";

/**
 * Upload reference for media files.
 *
 * @generated from message google.streetview.publish.v1.UploadRef
 */
export class UploadRef extends Message<UploadRef> {
  /**
   * Required. An upload reference should be unique for each user. It follows
   * the form:
   * "https://streetviewpublish.googleapis.com/media/user/<account_id>/photo/<upload_reference>"
   *
   * @generated from field: string upload_url = 1;
   */
  uploadUrl = "";

  constructor(data?: PartialMessage<UploadRef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.UploadRef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "upload_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadRef {
    return new UploadRef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadRef {
    return new UploadRef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadRef {
    return new UploadRef().fromJsonString(jsonString, options);
  }

  static equals(a: UploadRef | PlainMessage<UploadRef> | undefined, b: UploadRef | PlainMessage<UploadRef> | undefined): boolean {
    return proto3.util.equals(UploadRef, a, b);
  }
}

/**
 * Identifier for a photo.
 *
 * @generated from message google.streetview.publish.v1.PhotoId
 */
export class PhotoId extends Message<PhotoId> {
  /**
   * Required. A base64 encoded identifier.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<PhotoId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.PhotoId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhotoId {
    return new PhotoId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhotoId {
    return new PhotoId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhotoId {
    return new PhotoId().fromJsonString(jsonString, options);
  }

  static equals(a: PhotoId | PlainMessage<PhotoId> | undefined, b: PhotoId | PlainMessage<PhotoId> | undefined): boolean {
    return proto3.util.equals(PhotoId, a, b);
  }
}

/**
 * Level information containing level number and its corresponding name.
 *
 * @generated from message google.streetview.publish.v1.Level
 */
export class Level extends Message<Level> {
  /**
   * Floor number, used for ordering. 0 indicates the ground level, 1 indicates
   * the first level above ground level, -1 indicates the first level under
   * ground level. Non-integer values are OK.
   *
   * @generated from field: double number = 1;
   */
  number = 0;

  /**
   * Required. A name assigned to this Level, restricted to 3 characters.
   * Consider how the elevator buttons would be labeled for this level if there
   * was an elevator.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Level>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.Level";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Level {
    return new Level().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Level {
    return new Level().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Level {
    return new Level().fromJsonString(jsonString, options);
  }

  static equals(a: Level | PlainMessage<Level> | undefined, b: Level | PlainMessage<Level> | undefined): boolean {
    return proto3.util.equals(Level, a, b);
  }
}

/**
 * Raw pose measurement for an entity.
 *
 * @generated from message google.streetview.publish.v1.Pose
 */
export class Pose extends Message<Pose> {
  /**
   * Latitude and longitude pair of the pose, as explained here:
   * https://cloud.google.com/datastore/docs/reference/rest/Shared.Types/LatLng
   * When creating a photo, if the latitude and longitude pair are not provided
   * here, the geolocation from the exif header will be used.
   * If the latitude and longitude pair is not provided and cannot be found in
   * the exif header, the create photo process will fail.
   *
   * @generated from field: google.type.LatLng lat_lng_pair = 1;
   */
  latLngPair?: LatLng;

  /**
   * Altitude of the pose in meters above ground level (as defined by WGS84).
   * NaN indicates an unmeasured quantity.
   *
   * @generated from field: double altitude = 2;
   */
  altitude = 0;

  /**
   * Compass heading, measured at the center of the photo in degrees clockwise
   * from North. Value must be >=0 and <360.
   * NaN indicates an unmeasured quantity.
   *
   * @generated from field: double heading = 3;
   */
  heading = 0;

  /**
   * Pitch, measured at the center of the photo in degrees. Value must be >=-90
   * and <= 90. A value of -90 means looking directly down, and a value of 90
   * means looking directly up.
   * NaN indicates an unmeasured quantity.
   *
   * @generated from field: double pitch = 4;
   */
  pitch = 0;

  /**
   * Roll, measured in degrees. Value must be >= 0 and <360. A value of 0
   * means level with the horizon.
   * NaN indicates an unmeasured quantity.
   *
   * @generated from field: double roll = 5;
   */
  roll = 0;

  /**
   * Level (the floor in a building) used to configure vertical navigation.
   *
   * @generated from field: google.streetview.publish.v1.Level level = 7;
   */
  level?: Level;

  constructor(data?: PartialMessage<Pose>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.Pose";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lat_lng_pair", kind: "message", T: LatLng },
    { no: 2, name: "altitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "heading", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "pitch", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "roll", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "level", kind: "message", T: Level },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pose {
    return new Pose().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pose {
    return new Pose().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pose {
    return new Pose().fromJsonString(jsonString, options);
  }

  static equals(a: Pose | PlainMessage<Pose> | undefined, b: Pose | PlainMessage<Pose> | undefined): boolean {
    return proto3.util.equals(Pose, a, b);
  }
}

/**
 * Place metadata for an entity.
 *
 * @generated from message google.streetview.publish.v1.Place
 */
export class Place extends Message<Place> {
  /**
   * Required. Place identifier, as described in
   * https://developers.google.com/places/place-id.
   *
   * @generated from field: string place_id = 1;
   */
  placeId = "";

  constructor(data?: PartialMessage<Place>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.Place";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "place_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Place {
    return new Place().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Place {
    return new Place().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Place {
    return new Place().fromJsonString(jsonString, options);
  }

  static equals(a: Place | PlainMessage<Place> | undefined, b: Place | PlainMessage<Place> | undefined): boolean {
    return proto3.util.equals(Place, a, b);
  }
}

/**
 * A connection is the link from a source photo to a destination photo.
 *
 * @generated from message google.streetview.publish.v1.Connection
 */
export class Connection extends Message<Connection> {
  /**
   * Required. The destination of the connection from the containing photo to
   * another photo.
   *
   * @generated from field: google.streetview.publish.v1.PhotoId target = 1;
   */
  target?: PhotoId;

  constructor(data?: PartialMessage<Connection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.Connection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "message", T: PhotoId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Connection {
    return new Connection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Connection {
    return new Connection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Connection {
    return new Connection().fromJsonString(jsonString, options);
  }

  static equals(a: Connection | PlainMessage<Connection> | undefined, b: Connection | PlainMessage<Connection> | undefined): boolean {
    return proto3.util.equals(Connection, a, b);
  }
}

/**
 * Photo is used to store 360 photos along with photo metadata.
 *
 * @generated from message google.streetview.publish.v1.Photo
 */
export class Photo extends Message<Photo> {
  /**
   * Output only. Identifier for the photo, which is unique among all photos in
   * Google.
   *
   * @generated from field: google.streetview.publish.v1.PhotoId photo_id = 1;
   */
  photoId?: PhotoId;

  /**
   * Required (when creating photo). Input only. The resource URL where the
   * photo bytes are uploaded to.
   *
   * @generated from field: google.streetview.publish.v1.UploadRef upload_reference = 2;
   */
  uploadReference?: UploadRef;

  /**
   * Output only. The download URL for the photo bytes. This field is set only
   * when the `view` parameter in a `GetPhotoRequest` is set to
   * `INCLUDE_DOWNLOAD_URL`.
   *
   * @generated from field: string download_url = 3;
   */
  downloadUrl = "";

  /**
   * Output only. The thumbnail URL for showing a preview of the given photo.
   *
   * @generated from field: string thumbnail_url = 9;
   */
  thumbnailUrl = "";

  /**
   * Output only. The share link for the photo.
   *
   * @generated from field: string share_link = 11;
   */
  shareLink = "";

  /**
   * Pose of the photo.
   *
   * @generated from field: google.streetview.publish.v1.Pose pose = 4;
   */
  pose?: Pose;

  /**
   * Connections to other photos. A connection represents the link from this
   * photo to another photo.
   *
   * @generated from field: repeated google.streetview.publish.v1.Connection connections = 5;
   */
  connections: Connection[] = [];

  /**
   * Absolute time when the photo was captured.
   * When the photo has no exif timestamp, this is used to set a timestamp in
   * the photo metadata.
   *
   * @generated from field: google.protobuf.Timestamp capture_time = 6;
   */
  captureTime?: Timestamp;

  /**
   * Places where this photo belongs.
   *
   * @generated from field: repeated google.streetview.publish.v1.Place places = 7;
   */
  places: Place[] = [];

  /**
   * Output only. View count of the photo.
   *
   * @generated from field: int64 view_count = 10;
   */
  viewCount = protoInt64.zero;

  constructor(data?: PartialMessage<Photo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.Photo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "photo_id", kind: "message", T: PhotoId },
    { no: 2, name: "upload_reference", kind: "message", T: UploadRef },
    { no: 3, name: "download_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "thumbnail_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "share_link", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pose", kind: "message", T: Pose },
    { no: 5, name: "connections", kind: "message", T: Connection, repeated: true },
    { no: 6, name: "capture_time", kind: "message", T: Timestamp },
    { no: 7, name: "places", kind: "message", T: Place, repeated: true },
    { no: 10, name: "view_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Photo {
    return new Photo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Photo {
    return new Photo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Photo {
    return new Photo().fromJsonString(jsonString, options);
  }

  static equals(a: Photo | PlainMessage<Photo> | undefined, b: Photo | PlainMessage<Photo> | undefined): boolean {
    return proto3.util.equals(Photo, a, b);
  }
}

