// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/streetview/publish/v1/rpcmessages.proto (package google.streetview.publish.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";
import { Photo } from "./resources_pb.js";
import { Status } from "../../../rpc/status_pb.js";

/**
 * Specifies which view of the `Photo` should be included in the response.
 *
 * @generated from enum google.streetview.publish.v1.PhotoView
 */
export enum PhotoView {
  /**
   * Server reponses do not include the download URL for the photo bytes.
   * The default value.
   *
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * Server responses include the download URL for the photo bytes.
   *
   * @generated from enum value: INCLUDE_DOWNLOAD_URL = 1;
   */
  INCLUDE_DOWNLOAD_URL = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(PhotoView)
proto3.util.setEnumType(PhotoView, "google.streetview.publish.v1.PhotoView", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "INCLUDE_DOWNLOAD_URL" },
]);

/**
 * Request to create a photo.
 *
 * @generated from message google.streetview.publish.v1.CreatePhotoRequest
 */
export class CreatePhotoRequest extends Message<CreatePhotoRequest> {
  /**
   * Required. Photo to create.
   *
   * @generated from field: google.streetview.publish.v1.Photo photo = 1;
   */
  photo?: Photo;

  constructor(data?: PartialMessage<CreatePhotoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.CreatePhotoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "photo", kind: "message", T: Photo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePhotoRequest {
    return new CreatePhotoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePhotoRequest {
    return new CreatePhotoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePhotoRequest {
    return new CreatePhotoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePhotoRequest | PlainMessage<CreatePhotoRequest> | undefined, b: CreatePhotoRequest | PlainMessage<CreatePhotoRequest> | undefined): boolean {
    return proto3.util.equals(CreatePhotoRequest, a, b);
  }
}

/**
 * Request to get a photo.
 *
 * By default
 * - does not return the download URL for the photo bytes.
 *
 * Parameters:
 * - 'view' controls if the download URL for the photo bytes will be returned.
 *
 * @generated from message google.streetview.publish.v1.GetPhotoRequest
 */
export class GetPhotoRequest extends Message<GetPhotoRequest> {
  /**
   * Required. ID of the photo.
   *
   * @generated from field: string photo_id = 1;
   */
  photoId = "";

  /**
   * Specifies if a download URL for the photo bytes should be returned in the
   * Photo response.
   *
   * @generated from field: google.streetview.publish.v1.PhotoView view = 2;
   */
  view = PhotoView.BASIC;

  constructor(data?: PartialMessage<GetPhotoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.GetPhotoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "photo_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "view", kind: "enum", T: proto3.getEnumType(PhotoView) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPhotoRequest {
    return new GetPhotoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPhotoRequest {
    return new GetPhotoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPhotoRequest {
    return new GetPhotoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPhotoRequest | PlainMessage<GetPhotoRequest> | undefined, b: GetPhotoRequest | PlainMessage<GetPhotoRequest> | undefined): boolean {
    return proto3.util.equals(GetPhotoRequest, a, b);
  }
}

/**
 * Request to get one or more photos.
 * By default
 * - does not return the download URL for the photo bytes.
 *
 * Parameters:
 * - 'view' controls if the download URL for the photo bytes will be returned.
 *
 * @generated from message google.streetview.publish.v1.BatchGetPhotosRequest
 */
export class BatchGetPhotosRequest extends Message<BatchGetPhotosRequest> {
  /**
   * Required. IDs of the photos.
   *
   * @generated from field: repeated string photo_ids = 1;
   */
  photoIds: string[] = [];

  /**
   * Specifies if a download URL for the photo bytes should be returned in the
   * Photo response.
   *
   * @generated from field: google.streetview.publish.v1.PhotoView view = 2;
   */
  view = PhotoView.BASIC;

  constructor(data?: PartialMessage<BatchGetPhotosRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.BatchGetPhotosRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "photo_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "view", kind: "enum", T: proto3.getEnumType(PhotoView) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchGetPhotosRequest {
    return new BatchGetPhotosRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchGetPhotosRequest {
    return new BatchGetPhotosRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchGetPhotosRequest {
    return new BatchGetPhotosRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchGetPhotosRequest | PlainMessage<BatchGetPhotosRequest> | undefined, b: BatchGetPhotosRequest | PlainMessage<BatchGetPhotosRequest> | undefined): boolean {
    return proto3.util.equals(BatchGetPhotosRequest, a, b);
  }
}

/**
 * Response to batch get of photos.
 *
 * @generated from message google.streetview.publish.v1.BatchGetPhotosResponse
 */
export class BatchGetPhotosResponse extends Message<BatchGetPhotosResponse> {
  /**
   * List of results for each individual photo requested, in the same order as
   * the request.
   *
   * @generated from field: repeated google.streetview.publish.v1.PhotoResponse results = 1;
   */
  results: PhotoResponse[] = [];

  constructor(data?: PartialMessage<BatchGetPhotosResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.BatchGetPhotosResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: PhotoResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchGetPhotosResponse {
    return new BatchGetPhotosResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchGetPhotosResponse {
    return new BatchGetPhotosResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchGetPhotosResponse {
    return new BatchGetPhotosResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchGetPhotosResponse | PlainMessage<BatchGetPhotosResponse> | undefined, b: BatchGetPhotosResponse | PlainMessage<BatchGetPhotosResponse> | undefined): boolean {
    return proto3.util.equals(BatchGetPhotosResponse, a, b);
  }
}

/**
 * Response payload for a single `Photo` in batch operations including
 * `BatchGetPhotosRequest` and `BatchUpdatePhotosRequest`.
 *
 * @generated from message google.streetview.publish.v1.PhotoResponse
 */
export class PhotoResponse extends Message<PhotoResponse> {
  /**
   * The status for the operation to get or update a single photo in the batch
   * request.
   *
   * @generated from field: google.rpc.Status status = 1;
   */
  status?: Status;

  /**
   * The photo resource, if the request was successful.
   *
   * @generated from field: google.streetview.publish.v1.Photo photo = 2;
   */
  photo?: Photo;

  constructor(data?: PartialMessage<PhotoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.PhotoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "photo", kind: "message", T: Photo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhotoResponse {
    return new PhotoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhotoResponse {
    return new PhotoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhotoResponse {
    return new PhotoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PhotoResponse | PlainMessage<PhotoResponse> | undefined, b: PhotoResponse | PlainMessage<PhotoResponse> | undefined): boolean {
    return proto3.util.equals(PhotoResponse, a, b);
  }
}

/**
 * Request to list all photos that belong to the user sending the request.
 *
 * By default
 * - does not return the download URL for the photo bytes.
 *
 * Parameters:
 * - 'view' controls if the download URL for the photo bytes will be returned.
 * - 'page_size' determines the maximum number of photos to return.
 * - 'page_token' is the next page token value returned from a previous List
 *     request, if any.
 *
 * @generated from message google.streetview.publish.v1.ListPhotosRequest
 */
export class ListPhotosRequest extends Message<ListPhotosRequest> {
  /**
   * Specifies if a download URL for the photos bytes should be returned in the
   * Photos response.
   *
   * @generated from field: google.streetview.publish.v1.PhotoView view = 1;
   */
  view = PhotoView.BASIC;

  /**
   * The maximum number of photos to return.
   * `page_size` must be non-negative. If `page_size` is zero or is not
   * provided, the default page size of 100 will be used.
   * The number of photos returned in the response may be less than `page_size`
   * if the number of photos that belong to the user is less than `page_size`.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * The next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * The filter expression.
   * Example: `placeId=ChIJj61dQgK6j4AR4GeTYWZsKWw`
   *
   * @generated from field: string filter = 4;
   */
  filter = "";

  constructor(data?: PartialMessage<ListPhotosRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.ListPhotosRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "view", kind: "enum", T: proto3.getEnumType(PhotoView) },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPhotosRequest {
    return new ListPhotosRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPhotosRequest {
    return new ListPhotosRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPhotosRequest {
    return new ListPhotosRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPhotosRequest | PlainMessage<ListPhotosRequest> | undefined, b: ListPhotosRequest | PlainMessage<ListPhotosRequest> | undefined): boolean {
    return proto3.util.equals(ListPhotosRequest, a, b);
  }
}

/**
 * Response to list all photos that belong to a user.
 *
 * @generated from message google.streetview.publish.v1.ListPhotosResponse
 */
export class ListPhotosResponse extends Message<ListPhotosResponse> {
  /**
   * List of photos. There will be a maximum number of items returned based on
   * the page_size field in the request.
   *
   * @generated from field: repeated google.streetview.publish.v1.Photo photos = 1;
   */
  photos: Photo[] = [];

  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListPhotosResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.ListPhotosResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "photos", kind: "message", T: Photo, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPhotosResponse {
    return new ListPhotosResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPhotosResponse {
    return new ListPhotosResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPhotosResponse {
    return new ListPhotosResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPhotosResponse | PlainMessage<ListPhotosResponse> | undefined, b: ListPhotosResponse | PlainMessage<ListPhotosResponse> | undefined): boolean {
    return proto3.util.equals(ListPhotosResponse, a, b);
  }
}

/**
 * Request to update the metadata of a photo.
 * Updating the pixels of a photo is not supported.
 *
 * @generated from message google.streetview.publish.v1.UpdatePhotoRequest
 */
export class UpdatePhotoRequest extends Message<UpdatePhotoRequest> {
  /**
   * Required. Photo object containing the new metadata. Only the fields
   * specified in `update_mask` are used. If `update_mask` is not present, the
   * update applies to all fields.
   * **Note:** To update `pose.altitude`, `pose.latlngpair` has to be filled as
   * well. Otherwise, the request will fail.
   *
   * @generated from field: google.streetview.publish.v1.Photo photo = 1;
   */
  photo?: Photo;

  /**
   * Mask that identifies fields on the photo metadata to update.
   * If not present, the old Photo metadata will be entirely replaced with the
   * new Photo metadata in this request. The update fails if invalid fields are
   * specified. Multiple fields can be specified in a comma-delimited list.
   *
   * The following fields are valid:
   *
   * * `pose.heading`
   * * `pose.latlngpair`
   * * `pose.pitch`
   * * `pose.roll`
   * * `pose.level`
   * * `pose.altitude`
   * * `connections`
   * * `places`
   *
   *
   * **Note:** Repeated fields in `update_mask` mean the entire set of repeated
   * values will be replaced with the new contents. For example, if
   * `UpdatePhotoRequest.photo.update_mask` contains `connections` and
   * `UpdatePhotoRequest.photo.connections` is empty, all connections will be
   * removed.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdatePhotoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.UpdatePhotoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "photo", kind: "message", T: Photo },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePhotoRequest {
    return new UpdatePhotoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePhotoRequest {
    return new UpdatePhotoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePhotoRequest {
    return new UpdatePhotoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePhotoRequest | PlainMessage<UpdatePhotoRequest> | undefined, b: UpdatePhotoRequest | PlainMessage<UpdatePhotoRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePhotoRequest, a, b);
  }
}

/**
 * Request to update the metadata of photos.
 * Updating the pixels of photos is not supported.
 *
 * @generated from message google.streetview.publish.v1.BatchUpdatePhotosRequest
 */
export class BatchUpdatePhotosRequest extends Message<BatchUpdatePhotosRequest> {
  /**
   * Required. List of update photo requests.
   *
   * @generated from field: repeated google.streetview.publish.v1.UpdatePhotoRequest update_photo_requests = 1;
   */
  updatePhotoRequests: UpdatePhotoRequest[] = [];

  constructor(data?: PartialMessage<BatchUpdatePhotosRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.BatchUpdatePhotosRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "update_photo_requests", kind: "message", T: UpdatePhotoRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchUpdatePhotosRequest {
    return new BatchUpdatePhotosRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchUpdatePhotosRequest {
    return new BatchUpdatePhotosRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchUpdatePhotosRequest {
    return new BatchUpdatePhotosRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchUpdatePhotosRequest | PlainMessage<BatchUpdatePhotosRequest> | undefined, b: BatchUpdatePhotosRequest | PlainMessage<BatchUpdatePhotosRequest> | undefined): boolean {
    return proto3.util.equals(BatchUpdatePhotosRequest, a, b);
  }
}

/**
 * Response to batch update of metadata of one or more photos.
 *
 * @generated from message google.streetview.publish.v1.BatchUpdatePhotosResponse
 */
export class BatchUpdatePhotosResponse extends Message<BatchUpdatePhotosResponse> {
  /**
   * List of results for each individual photo updated, in the same order as
   * the request.
   *
   * @generated from field: repeated google.streetview.publish.v1.PhotoResponse results = 1;
   */
  results: PhotoResponse[] = [];

  constructor(data?: PartialMessage<BatchUpdatePhotosResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.BatchUpdatePhotosResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: PhotoResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchUpdatePhotosResponse {
    return new BatchUpdatePhotosResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchUpdatePhotosResponse {
    return new BatchUpdatePhotosResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchUpdatePhotosResponse {
    return new BatchUpdatePhotosResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchUpdatePhotosResponse | PlainMessage<BatchUpdatePhotosResponse> | undefined, b: BatchUpdatePhotosResponse | PlainMessage<BatchUpdatePhotosResponse> | undefined): boolean {
    return proto3.util.equals(BatchUpdatePhotosResponse, a, b);
  }
}

/**
 * Request to delete a photo.
 *
 * @generated from message google.streetview.publish.v1.DeletePhotoRequest
 */
export class DeletePhotoRequest extends Message<DeletePhotoRequest> {
  /**
   * Required. ID of the photo.
   *
   * @generated from field: string photo_id = 1;
   */
  photoId = "";

  constructor(data?: PartialMessage<DeletePhotoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.DeletePhotoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "photo_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePhotoRequest {
    return new DeletePhotoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePhotoRequest {
    return new DeletePhotoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePhotoRequest {
    return new DeletePhotoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePhotoRequest | PlainMessage<DeletePhotoRequest> | undefined, b: DeletePhotoRequest | PlainMessage<DeletePhotoRequest> | undefined): boolean {
    return proto3.util.equals(DeletePhotoRequest, a, b);
  }
}

/**
 * Request to delete multiple photos.
 *
 * @generated from message google.streetview.publish.v1.BatchDeletePhotosRequest
 */
export class BatchDeletePhotosRequest extends Message<BatchDeletePhotosRequest> {
  /**
   * Required. List of delete photo requests.
   *
   * @generated from field: repeated string photo_ids = 1;
   */
  photoIds: string[] = [];

  constructor(data?: PartialMessage<BatchDeletePhotosRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.BatchDeletePhotosRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "photo_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchDeletePhotosRequest {
    return new BatchDeletePhotosRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchDeletePhotosRequest {
    return new BatchDeletePhotosRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchDeletePhotosRequest {
    return new BatchDeletePhotosRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchDeletePhotosRequest | PlainMessage<BatchDeletePhotosRequest> | undefined, b: BatchDeletePhotosRequest | PlainMessage<BatchDeletePhotosRequest> | undefined): boolean {
    return proto3.util.equals(BatchDeletePhotosRequest, a, b);
  }
}

/**
 * Response to batch delete of one or more photos.
 *
 * @generated from message google.streetview.publish.v1.BatchDeletePhotosResponse
 */
export class BatchDeletePhotosResponse extends Message<BatchDeletePhotosResponse> {
  /**
   * The status for the operation to delete a single photo in the batch request.
   *
   * @generated from field: repeated google.rpc.Status status = 1;
   */
  status: Status[] = [];

  constructor(data?: PartialMessage<BatchDeletePhotosResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.streetview.publish.v1.BatchDeletePhotosResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchDeletePhotosResponse {
    return new BatchDeletePhotosResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchDeletePhotosResponse {
    return new BatchDeletePhotosResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchDeletePhotosResponse {
    return new BatchDeletePhotosResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchDeletePhotosResponse | PlainMessage<BatchDeletePhotosResponse> | undefined, b: BatchDeletePhotosResponse | PlainMessage<BatchDeletePhotosResponse> | undefined): boolean {
    return proto3.util.equals(BatchDeletePhotosResponse, a, b);
  }
}

