// Copyright (c) 2015, Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file google/pubsub/v1beta2/pubsub.proto (package google.pubsub.v1beta2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * A topic resource.
 *
 * @generated from message google.pubsub.v1beta2.Topic
 */
export class Topic extends Message<Topic> {
  /**
   * Name of the topic.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<Topic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.Topic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Topic {
    return new Topic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Topic {
    return new Topic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Topic {
    return new Topic().fromJsonString(jsonString, options);
  }

  static equals(a: Topic | PlainMessage<Topic> | undefined, b: Topic | PlainMessage<Topic> | undefined): boolean {
    return proto3.util.equals(Topic, a, b);
  }
}

/**
 * A message data and its attributes.
 *
 * @generated from message google.pubsub.v1beta2.PubsubMessage
 */
export class PubsubMessage extends Message<PubsubMessage> {
  /**
   * The message payload. For JSON requests, the value of this field must be
   * base64-encoded.
   *
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  /**
   * Optional attributes for this message.
   *
   * @generated from field: map<string, string> attributes = 2;
   */
  attributes: { [key: string]: string } = {};

  /**
   * ID of this message assigned by the server at publication time. Guaranteed
   * to be unique within the topic. This value may be read by a subscriber
   * that receives a PubsubMessage via a Pull call or a push delivery. It must
   * not be populated by a publisher in a Publish call.
   *
   * @generated from field: string message_id = 3;
   */
  messageId = "";

  constructor(data?: PartialMessage<PubsubMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.PubsubMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "message_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PubsubMessage {
    return new PubsubMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PubsubMessage {
    return new PubsubMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PubsubMessage {
    return new PubsubMessage().fromJsonString(jsonString, options);
  }

  static equals(a: PubsubMessage | PlainMessage<PubsubMessage> | undefined, b: PubsubMessage | PlainMessage<PubsubMessage> | undefined): boolean {
    return proto3.util.equals(PubsubMessage, a, b);
  }
}

/**
 * Request for the GetTopic method.
 *
 * @generated from message google.pubsub.v1beta2.GetTopicRequest
 */
export class GetTopicRequest extends Message<GetTopicRequest> {
  /**
   * The name of the topic to get.
   *
   * @generated from field: string topic = 1;
   */
  topic = "";

  constructor(data?: PartialMessage<GetTopicRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.GetTopicRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTopicRequest {
    return new GetTopicRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTopicRequest {
    return new GetTopicRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTopicRequest {
    return new GetTopicRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTopicRequest | PlainMessage<GetTopicRequest> | undefined, b: GetTopicRequest | PlainMessage<GetTopicRequest> | undefined): boolean {
    return proto3.util.equals(GetTopicRequest, a, b);
  }
}

/**
 * Request for the Publish method.
 *
 * @generated from message google.pubsub.v1beta2.PublishRequest
 */
export class PublishRequest extends Message<PublishRequest> {
  /**
   * The messages in the request will be published on this topic.
   *
   * @generated from field: string topic = 1;
   */
  topic = "";

  /**
   * The messages to publish.
   *
   * @generated from field: repeated google.pubsub.v1beta2.PubsubMessage messages = 2;
   */
  messages: PubsubMessage[] = [];

  constructor(data?: PartialMessage<PublishRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.PublishRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "messages", kind: "message", T: PubsubMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishRequest {
    return new PublishRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishRequest {
    return new PublishRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishRequest {
    return new PublishRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishRequest | PlainMessage<PublishRequest> | undefined, b: PublishRequest | PlainMessage<PublishRequest> | undefined): boolean {
    return proto3.util.equals(PublishRequest, a, b);
  }
}

/**
 * Response for the Publish method.
 *
 * @generated from message google.pubsub.v1beta2.PublishResponse
 */
export class PublishResponse extends Message<PublishResponse> {
  /**
   * The server-assigned ID of each published message, in the same order as
   * the messages in the request. IDs are guaranteed to be unique within
   * the topic.
   *
   * @generated from field: repeated string message_ids = 1;
   */
  messageIds: string[] = [];

  constructor(data?: PartialMessage<PublishResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.PublishResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishResponse {
    return new PublishResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishResponse {
    return new PublishResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishResponse {
    return new PublishResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishResponse | PlainMessage<PublishResponse> | undefined, b: PublishResponse | PlainMessage<PublishResponse> | undefined): boolean {
    return proto3.util.equals(PublishResponse, a, b);
  }
}

/**
 * Request for the ListTopics method.
 *
 * @generated from message google.pubsub.v1beta2.ListTopicsRequest
 */
export class ListTopicsRequest extends Message<ListTopicsRequest> {
  /**
   * The name of the cloud project that topics belong to.
   *
   * @generated from field: string project = 1;
   */
  project = "";

  /**
   * Maximum number of topics to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * The value returned by the last ListTopicsResponse; indicates that this is
   * a continuation of a prior ListTopics call, and that the system should
   * return the next page of data.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListTopicsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.ListTopicsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTopicsRequest {
    return new ListTopicsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTopicsRequest {
    return new ListTopicsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTopicsRequest {
    return new ListTopicsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTopicsRequest | PlainMessage<ListTopicsRequest> | undefined, b: ListTopicsRequest | PlainMessage<ListTopicsRequest> | undefined): boolean {
    return proto3.util.equals(ListTopicsRequest, a, b);
  }
}

/**
 * Response for the ListTopics method.
 *
 * @generated from message google.pubsub.v1beta2.ListTopicsResponse
 */
export class ListTopicsResponse extends Message<ListTopicsResponse> {
  /**
   * The resulting topics.
   *
   * @generated from field: repeated google.pubsub.v1beta2.Topic topics = 1;
   */
  topics: Topic[] = [];

  /**
   * If not empty, indicates that there may be more topics that match the
   * request; this value should be passed in a new ListTopicsRequest.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListTopicsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.ListTopicsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topics", kind: "message", T: Topic, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTopicsResponse {
    return new ListTopicsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTopicsResponse {
    return new ListTopicsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTopicsResponse {
    return new ListTopicsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTopicsResponse | PlainMessage<ListTopicsResponse> | undefined, b: ListTopicsResponse | PlainMessage<ListTopicsResponse> | undefined): boolean {
    return proto3.util.equals(ListTopicsResponse, a, b);
  }
}

/**
 * Request for the ListTopicSubscriptions method.
 *
 * @generated from message google.pubsub.v1beta2.ListTopicSubscriptionsRequest
 */
export class ListTopicSubscriptionsRequest extends Message<ListTopicSubscriptionsRequest> {
  /**
   * The name of the topic that subscriptions are attached to.
   *
   * @generated from field: string topic = 1;
   */
  topic = "";

  /**
   * Maximum number of subscription names to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * The value returned by the last ListTopicSubscriptionsResponse; indicates
   * that this is a continuation of a prior ListTopicSubscriptions call, and
   * that the system should return the next page of data.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListTopicSubscriptionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.ListTopicSubscriptionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTopicSubscriptionsRequest {
    return new ListTopicSubscriptionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTopicSubscriptionsRequest {
    return new ListTopicSubscriptionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTopicSubscriptionsRequest {
    return new ListTopicSubscriptionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTopicSubscriptionsRequest | PlainMessage<ListTopicSubscriptionsRequest> | undefined, b: ListTopicSubscriptionsRequest | PlainMessage<ListTopicSubscriptionsRequest> | undefined): boolean {
    return proto3.util.equals(ListTopicSubscriptionsRequest, a, b);
  }
}

/**
 * Response for the ListTopicSubscriptions method.
 *
 * @generated from message google.pubsub.v1beta2.ListTopicSubscriptionsResponse
 */
export class ListTopicSubscriptionsResponse extends Message<ListTopicSubscriptionsResponse> {
  /**
   * The names of the subscriptions that match the request.
   *
   * @generated from field: repeated string subscriptions = 1;
   */
  subscriptions: string[] = [];

  /**
   * If not empty, indicates that there may be more subscriptions that match
   * the request; this value should be passed in a new
   * ListTopicSubscriptionsRequest to get more subscriptions.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListTopicSubscriptionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.ListTopicSubscriptionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscriptions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTopicSubscriptionsResponse {
    return new ListTopicSubscriptionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTopicSubscriptionsResponse {
    return new ListTopicSubscriptionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTopicSubscriptionsResponse {
    return new ListTopicSubscriptionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTopicSubscriptionsResponse | PlainMessage<ListTopicSubscriptionsResponse> | undefined, b: ListTopicSubscriptionsResponse | PlainMessage<ListTopicSubscriptionsResponse> | undefined): boolean {
    return proto3.util.equals(ListTopicSubscriptionsResponse, a, b);
  }
}

/**
 * Request for the DeleteTopic method.
 *
 * @generated from message google.pubsub.v1beta2.DeleteTopicRequest
 */
export class DeleteTopicRequest extends Message<DeleteTopicRequest> {
  /**
   * Name of the topic to delete.
   *
   * @generated from field: string topic = 1;
   */
  topic = "";

  constructor(data?: PartialMessage<DeleteTopicRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.DeleteTopicRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTopicRequest {
    return new DeleteTopicRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTopicRequest {
    return new DeleteTopicRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTopicRequest {
    return new DeleteTopicRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTopicRequest | PlainMessage<DeleteTopicRequest> | undefined, b: DeleteTopicRequest | PlainMessage<DeleteTopicRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTopicRequest, a, b);
  }
}

/**
 * A subscription resource.
 *
 * @generated from message google.pubsub.v1beta2.Subscription
 */
export class Subscription extends Message<Subscription> {
  /**
   * Name of the subscription.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The name of the topic from which this subscription is receiving messages.
   * This will be present if and only if the subscription has not been detached
   * from its topic.
   *
   * @generated from field: string topic = 2;
   */
  topic = "";

  /**
   * If push delivery is used with this subscription, this field is
   * used to configure it. An empty pushConfig signifies that the subscriber
   * will pull and ack messages using API methods.
   *
   * @generated from field: google.pubsub.v1beta2.PushConfig push_config = 4;
   */
  pushConfig?: PushConfig;

  /**
   * This value is the maximum time after a subscriber receives a message
   * before the subscriber should acknowledge the message. After message
   * delivery but before the ack deadline expires and before the message is
   * acknowledged, it is an outstanding message and will not be delivered
   * again during that time (on a best-effort basis).
   *
   * For pull delivery this value
   * is used as the initial value for the ack deadline. It may be overridden
   * for a specific message by calling ModifyAckDeadline.
   *
   * For push delivery, this value is also used to set the request timeout for
   * the call to the push endpoint.
   *
   * If the subscriber never acknowledges the message, the Pub/Sub
   * system will eventually redeliver the message.
   *
   * @generated from field: int32 ack_deadline_seconds = 5;
   */
  ackDeadlineSeconds = 0;

  constructor(data?: PartialMessage<Subscription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.Subscription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "push_config", kind: "message", T: PushConfig },
    { no: 5, name: "ack_deadline_seconds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Subscription {
    return new Subscription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Subscription {
    return new Subscription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Subscription {
    return new Subscription().fromJsonString(jsonString, options);
  }

  static equals(a: Subscription | PlainMessage<Subscription> | undefined, b: Subscription | PlainMessage<Subscription> | undefined): boolean {
    return proto3.util.equals(Subscription, a, b);
  }
}

/**
 * Configuration for a push delivery endpoint.
 *
 * @generated from message google.pubsub.v1beta2.PushConfig
 */
export class PushConfig extends Message<PushConfig> {
  /**
   * A URL locating the endpoint to which messages should be pushed.
   * For example, a Webhook endpoint might use "https://example.com/push".
   *
   * @generated from field: string push_endpoint = 1;
   */
  pushEndpoint = "";

  /**
   * Endpoint configuration attributes.
   *
   * Every endpoint has a set of API supported attributes that can be used to
   * control different aspects of the message delivery.
   *
   * The currently supported attribute is `x-goog-version`, which you can
   * use to change the format of the push message. This attribute
   * indicates the version of the data expected by the endpoint. This
   * controls the shape of the envelope (i.e. its fields and metadata).
   * The endpoint version is based on the version of the Pub/Sub
   * API.
   *
   * If not present during the CreateSubscription call, it will default to
   * the version of the API used to make such call. If not present during a
   * ModifyPushConfig call, its value will not be changed. GetSubscription
   * calls will always return a valid version, even if the subscription was
   * created without this attribute.
   *
   * The possible values for this attribute are:
   *
   * * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API.
   * * `v1beta2`: uses the push format defined in the v1beta2 Pub/Sub API.
   *
   *
   * @generated from field: map<string, string> attributes = 2;
   */
  attributes: { [key: string]: string } = {};

  constructor(data?: PartialMessage<PushConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.PushConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "push_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PushConfig {
    return new PushConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PushConfig {
    return new PushConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PushConfig {
    return new PushConfig().fromJsonString(jsonString, options);
  }

  static equals(a: PushConfig | PlainMessage<PushConfig> | undefined, b: PushConfig | PlainMessage<PushConfig> | undefined): boolean {
    return proto3.util.equals(PushConfig, a, b);
  }
}

/**
 * A message and its corresponding acknowledgment ID.
 *
 * @generated from message google.pubsub.v1beta2.ReceivedMessage
 */
export class ReceivedMessage extends Message<ReceivedMessage> {
  /**
   * This ID can be used to acknowledge the received message.
   *
   * @generated from field: string ack_id = 1;
   */
  ackId = "";

  /**
   * The message.
   *
   * @generated from field: google.pubsub.v1beta2.PubsubMessage message = 2;
   */
  message?: PubsubMessage;

  constructor(data?: PartialMessage<ReceivedMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.ReceivedMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ack_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "message", T: PubsubMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReceivedMessage {
    return new ReceivedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReceivedMessage {
    return new ReceivedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReceivedMessage {
    return new ReceivedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ReceivedMessage | PlainMessage<ReceivedMessage> | undefined, b: ReceivedMessage | PlainMessage<ReceivedMessage> | undefined): boolean {
    return proto3.util.equals(ReceivedMessage, a, b);
  }
}

/**
 * Request for the GetSubscription method.
 *
 * @generated from message google.pubsub.v1beta2.GetSubscriptionRequest
 */
export class GetSubscriptionRequest extends Message<GetSubscriptionRequest> {
  /**
   * The name of the subscription to get.
   *
   * @generated from field: string subscription = 1;
   */
  subscription = "";

  constructor(data?: PartialMessage<GetSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.GetSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubscriptionRequest {
    return new GetSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubscriptionRequest {
    return new GetSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubscriptionRequest {
    return new GetSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubscriptionRequest | PlainMessage<GetSubscriptionRequest> | undefined, b: GetSubscriptionRequest | PlainMessage<GetSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(GetSubscriptionRequest, a, b);
  }
}

/**
 * Request for the ListSubscriptions method.
 *
 * @generated from message google.pubsub.v1beta2.ListSubscriptionsRequest
 */
export class ListSubscriptionsRequest extends Message<ListSubscriptionsRequest> {
  /**
   * The name of the cloud project that subscriptions belong to.
   *
   * @generated from field: string project = 1;
   */
  project = "";

  /**
   * Maximum number of subscriptions to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * The value returned by the last ListSubscriptionsResponse; indicates that
   * this is a continuation of a prior ListSubscriptions call, and that the
   * system should return the next page of data.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListSubscriptionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.ListSubscriptionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSubscriptionsRequest {
    return new ListSubscriptionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSubscriptionsRequest {
    return new ListSubscriptionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSubscriptionsRequest {
    return new ListSubscriptionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSubscriptionsRequest | PlainMessage<ListSubscriptionsRequest> | undefined, b: ListSubscriptionsRequest | PlainMessage<ListSubscriptionsRequest> | undefined): boolean {
    return proto3.util.equals(ListSubscriptionsRequest, a, b);
  }
}

/**
 * Response for the ListSubscriptions method.
 *
 * @generated from message google.pubsub.v1beta2.ListSubscriptionsResponse
 */
export class ListSubscriptionsResponse extends Message<ListSubscriptionsResponse> {
  /**
   * The subscriptions that match the request.
   *
   * @generated from field: repeated google.pubsub.v1beta2.Subscription subscriptions = 1;
   */
  subscriptions: Subscription[] = [];

  /**
   * If not empty, indicates that there may be more subscriptions that match
   * the request; this value should be passed in a new ListSubscriptionsRequest
   * to get more subscriptions.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListSubscriptionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.ListSubscriptionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscriptions", kind: "message", T: Subscription, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSubscriptionsResponse {
    return new ListSubscriptionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSubscriptionsResponse {
    return new ListSubscriptionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSubscriptionsResponse {
    return new ListSubscriptionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSubscriptionsResponse | PlainMessage<ListSubscriptionsResponse> | undefined, b: ListSubscriptionsResponse | PlainMessage<ListSubscriptionsResponse> | undefined): boolean {
    return proto3.util.equals(ListSubscriptionsResponse, a, b);
  }
}

/**
 * Request for the DeleteSubscription method.
 *
 * @generated from message google.pubsub.v1beta2.DeleteSubscriptionRequest
 */
export class DeleteSubscriptionRequest extends Message<DeleteSubscriptionRequest> {
  /**
   * The subscription to delete.
   *
   * @generated from field: string subscription = 1;
   */
  subscription = "";

  constructor(data?: PartialMessage<DeleteSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.DeleteSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSubscriptionRequest {
    return new DeleteSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSubscriptionRequest {
    return new DeleteSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSubscriptionRequest {
    return new DeleteSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSubscriptionRequest | PlainMessage<DeleteSubscriptionRequest> | undefined, b: DeleteSubscriptionRequest | PlainMessage<DeleteSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSubscriptionRequest, a, b);
  }
}

/**
 * Request for the ModifyPushConfig method.
 *
 * @generated from message google.pubsub.v1beta2.ModifyPushConfigRequest
 */
export class ModifyPushConfigRequest extends Message<ModifyPushConfigRequest> {
  /**
   * The name of the subscription.
   *
   * @generated from field: string subscription = 1;
   */
  subscription = "";

  /**
   * The push configuration for future deliveries.
   *
   * An empty pushConfig indicates that the Pub/Sub system should
   * stop pushing messages from the given subscription and allow
   * messages to be pulled and acknowledged - effectively pausing
   * the subscription if Pull is not called.
   *
   * @generated from field: google.pubsub.v1beta2.PushConfig push_config = 2;
   */
  pushConfig?: PushConfig;

  constructor(data?: PartialMessage<ModifyPushConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.ModifyPushConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "push_config", kind: "message", T: PushConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModifyPushConfigRequest {
    return new ModifyPushConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModifyPushConfigRequest {
    return new ModifyPushConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModifyPushConfigRequest {
    return new ModifyPushConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ModifyPushConfigRequest | PlainMessage<ModifyPushConfigRequest> | undefined, b: ModifyPushConfigRequest | PlainMessage<ModifyPushConfigRequest> | undefined): boolean {
    return proto3.util.equals(ModifyPushConfigRequest, a, b);
  }
}

/**
 * Request for the Pull method.
 *
 * @generated from message google.pubsub.v1beta2.PullRequest
 */
export class PullRequest extends Message<PullRequest> {
  /**
   * The subscription from which messages should be pulled.
   *
   * @generated from field: string subscription = 1;
   */
  subscription = "";

  /**
   * If this is specified as true the system will respond immediately even if
   * it is not able to return a message in the Pull response. Otherwise the
   * system is allowed to wait until at least one message is available rather
   * than returning no messages. The client may cancel the request if it does
   * not wish to wait any longer for the response.
   *
   * @generated from field: bool return_immediately = 2;
   */
  returnImmediately = false;

  /**
   * The maximum number of messages returned for this request. The Pub/Sub
   * system may return fewer than the number specified.
   *
   * @generated from field: int32 max_messages = 3;
   */
  maxMessages = 0;

  constructor(data?: PartialMessage<PullRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.PullRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "return_immediately", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "max_messages", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullRequest {
    return new PullRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullRequest {
    return new PullRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullRequest {
    return new PullRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PullRequest | PlainMessage<PullRequest> | undefined, b: PullRequest | PlainMessage<PullRequest> | undefined): boolean {
    return proto3.util.equals(PullRequest, a, b);
  }
}

/**
 * Response for the Pull method.
 *
 * @generated from message google.pubsub.v1beta2.PullResponse
 */
export class PullResponse extends Message<PullResponse> {
  /**
   * Received Pub/Sub messages. The Pub/Sub system will return zero messages if
   * there are no more available in the backlog. The Pub/Sub system may return
   * fewer than the maxMessages requested even if there are more messages
   * available in the backlog.
   *
   * @generated from field: repeated google.pubsub.v1beta2.ReceivedMessage received_messages = 1;
   */
  receivedMessages: ReceivedMessage[] = [];

  constructor(data?: PartialMessage<PullResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.PullResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "received_messages", kind: "message", T: ReceivedMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullResponse {
    return new PullResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullResponse {
    return new PullResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullResponse {
    return new PullResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PullResponse | PlainMessage<PullResponse> | undefined, b: PullResponse | PlainMessage<PullResponse> | undefined): boolean {
    return proto3.util.equals(PullResponse, a, b);
  }
}

/**
 * Request for the ModifyAckDeadline method.
 *
 * @generated from message google.pubsub.v1beta2.ModifyAckDeadlineRequest
 */
export class ModifyAckDeadlineRequest extends Message<ModifyAckDeadlineRequest> {
  /**
   * The name of the subscription.
   *
   * @generated from field: string subscription = 1;
   */
  subscription = "";

  /**
   * The acknowledgment ID.
   *
   * @generated from field: string ack_id = 2;
   */
  ackId = "";

  /**
   * The new ack deadline with respect to the time this request was sent to the
   * Pub/Sub system. Must be >= 0. For example, if the value is 10, the new ack
   * deadline will expire 10 seconds after the ModifyAckDeadline call was made.
   * Specifying zero may immediately make the message available for another pull
   * request.
   *
   * @generated from field: int32 ack_deadline_seconds = 3;
   */
  ackDeadlineSeconds = 0;

  constructor(data?: PartialMessage<ModifyAckDeadlineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.ModifyAckDeadlineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ack_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ack_deadline_seconds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModifyAckDeadlineRequest {
    return new ModifyAckDeadlineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModifyAckDeadlineRequest {
    return new ModifyAckDeadlineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModifyAckDeadlineRequest {
    return new ModifyAckDeadlineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ModifyAckDeadlineRequest | PlainMessage<ModifyAckDeadlineRequest> | undefined, b: ModifyAckDeadlineRequest | PlainMessage<ModifyAckDeadlineRequest> | undefined): boolean {
    return proto3.util.equals(ModifyAckDeadlineRequest, a, b);
  }
}

/**
 * Request for the Acknowledge method.
 *
 * @generated from message google.pubsub.v1beta2.AcknowledgeRequest
 */
export class AcknowledgeRequest extends Message<AcknowledgeRequest> {
  /**
   * The subscription whose message is being acknowledged.
   *
   * @generated from field: string subscription = 1;
   */
  subscription = "";

  /**
   * The acknowledgment ID for the messages being acknowledged that was returned
   * by the Pub/Sub system in the Pull response. Must not be empty.
   *
   * @generated from field: repeated string ack_ids = 2;
   */
  ackIds: string[] = [];

  constructor(data?: PartialMessage<AcknowledgeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.pubsub.v1beta2.AcknowledgeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ack_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcknowledgeRequest {
    return new AcknowledgeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcknowledgeRequest {
    return new AcknowledgeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcknowledgeRequest {
    return new AcknowledgeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AcknowledgeRequest | PlainMessage<AcknowledgeRequest> | undefined, b: AcknowledgeRequest | PlainMessage<AcknowledgeRequest> | undefined): boolean {
    return proto3.util.equals(AcknowledgeRequest, a, b);
  }
}

